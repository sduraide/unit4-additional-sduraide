"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSetSettings = exports.useRegisterEvents = exports.useLoadGraph = exports.useSigma = void 0;
const react_1 = require("react");
const context_1 = require("./context");
function useSigma() {
    return context_1.useSigmaContext().sigma;
}
exports.useSigma = useSigma;
function useLoadGraph() {
    const sigma = useSigma();
    return react_1.useCallback((graph, clear = true) => {
        if (sigma && graph) {
            if (clear && sigma.getGraph().order > 0)
                sigma.getGraph().clear();
            sigma.getGraph().import(graph);
        }
    }, [sigma]);
}
exports.useLoadGraph = useLoadGraph;
function useRegisterEvents() {
    const sigma = useSigma();
    const [eventHandlers, setEventHandlers] = react_1.useState({});
    react_1.useEffect(() => {
        let event;
        if (!sigma || !eventHandlers) {
            return;
        }
        for (event in eventHandlers) {
            const eventHandler = eventHandlers[event];
            if (event === "cameraUpdated") {
                sigma.getCamera().on(event, eventHandler);
            }
            else {
                sigma.on(event, eventHandler);
            }
        }
        return () => {
            let event;
            for (event in eventHandlers) {
                const eventHandler = eventHandlers[event];
                if (event === "cameraUpdated") {
                    sigma.getCamera().removeListener(event, eventHandler);
                }
                else {
                    sigma.removeListener(event, eventHandler);
                }
            }
        };
    }, [sigma, eventHandlers]);
    return setEventHandlers;
}
exports.useRegisterEvents = useRegisterEvents;
function useSetSettings() {
    const sigma = useSigma();
    const [settings, setSettings] = react_1.useState({});
    react_1.useEffect(() => {
        if (!sigma || !settings) {
            return;
        }
        const prevSettings = {};
        Object.keys(settings).forEach((key) => {
            prevSettings[key] = settings[key];
            sigma.setSetting(key, settings[key]);
        });
        return () => {
            Object.keys(prevSettings).forEach((key) => {
                sigma.setSetting(key, prevSettings[key]);
            });
        };
    }, [sigma, settings]);
    return setSettings;
}
exports.useSetSettings = useSetSettings;
//# sourceMappingURL=hooks.js.map