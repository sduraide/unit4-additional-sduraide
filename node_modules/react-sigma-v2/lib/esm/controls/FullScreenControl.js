"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FullScreenControl = void 0;
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importStar(require("react"));
const context_1 = require("../context");
function toggleFullScreen(dom) {
    if (document.fullscreenElement !== dom) {
        dom.requestFullscreen();
    }
    else {
        if (document.exitFullscreen) {
            document.exitFullscreen();
        }
    }
}
const FullScreenControl = ({ id, className, style, customEnterFullScreen, customExitFullScreen, }) => {
    const { container } = context_1.useSigmaContext();
    const [isFullScreen, setFullScreen] = react_1.useState(false);
    const toggleState = () => setFullScreen((v) => !v);
    react_1.useEffect(() => {
        document.addEventListener("fullscreenchange", toggleState);
        return () => document.removeEventListener("fullscreenchange", toggleState);
    }, [toggleState]);
    const buttonClass = (isFullScreen && !customExitFullScreen) || (!isFullScreen && !customEnterFullScreen)
        ? "default"
        : "";
    const props = {
        className: `react-sigma-control-${isFullScreen ? "normalscreen" : "fullscreen"} ${className ? className : ""}`,
        id,
        style,
    };
    if (!document.fullscreenEnabled)
        return null;
    return (react_1.default.createElement("div", Object.assign({}, props),
        react_1.default.createElement("button", { className: buttonClass, onClick: () => toggleFullScreen(container), title: "Toggle Fullscreen" }, isFullScreen ? customExitFullScreen : customEnterFullScreen)));
};
exports.FullScreenControl = FullScreenControl;
//# sourceMappingURL=FullScreenControl.js.map