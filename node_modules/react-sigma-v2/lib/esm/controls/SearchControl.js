"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchControl = void 0;
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importStar(require("react"));
const hooks_1 = require("../hooks");
const SearchControl = ({ id, className, style }) => {
    const sigma = hooks_1.useSigma();
    const [search, setSearch] = react_1.useState("");
    const [values, setValues] = react_1.useState([]);
    const [selected, setSelected] = react_1.useState(null);
    react_1.useEffect(() => {
        const newValues = [];
        if (!selected && search.length > 1) {
            sigma.getGraph().forEachNode((key, attributes) => {
                if (attributes.label && attributes.label.toLowerCase().includes(search.toLowerCase()))
                    newValues.push({ id: key, label: attributes.label });
            });
        }
        setValues(newValues);
    }, [search]);
    react_1.useEffect(() => {
        if (!selected) {
            return;
        }
        sigma.getGraph().setNodeAttribute(selected, "highlighted", true);
        const nodeDisplayData = sigma.getNodeDisplayData(selected);
        if (nodeDisplayData) {
            sigma.getCamera().animate(nodeDisplayData, {
                easing: "linear",
                duration: 500,
            });
        }
        return () => {
            sigma.getGraph().setNodeAttribute(selected, "highlighted", false);
        };
    }, [selected]);
    const onInputChange = (e) => {
        const searchString = e.target.value;
        const valueItem = values.find(value => value.label === searchString);
        if (valueItem) {
            setSearch(valueItem.label);
            setValues([]);
            setSelected(valueItem.id);
        }
        else {
            setSelected(null);
            setSearch(searchString);
        }
    };
    const props = {
        className,
        id,
        style,
    };
    return (react_1.default.createElement("div", Object.assign({}, props),
        react_1.default.createElement("input", { type: "text", placeholder: "Search...", list: "nodes", value: search, onChange: onInputChange }),
        react_1.default.createElement("datalist", { id: "nodes" }, values.map((value) => (react_1.default.createElement("option", { key: value.id, value: value.label }, value.label))))));
};
exports.SearchControl = SearchControl;
//# sourceMappingURL=SearchControl.js.map