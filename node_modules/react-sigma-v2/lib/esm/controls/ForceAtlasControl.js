"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ForceAtlasControl = void 0;
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importStar(require("react"));
const worker_1 = tslib_1.__importDefault(require("graphology-layout-forceatlas2/worker"));
const lodash_1 = require("lodash");
const hooks_1 = require("../hooks");
const ForceAtlasControl = ({ id, className, style, settings, autoRunFor = -1, customStopLayout, customStartLayout, }) => {
    const sigma = hooks_1.useSigma();
    const fa2Settings = react_1.useRef(null);
    if (settings && !lodash_1.isEqual(fa2Settings.current, settings))
        fa2Settings.current = settings;
    const [fa2, setFa2] = react_1.useState(null);
    const [fa2IsRunning, setFa2IsRunning] = react_1.useState(false);
    react_1.useEffect(() => {
        if (!sigma) {
            return;
        }
        const nFa2 = new worker_1.default(sigma.getGraph(), fa2Settings.current || {});
        setFa2(nFa2);
        let timeout = null;
        if (autoRunFor > -1 && sigma.getGraph().order > 0) {
            setFa2IsRunning(true);
            timeout =
                autoRunFor > 0
                    ? window.setTimeout(() => {
                        setFa2IsRunning(false);
                    }, autoRunFor)
                    : null;
        }
        return () => {
            if (nFa2) {
                nFa2.kill();
            }
            if (timeout) {
                clearTimeout(timeout);
            }
        };
    }, [autoRunFor, fa2Settings, sigma]);
    react_1.useEffect(() => {
        try {
            if (fa2) {
                if (fa2IsRunning === true) {
                    fa2.start();
                }
                else {
                    fa2.stop();
                }
            }
        }
        catch (e) {
        }
    }, [fa2, fa2IsRunning]);
    const buttonClass = (fa2IsRunning === true && !customStopLayout) || (fa2IsRunning === false && !customStartLayout) ? "default" : "";
    const props = {
        className: `react-sigma-control-forceatlas2 ${fa2IsRunning ? "running" : "stopped"} ${className ? className : ""}`,
        id,
        style,
    };
    return (react_1.default.createElement("div", Object.assign({}, props),
        react_1.default.createElement("button", { className: buttonClass, onClick: () => setFa2IsRunning(e => !e), title: fa2IsRunning ? "Stop the layout animation" : "Start the layout animation" }, fa2IsRunning === true ? customStopLayout : customStartLayout)));
};
exports.ForceAtlasControl = ForceAtlasControl;
//# sourceMappingURL=ForceAtlasControl.js.map