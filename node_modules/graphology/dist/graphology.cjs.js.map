{"version":3,"file":"graphology.cjs.js","sources":["../src/utils.js","../src/errors.js","../src/data.js","../src/indices.js","../src/attributes.js","../src/iteration/edges.js","../src/iteration/neighbors.js","../src/iteration/adjacency.js","../src/serialization.js","../src/graph.js","../src/classes.js","../src/endpoint.cjs.js"],"sourcesContent":["/**\n * Graphology Utilities\n * =====================\n *\n * Collection of helpful functions used by the implementation.\n */\n\n/**\n * Object.assign-like polyfill.\n *\n * @param  {object} target       - First object.\n * @param  {object} [...objects] - Objects to merge.\n * @return {object}\n */\nfunction assignPolyfill() {\n  const target = arguments[0];\n\n  for (let i = 1, l = arguments.length; i < l; i++) {\n    if (!arguments[i]) continue;\n\n    for (const k in arguments[i]) target[k] = arguments[i][k];\n  }\n\n  return target;\n}\n\nlet assign = assignPolyfill;\n\nif (typeof Object.assign === 'function') assign = Object.assign;\n\nexport {assign};\n\n/**\n * Function returning the first matching edge for given path.\n * Note: this function does not check the existence of source & target. This\n * must be performed by the caller.\n *\n * @param  {Graph}  graph  - Target graph.\n * @param  {any}    source - Source node.\n * @param  {any}    target - Target node.\n * @param  {string} type   - Type of the edge (mixed, directed or undirected).\n * @return {string|null}\n */\nexport function getMatchingEdge(graph, source, target, type) {\n  const sourceData = graph._nodes.get(source);\n\n  let edge = null;\n\n  if (!sourceData) return edge;\n\n  if (type === 'mixed') {\n    edge =\n      (sourceData.out && sourceData.out[target]) ||\n      (sourceData.undirected && sourceData.undirected[target]);\n  } else if (type === 'directed') {\n    edge = sourceData.out && sourceData.out[target];\n  } else {\n    edge = sourceData.undirected && sourceData.undirected[target];\n  }\n\n  return edge;\n}\n\n/**\n * Checks whether the given value is a Graph implementation instance.\n *\n * @param  {mixed}   value - Target value.\n * @return {boolean}\n */\nexport function isGraph(value) {\n  return (\n    value !== null &&\n    typeof value === 'object' &&\n    typeof value.addUndirectedEdgeWithKey === 'function' &&\n    typeof value.dropNode === 'function'\n  );\n}\n\n/**\n * Checks whether the given value is a plain object.\n *\n * @param  {mixed}   value - Target value.\n * @return {boolean}\n */\nexport function isPlainObject(value) {\n  return (\n    typeof value === 'object' && value !== null && value.constructor === Object\n  );\n}\n\n/**\n * Checks whether the given object is empty.\n *\n * @param  {object}  o - Target Object.\n * @return {boolean}\n */\nexport function isEmpty(o) {\n  let k;\n\n  for (k in o) return false;\n\n  return true;\n}\n\n/**\n * Creates a \"private\" property for the given member name by concealing it\n * using the `enumerable` option.\n *\n * @param {object} target - Target object.\n * @param {string} name   - Member name.\n */\nexport function privateProperty(target, name, value) {\n  Object.defineProperty(target, name, {\n    enumerable: false,\n    configurable: false,\n    writable: true,\n    value\n  });\n}\n\n/**\n * Creates a read-only property for the given member name & the given getter.\n *\n * @param {object}   target - Target object.\n * @param {string}   name   - Member name.\n * @param {mixed}    value  - The attached getter or fixed value.\n */\nexport function readOnlyProperty(target, name, value) {\n  const descriptor = {\n    enumerable: true,\n    configurable: true\n  };\n\n  if (typeof value === 'function') {\n    descriptor.get = value;\n  } else {\n    descriptor.value = value;\n    descriptor.writable = false;\n  }\n\n  Object.defineProperty(target, name, descriptor);\n}\n\n/**\n * Returns whether the given object constitute valid hints.\n *\n * @param {object} hints - Target object.\n */\nexport function validateHints(hints) {\n  if (!isPlainObject(hints)) return false;\n\n  if (hints.attributes && !Array.isArray(hints.attributes)) return false;\n\n  return true;\n}\n\n/**\n * Creates a function generating incremental ids for edges.\n *\n * @return {function}\n */\nexport function incrementalIdStartingFromRandomByte() {\n  let i = Math.floor(Math.random() * 256) & 0xff;\n\n  return () => {\n    return i++;\n  };\n}\n","/**\n * Graphology Custom Errors\n * =========================\n *\n * Defining custom errors for ease of use & easy unit tests across\n * implementations (normalized typology rather than relying on error\n * messages to check whether the correct error was found).\n */\nexport class GraphError extends Error {\n  constructor(message) {\n    super();\n    this.name = 'GraphError';\n    this.message = message;\n  }\n}\n\nexport class InvalidArgumentsGraphError extends GraphError {\n  constructor(message) {\n    super(message);\n    this.name = 'InvalidArgumentsGraphError';\n\n    // This is V8 specific to enhance stack readability\n    if (typeof Error.captureStackTrace === 'function')\n      Error.captureStackTrace(\n        this,\n        InvalidArgumentsGraphError.prototype.constructor\n      );\n  }\n}\n\nexport class NotFoundGraphError extends GraphError {\n  constructor(message) {\n    super(message);\n    this.name = 'NotFoundGraphError';\n\n    // This is V8 specific to enhance stack readability\n    if (typeof Error.captureStackTrace === 'function')\n      Error.captureStackTrace(this, NotFoundGraphError.prototype.constructor);\n  }\n}\n\nexport class UsageGraphError extends GraphError {\n  constructor(message) {\n    super(message);\n    this.name = 'UsageGraphError';\n\n    // This is V8 specific to enhance stack readability\n    if (typeof Error.captureStackTrace === 'function')\n      Error.captureStackTrace(this, UsageGraphError.prototype.constructor);\n  }\n}\n","/**\n * Graphology Internal Data Classes\n * =================================\n *\n * Internal classes hopefully reduced to structs by engines & storing\n * necessary information for nodes & edges.\n *\n * Note that those classes don't rely on the `class` keyword to avoid some\n * cruft introduced by most of ES2015 transpilers.\n */\n\n/**\n * MixedNodeData class.\n *\n * @constructor\n * @param {string} string     - The node's key.\n * @param {object} attributes - Node's attributes.\n */\nexport function MixedNodeData(key, attributes) {\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n\n  this.clear();\n}\n\nMixedNodeData.prototype.clear = function () {\n  // Degrees\n  this.inDegree = 0;\n  this.outDegree = 0;\n  this.undirectedDegree = 0;\n  this.directedSelfLoops = 0;\n  this.undirectedSelfLoops = 0;\n\n  // Indices\n  this.in = {};\n  this.out = {};\n  this.undirected = {};\n};\n\n/**\n * DirectedNodeData class.\n *\n * @constructor\n * @param {string} string     - The node's key.\n * @param {object} attributes - Node's attributes.\n */\nexport function DirectedNodeData(key, attributes) {\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n\n  this.clear();\n}\n\nDirectedNodeData.prototype.clear = function () {\n  // Degrees\n  this.inDegree = 0;\n  this.outDegree = 0;\n  this.directedSelfLoops = 0;\n\n  // Indices\n  this.in = {};\n  this.out = {};\n};\n\nDirectedNodeData.prototype.upgradeToMixed = function () {\n  // Degrees\n  this.undirectedDegree = 0;\n  this.undirectedSelfLoops = 0;\n\n  // Indices\n  this.undirected = {};\n};\n\n/**\n * UndirectedNodeData class.\n *\n * @constructor\n * @param {string} string     - The node's key.\n * @param {object} attributes - Node's attributes.\n */\nexport function UndirectedNodeData(key, attributes) {\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n\n  this.clear();\n}\n\nUndirectedNodeData.prototype.clear = function () {\n  // Degrees\n  this.undirectedDegree = 0;\n  this.undirectedSelfLoops = 0;\n\n  // Indices\n  this.undirected = {};\n};\n\nUndirectedNodeData.prototype.upgradeToMixed = function () {\n  // Degrees\n  this.inDegree = 0;\n  this.outDegree = 0;\n  this.directedSelfLoops = 0;\n\n  // Indices\n  this.in = {};\n  this.out = {};\n};\n\n/**\n * EdgeData class.\n *\n * @constructor\n * @param {boolean} undirected   - Whether the edge is undirected.\n * @param {string}  string       - The edge's key.\n * @param {string}  source       - Source of the edge.\n * @param {string}  target       - Target of the edge.\n * @param {object}  attributes   - Edge's attributes.\n */\nexport function EdgeData(undirected, key, source, target, attributes) {\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n  this.undirected = undirected;\n\n  // Extremities\n  this.source = source;\n  this.target = target;\n}\n","/**\n * Graphology Indexes Functions\n * =============================\n *\n * Bunch of functions used to compute or clear indexes.\n */\n\n/**\n * Function updating the 'structure' index with the given edge's data.\n * Note that in the case of the multi graph, related edges are stored in a\n * set that is the same for A -> B & B <- A.\n *\n * @param {Graph}    graph      - Target Graph instance.\n * @param {EdgeData} edgeData   - Added edge's data.\n * @param {NodeData} sourceData - Source node's data.\n * @param {NodeData} targetData - Target node's data.\n */\nexport function updateStructureIndex(\n  graph,\n  undirected,\n  edgeData,\n  source,\n  target,\n  sourceData,\n  targetData\n) {\n  const multi = graph.multi;\n\n  let outKey = 'out';\n  let inKey = 'in';\n\n  if (undirected) outKey = inKey = 'undirected';\n\n  let adj, container;\n\n  if (multi) {\n    // Handling source\n    adj = sourceData[outKey];\n    container = adj[target];\n\n    if (typeof container === 'undefined') {\n      container = new Set();\n      adj[target] = container;\n    }\n\n    container.add(edgeData);\n\n    // If selfLoop, we break here\n    if (source === target && undirected) return;\n\n    // Handling target (we won't add the edge because it was already taken\n    // care of with source above)\n    adj = targetData[inKey];\n    if (typeof adj[source] === 'undefined') adj[source] = container;\n  } else {\n    // Handling source\n    sourceData[outKey][target] = edgeData;\n\n    // If selfLoop, we break here\n    if (source === target && undirected) return;\n\n    // Handling target\n    targetData[inKey][source] = edgeData;\n  }\n}\n\n/**\n * Function clearing the 'structure' index data related to the given edge.\n *\n * @param {Graph}    graph    - Target Graph instance.\n * @param {EdgeData} edgeData - Dropped edge's data.\n */\nexport function clearEdgeFromStructureIndex(graph, undirected, edgeData) {\n  const multi = graph.multi;\n\n  const {source: sourceData, target: targetData} = edgeData;\n\n  const source = sourceData.key,\n    target = targetData.key;\n\n  // NOTE: since the edge set is the same for source & target, we can only\n  // affect source\n  const outKey = undirected ? 'undirected' : 'out',\n    sourceIndex = sourceData[outKey];\n\n  const inKey = undirected ? 'undirected' : 'in';\n\n  if (target in sourceIndex) {\n    if (multi) {\n      const set = sourceIndex[target];\n\n      if (set.size === 1) {\n        delete sourceIndex[target];\n        delete targetData[inKey][source];\n      } else {\n        set.delete(edgeData);\n      }\n    } else delete sourceIndex[target];\n  }\n\n  if (multi) return;\n\n  const targetIndex = targetData[inKey];\n\n  delete targetIndex[source];\n}\n\n/**\n * Function clearing the whole 'structure' index.\n *\n * @param {Graph} graph - Target Graph instance.\n */\nexport function clearStructureIndex(graph) {\n  const iterator = graph._nodes.values();\n\n  let step;\n\n  while (((step = iterator.next()), step.done !== true)) {\n    step.value.clear();\n  }\n}\n\n/**\n * Function used to upgrade a simple `structure` index to a multi on.\n *\n * @param {Graph}  graph - Target Graph instance.\n */\nexport function upgradeStructureIndexToMulti(graph) {\n  graph._nodes.forEach((data, node) => {\n    // Directed\n    if (data.out) {\n      for (const neighbor in data.out) {\n        const edges = new Set();\n        edges.add(data.out[neighbor]);\n        data.out[neighbor] = edges;\n        graph._nodes.get(neighbor).in[node] = edges;\n      }\n    }\n\n    // Undirected\n    if (data.undirected) {\n      for (const neighbor in data.undirected) {\n        if (neighbor > node) continue;\n\n        const edges = new Set();\n        edges.add(data.undirected[neighbor]);\n        data.undirected[neighbor] = edges;\n        graph._nodes.get(neighbor).undirected[node] = edges;\n      }\n    }\n  });\n}\n","/**\n * Graphology Attributes methods\n * ==============================\n *\n * Attributes-related methods being exactly the same for nodes & edges,\n * we abstract them here for factorization reasons.\n */\nimport {assign, isPlainObject, getMatchingEdge} from './utils';\n\nimport {\n  InvalidArgumentsGraphError,\n  NotFoundGraphError,\n  UsageGraphError\n} from './errors';\n\n/**\n * Attach an attribute getter method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachAttributeGetter(Class, method, type) {\n  /**\n   * Get the desired attribute for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   *\n   * @return {mixed}          - The attribute's value.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + name;\n\n      name = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (type !== 'mixed' && data.undirected !== (type === 'undirected'))\n      throw new NotFoundGraphError(\n        `Graph.${method}: could not find the \"${element}\" ${type} edge in the graph.`\n      );\n\n    return data.attributes[name];\n  };\n}\n\n/**\n * Attach an attributes getter method onto the provided class.\n *\n * @param {function} Class       - Target class.\n * @param {string}   method      - Method name.\n * @param {string}   type        - Type of the edge to find.\n */\nfunction attachAttributesGetter(Class, method, type) {\n  /**\n   * Retrieves all the target element's attributes.\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   *\n   * @return {object}          - The element's attributes.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 1) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + arguments[1];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (type !== 'mixed' && data.undirected !== (type === 'undirected'))\n      throw new NotFoundGraphError(\n        `Graph.${method}: could not find the \"${element}\" ${type} edge in the graph.`\n      );\n\n    return data.attributes;\n  };\n}\n\n/**\n * Attach an attribute checker method onto the provided class.\n *\n * @param {function} Class       - Target class.\n * @param {string}   method      - Method name.\n * @param {string}   type        - Type of the edge to find.\n */\nfunction attachAttributeChecker(Class, method, type) {\n  /**\n   * Checks whether the desired attribute is set for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + name;\n\n      name = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (type !== 'mixed' && data.undirected !== (type === 'undirected'))\n      throw new NotFoundGraphError(\n        `Graph.${method}: could not find the \"${element}\" ${type} edge in the graph.`\n      );\n\n    return data.attributes.hasOwnProperty(name);\n  };\n}\n\n/**\n * Attach an attribute setter method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachAttributeSetter(Class, method, type) {\n  /**\n   * Set the desired attribute for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   * @param  {mixed}  value   - New attribute value.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   * @param  {mixed}  value   - New attribute value.\n   *\n   * @return {Graph}          - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name, value) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 3) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + name;\n\n      name = arguments[2];\n      value = arguments[3];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (type !== 'mixed' && data.undirected !== (type === 'undirected'))\n      throw new NotFoundGraphError(\n        `Graph.${method}: could not find the \"${element}\" ${type} edge in the graph.`\n      );\n\n    data.attributes[name] = value;\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute updater method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachAttributeUpdater(Class, method, type) {\n  /**\n   * Update the desired attribute for the given element (node or edge) using\n   * the provided function.\n   *\n   * Arity 2:\n   * @param  {any}      element - Target element.\n   * @param  {string}   name    - Attribute's name.\n   * @param  {function} updater - Updater function.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}      source  - Source element.\n   * @param  {any}      target  - Target element.\n   * @param  {string}   name    - Attribute's name.\n   * @param  {function} updater - Updater function.\n   *\n   * @return {Graph}            - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name, updater) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 3) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + name;\n\n      name = arguments[2];\n      updater = arguments[3];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: updater should be a function.`\n      );\n\n    if (type !== 'mixed' && data.undirected !== (type === 'undirected'))\n      throw new NotFoundGraphError(\n        `Graph.${method}: could not find the \"${element}\" ${type} edge in the graph.`\n      );\n\n    data.attributes[name] = updater(data.attributes[name]);\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute remover method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachAttributeRemover(Class, method, type) {\n  /**\n   * Remove the desired attribute for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   *\n   * @return {Graph}          - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + name;\n\n      name = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (type !== 'mixed' && data.undirected !== (type === 'undirected'))\n      throw new NotFoundGraphError(\n        `Graph.${method}: could not find the \"${element}\" ${type} edge in the graph.`\n      );\n\n    delete data.attributes[name];\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'remove',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute replacer method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachAttributesReplacer(Class, method, type) {\n  /**\n   * Replace the attributes for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element    - Target element.\n   * @param  {object} attributes - New attributes.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source     - Source element.\n   * @param  {any}     target     - Target element.\n   * @param  {object}  attributes - New attributes.\n   *\n   * @return {Graph}              - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, attributes) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + attributes;\n\n      attributes = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided attributes are not a plain object.`\n      );\n\n    if (type !== 'mixed' && data.undirected !== (type === 'undirected'))\n      throw new NotFoundGraphError(\n        `Graph.${method}: could not find the \"${element}\" ${type} edge in the graph.`\n      );\n\n    data.attributes = attributes;\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'replace',\n      attributes: data.attributes\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute merger method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachAttributesMerger(Class, method, type) {\n  /**\n   * Replace the attributes for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element    - Target element.\n   * @param  {object} attributes - Attributes to merge.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source     - Source element.\n   * @param  {any}     target     - Target element.\n   * @param  {object}  attributes - Attributes to merge.\n   *\n   * @return {Graph}              - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, attributes) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + attributes;\n\n      attributes = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided attributes are not a plain object.`\n      );\n\n    if (type !== 'mixed' && data.undirected !== (type === 'undirected'))\n      throw new NotFoundGraphError(\n        `Graph.${method}: could not find the \"${element}\" ${type} edge in the graph.`\n      );\n\n    assign(data.attributes, attributes);\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'merge',\n      attributes: data.attributes,\n      data: attributes\n    });\n\n    return this;\n  };\n}\n\n/**\n * List of methods to attach.\n */\nconst ATTRIBUTES_METHODS = [\n  {\n    name: element => `get${element}Attribute`,\n    attacher: attachAttributeGetter\n  },\n  {\n    name: element => `get${element}Attributes`,\n    attacher: attachAttributesGetter\n  },\n  {\n    name: element => `has${element}Attribute`,\n    attacher: attachAttributeChecker\n  },\n  {\n    name: element => `set${element}Attribute`,\n    attacher: attachAttributeSetter\n  },\n  {\n    name: element => `update${element}Attribute`,\n    attacher: attachAttributeUpdater\n  },\n  {\n    name: element => `remove${element}Attribute`,\n    attacher: attachAttributeRemover\n  },\n  {\n    name: element => `replace${element}Attributes`,\n    attacher: attachAttributesReplacer\n  },\n  {\n    name: element => `merge${element}Attributes`,\n    attacher: attachAttributesMerger\n  }\n];\n\n/**\n * Attach every attributes-related methods to a Graph class.\n *\n * @param {function} Graph - Target class.\n */\nexport function attachAttributesMethods(Graph) {\n  ATTRIBUTES_METHODS.forEach(function ({name, attacher}) {\n    // For edges\n    attacher(Graph, name('Edge'), 'mixed');\n\n    // For directed edges\n    attacher(Graph, name('DirectedEdge'), 'directed');\n\n    // For undirected edges\n    attacher(Graph, name('UndirectedEdge'), 'undirected');\n  });\n}\n","/**\n * Graphology Edge Iteration\n * ==========================\n *\n * Attaching some methods to the Graph class to be able to iterate over a\n * graph's edges.\n */\nimport Iterator from 'obliterator/iterator';\nimport chain from 'obliterator/chain';\nimport take from 'obliterator/take';\n\nimport {InvalidArgumentsGraphError, NotFoundGraphError} from '../errors';\n\n/**\n * Definitions.\n */\nconst EDGES_ITERATION = [\n  {\n    name: 'edges',\n    type: 'mixed'\n  },\n  {\n    name: 'inEdges',\n    type: 'directed',\n    direction: 'in'\n  },\n  {\n    name: 'outEdges',\n    type: 'directed',\n    direction: 'out'\n  },\n  {\n    name: 'inboundEdges',\n    type: 'mixed',\n    direction: 'in'\n  },\n  {\n    name: 'outboundEdges',\n    type: 'mixed',\n    direction: 'out'\n  },\n  {\n    name: 'directedEdges',\n    type: 'directed'\n  },\n  {\n    name: 'undirectedEdges',\n    type: 'undirected'\n  }\n];\n\n/**\n * Function collecting edges from the given object.\n *\n * @param  {array}  edges  - Edges array to populate.\n * @param  {object} object - Target object.\n * @return {array}         - The found edges.\n */\nfunction collectSimple(edges, object) {\n  for (const k in object) edges.push(object[k].key);\n}\n\nfunction collectMulti(edges, object) {\n  for (const k in object)\n    object[k].forEach(edgeData => edges.push(edgeData.key));\n}\n\n/**\n * Function iterating over edges from the given object using a callback.\n *\n * @param {object}   object   - Target object.\n * @param {function} callback - Function to call.\n */\nfunction forEachSimple(object, callback, avoid) {\n  for (const k in object) {\n    if (k === avoid) continue;\n\n    const edgeData = object[k];\n\n    callback(\n      edgeData.key,\n      edgeData.attributes,\n      edgeData.source.key,\n      edgeData.target.key,\n      edgeData.source.attributes,\n      edgeData.target.attributes,\n      edgeData.undirected\n    );\n  }\n}\n\nfunction forEachMulti(object, callback, avoid) {\n  for (const k in object) {\n    if (k === avoid) continue;\n\n    object[k].forEach(edgeData =>\n      callback(\n        edgeData.key,\n        edgeData.attributes,\n        edgeData.source.key,\n        edgeData.target.key,\n        edgeData.source.attributes,\n        edgeData.target.attributes,\n        edgeData.undirected\n      )\n    );\n  }\n}\n\n/**\n * Function iterating over edges from the given object to match one of them.\n *\n * @param {object}   object   - Target object.\n * @param {function} callback - Function to call.\n */\nfunction findSimple(object, callback, avoid) {\n  let shouldBreak = false;\n\n  for (const k in object) {\n    if (k === avoid) continue;\n\n    const edgeData = object[k];\n\n    shouldBreak = callback(\n      edgeData.key,\n      edgeData.attributes,\n      edgeData.source.key,\n      edgeData.target.key,\n      edgeData.source.attributes,\n      edgeData.target.attributes,\n      edgeData.undirected\n    );\n\n    if (shouldBreak) return edgeData.key;\n  }\n\n  return;\n}\n\nfunction findMulti(object, callback, avoid) {\n  let iterator, step, edgeData, source, target;\n\n  let shouldBreak = false;\n\n  for (const k in object) {\n    if (k === avoid) continue;\n\n    iterator = object[k].values();\n\n    while (((step = iterator.next()), step.done !== true)) {\n      edgeData = step.value;\n      source = edgeData.source;\n      target = edgeData.target;\n\n      shouldBreak = callback(\n        edgeData.key,\n        edgeData.attributes,\n        source.key,\n        target.key,\n        source.attributes,\n        target.attributes,\n        edgeData.undirected\n      );\n\n      if (shouldBreak) return edgeData.key;\n    }\n  }\n\n  return;\n}\n\n/**\n * Function returning an iterator over edges from the given object.\n *\n * @param  {object}   object - Target object.\n * @return {Iterator}\n */\nfunction createIterator(object, avoid) {\n  const keys = Object.keys(object),\n    l = keys.length;\n\n  let inner = null,\n    i = 0;\n\n  return new Iterator(function next() {\n    let edgeData;\n\n    if (inner) {\n      const step = inner.next();\n\n      if (step.done) {\n        inner = null;\n        i++;\n        return next();\n      }\n\n      edgeData = step.value;\n    } else {\n      if (i >= l) return {done: true};\n\n      const k = keys[i];\n\n      if (k === avoid) {\n        i++;\n        return next();\n      }\n\n      edgeData = object[k];\n\n      if (edgeData instanceof Set) {\n        inner = edgeData.values();\n        return next();\n      }\n\n      i++;\n    }\n\n    return {\n      done: false,\n      value: {\n        edge: edgeData.key,\n        attributes: edgeData.attributes,\n        source: edgeData.source.key,\n        target: edgeData.target.key,\n        sourceAttributes: edgeData.source.attributes,\n        targetAttributes: edgeData.target.attributes,\n        undirected: edgeData.undirected\n      }\n    };\n  });\n}\n\n/**\n * Function collecting edges from the given object at given key.\n *\n * @param  {array}  edges  - Edges array to populate.\n * @param  {object} object - Target object.\n * @param  {mixed}  k      - Neighbor key.\n * @return {array}         - The found edges.\n */\nfunction collectForKeySimple(edges, object, k) {\n  const edgeData = object[k];\n\n  if (!edgeData) return;\n\n  edges.push(edgeData.key);\n}\n\nfunction collectForKeyMulti(edges, object, k) {\n  const edgesData = object[k];\n\n  if (!edgesData) return;\n\n  edgesData.forEach(edgeData => edges.push(edgeData.key));\n}\n\n/**\n * Function iterating over the egdes from the object at given key using\n * a callback.\n *\n * @param {object}   object   - Target object.\n * @param {mixed}    k        - Neighbor key.\n * @param {function} callback - Callback to use.\n */\nfunction forEachForKeySimple(object, k, callback) {\n  const edgeData = object[k];\n\n  if (!edgeData) return;\n\n  const sourceData = edgeData.source;\n  const targetData = edgeData.target;\n\n  callback(\n    edgeData.key,\n    edgeData.attributes,\n    sourceData.key,\n    targetData.key,\n    sourceData.attributes,\n    targetData.attributes,\n    edgeData.undirected\n  );\n}\n\nfunction forEachForKeyMulti(object, k, callback) {\n  const edgesData = object[k];\n\n  if (!edgesData) return;\n\n  edgesData.forEach(edgeData =>\n    callback(\n      edgeData.key,\n      edgeData.attributes,\n      edgeData.source.key,\n      edgeData.target.key,\n      edgeData.source.attributes,\n      edgeData.target.attributes,\n      edgeData.undirected\n    )\n  );\n}\n\n/**\n * Function iterating over the egdes from the object at given key to match\n * one of them.\n *\n * @param {object}   object   - Target object.\n * @param {mixed}    k        - Neighbor key.\n * @param {function} callback - Callback to use.\n */\nfunction findForKeySimple(object, k, callback) {\n  const edgeData = object[k];\n\n  if (!edgeData) return;\n\n  const sourceData = edgeData.source;\n  const targetData = edgeData.target;\n\n  if (\n    callback(\n      edgeData.key,\n      edgeData.attributes,\n      sourceData.key,\n      targetData.key,\n      sourceData.attributes,\n      targetData.attributes,\n      edgeData.undirected\n    )\n  )\n    return edgeData.key;\n}\n\nfunction findForKeyMulti(object, k, callback) {\n  const edgesData = object[k];\n\n  if (!edgesData) return;\n\n  let shouldBreak = false;\n\n  const iterator = edgesData.values();\n  let step, edgeData;\n\n  while (((step = iterator.next()), step.done !== true)) {\n    edgeData = step.value;\n\n    shouldBreak = callback(\n      edgeData.key,\n      edgeData.attributes,\n      edgeData.source.key,\n      edgeData.target.key,\n      edgeData.source.attributes,\n      edgeData.target.attributes,\n      edgeData.undirected\n    );\n\n    if (shouldBreak) return edgeData.key;\n  }\n\n  return;\n}\n\n/**\n * Function returning an iterator over the egdes from the object at given key.\n *\n * @param  {object}   object   - Target object.\n * @param  {mixed}    k        - Neighbor key.\n * @return {Iterator}\n */\nfunction createIteratorForKey(object, k) {\n  const v = object[k];\n\n  if (v instanceof Set) {\n    const iterator = v.values();\n\n    return new Iterator(function () {\n      const step = iterator.next();\n\n      if (step.done) return step;\n\n      const edgeData = step.value;\n\n      return {\n        done: false,\n        value: {\n          edge: edgeData.key,\n          attributes: edgeData.attributes,\n          source: edgeData.source.key,\n          target: edgeData.target.key,\n          sourceAttributes: edgeData.source.attributes,\n          targetAttributes: edgeData.target.attributes,\n          undirected: edgeData.undirected\n        }\n      };\n    });\n  }\n\n  return Iterator.of([\n    v.key,\n    v.attributes,\n    v.source.key,\n    v.target.key,\n    v.source.attributes,\n    v.target.attributes\n  ]);\n}\n\n/**\n * Function creating an array of edges for the given type.\n *\n * @param  {Graph}   graph - Target Graph instance.\n * @param  {string}  type  - Type of edges to retrieve.\n * @return {array}         - Array of edges.\n */\nfunction createEdgeArray(graph, type) {\n  if (graph.size === 0) return [];\n\n  if (type === 'mixed' || type === graph.type) {\n    if (typeof Array.from === 'function')\n      return Array.from(graph._edges.keys());\n\n    return take(graph._edges.keys(), graph._edges.size);\n  }\n\n  const size =\n    type === 'undirected' ? graph.undirectedSize : graph.directedSize;\n\n  const list = new Array(size),\n    mask = type === 'undirected';\n\n  const iterator = graph._edges.values();\n\n  let i = 0;\n  let step, data;\n\n  while (((step = iterator.next()), step.done !== true)) {\n    data = step.value;\n\n    if (data.undirected === mask) list[i++] = data.key;\n  }\n\n  return list;\n}\n\n/**\n * Function iterating over a graph's edges using a callback.\n *\n * @param  {Graph}    graph    - Target Graph instance.\n * @param  {string}   type     - Type of edges to retrieve.\n * @param  {function} callback - Function to call.\n */\nfunction forEachEdge(graph, type, callback) {\n  if (graph.size === 0) return;\n\n  const shouldFilter = type !== 'mixed' && type !== graph.type;\n  const mask = type === 'undirected';\n\n  let step, data;\n  const iterator = graph._edges.values();\n\n  while (((step = iterator.next()), step.done !== true)) {\n    data = step.value;\n\n    if (shouldFilter && data.undirected !== mask) continue;\n\n    const {key, attributes, source, target} = data;\n\n    callback(\n      key,\n      attributes,\n      source.key,\n      target.key,\n      source.attributes,\n      target.attributes,\n      data.undirected\n    );\n  }\n}\n\n/**\n * Function iterating over a graph's edges using a callback to match one of\n * them.\n *\n * @param  {Graph}    graph    - Target Graph instance.\n * @param  {string}   type     - Type of edges to retrieve.\n * @param  {function} callback - Function to call.\n */\nfunction findEdge(graph, type, callback) {\n  if (graph.size === 0) return;\n\n  const shouldFilter = type !== 'mixed' && type !== graph.type;\n  const mask = type === 'undirected';\n\n  let step, data;\n  let shouldBreak = false;\n  const iterator = graph._edges.values();\n\n  while (((step = iterator.next()), step.done !== true)) {\n    data = step.value;\n\n    if (shouldFilter && data.undirected !== mask) continue;\n\n    const {key, attributes, source, target} = data;\n\n    shouldBreak = callback(\n      key,\n      attributes,\n      source.key,\n      target.key,\n      source.attributes,\n      target.attributes,\n      data.undirected\n    );\n\n    if (shouldBreak) return key;\n  }\n\n  return;\n}\n\n/**\n * Function creating an iterator of edges for the given type.\n *\n * @param  {Graph}    graph - Target Graph instance.\n * @param  {string}   type  - Type of edges to retrieve.\n * @return {Iterator}\n */\nfunction createEdgeIterator(graph, type) {\n  if (graph.size === 0) return Iterator.empty();\n\n  const shouldFilter = type !== 'mixed' && type !== graph.type;\n  const mask = type === 'undirected';\n\n  const iterator = graph._edges.values();\n\n  return new Iterator(function next() {\n    let step, data;\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      step = iterator.next();\n\n      if (step.done) return step;\n\n      data = step.value;\n\n      if (shouldFilter && data.undirected !== mask) continue;\n\n      break;\n    }\n\n    const value = {\n      edge: data.key,\n      attributes: data.attributes,\n      source: data.source.key,\n      target: data.target.key,\n      sourceAttributes: data.source.attributes,\n      targetAttributes: data.target.attributes,\n      undirected: data.undirected\n    };\n\n    return {value, done: false};\n  });\n}\n\n/**\n * Function creating an array of edges for the given type & the given node.\n *\n * @param  {boolean} multi     - Whether the graph is multi or not.\n * @param  {string}  type      - Type of edges to retrieve.\n * @param  {string}  direction - In or out?\n * @param  {any}     nodeData  - Target node's data.\n * @return {array}             - Array of edges.\n */\nfunction createEdgeArrayForNode(multi, type, direction, nodeData) {\n  const edges = [];\n\n  const fn = multi ? collectMulti : collectSimple;\n\n  if (type !== 'undirected') {\n    if (direction !== 'out') fn(edges, nodeData.in);\n    if (direction !== 'in') fn(edges, nodeData.out);\n\n    // Handling self loop edge case\n    if (!direction && nodeData.directedSelfLoops > 0)\n      edges.splice(edges.lastIndexOf(nodeData.key), 1);\n  }\n\n  if (type !== 'directed') {\n    fn(edges, nodeData.undirected);\n  }\n\n  return edges;\n}\n\n/**\n * Function iterating over a node's edges using a callback.\n *\n * @param  {boolean}  multi     - Whether the graph is multi or not.\n * @param  {string}   type      - Type of edges to retrieve.\n * @param  {string}   direction - In or out?\n * @param  {any}      nodeData  - Target node's data.\n * @param  {function} callback  - Function to call.\n */\nfunction forEachEdgeForNode(multi, type, direction, nodeData, callback) {\n  const fn = multi ? forEachMulti : forEachSimple;\n\n  if (type !== 'undirected') {\n    if (direction !== 'out') fn(nodeData.in, callback);\n    if (direction !== 'in')\n      fn(nodeData.out, callback, !direction ? nodeData.key : null);\n  }\n\n  if (type !== 'directed') {\n    fn(nodeData.undirected, callback);\n  }\n}\n\n/**\n * Function iterating over a node's edges using a callback to match one of them.\n *\n * @param  {boolean}  multi     - Whether the graph is multi or not.\n * @param  {string}   type      - Type of edges to retrieve.\n * @param  {string}   direction - In or out?\n * @param  {any}      nodeData  - Target node's data.\n * @param  {function} callback  - Function to call.\n */\nfunction findEdgeForNode(multi, type, direction, nodeData, callback) {\n  const fn = multi ? findMulti : findSimple;\n\n  let found;\n\n  if (type !== 'undirected') {\n    if (direction !== 'out') {\n      found = fn(nodeData.in, callback);\n\n      if (found) return found;\n    }\n    if (direction !== 'in') {\n      found = fn(nodeData.out, callback, !direction ? nodeData.key : null);\n\n      if (found) return found;\n    }\n  }\n\n  if (type !== 'directed') {\n    found = fn(nodeData.undirected, callback);\n\n    if (found) return found;\n  }\n\n  return;\n}\n\n/**\n * Function iterating over a node's edges using a callback.\n *\n * @param  {string}   type      - Type of edges to retrieve.\n * @param  {string}   direction - In or out?\n * @param  {any}      nodeData  - Target node's data.\n * @return {Iterator}\n */\nfunction createEdgeIteratorForNode(type, direction, nodeData) {\n  let iterator = Iterator.empty();\n\n  if (type !== 'undirected') {\n    if (direction !== 'out' && typeof nodeData.in !== 'undefined')\n      iterator = chain(iterator, createIterator(nodeData.in));\n    if (direction !== 'in' && typeof nodeData.out !== 'undefined')\n      iterator = chain(\n        iterator,\n        createIterator(nodeData.out, !direction ? nodeData.key : null)\n      );\n  }\n\n  if (type !== 'directed' && typeof nodeData.undirected !== 'undefined') {\n    iterator = chain(iterator, createIterator(nodeData.undirected));\n  }\n\n  return iterator;\n}\n\n/**\n * Function creating an array of edges for the given path.\n *\n * @param  {string}   type       - Type of edges to retrieve.\n * @param  {boolean}  multi      - Whether the graph is multi.\n * @param  {string}   direction  - In or out?\n * @param  {NodeData} sourceData - Source node's data.\n * @param  {any}      target     - Target node.\n * @return {array}               - Array of edges.\n */\nfunction createEdgeArrayForPath(type, multi, direction, sourceData, target) {\n  const fn = multi ? collectForKeyMulti : collectForKeySimple;\n\n  const edges = [];\n\n  if (type !== 'undirected') {\n    if (typeof sourceData.in !== 'undefined' && direction !== 'out')\n      fn(edges, sourceData.in, target);\n\n    if (typeof sourceData.out !== 'undefined' && direction !== 'in')\n      fn(edges, sourceData.out, target);\n\n    // Handling self loop edge case\n    if (!direction && sourceData.directedSelfLoops > 0)\n      edges.splice(edges.lastIndexOf(sourceData.key), 1);\n  }\n\n  if (type !== 'directed') {\n    if (typeof sourceData.undirected !== 'undefined')\n      fn(edges, sourceData.undirected, target);\n  }\n\n  return edges;\n}\n\n/**\n * Function iterating over edges for the given path using a callback.\n *\n * @param  {string}   type       - Type of edges to retrieve.\n * @param  {boolean}  multi      - Whether the graph is multi.\n * @param  {string}   direction  - In or out?\n * @param  {NodeData} sourceData - Source node's data.\n * @param  {string}   target     - Target node.\n * @param  {function} callback   - Function to call.\n */\nfunction forEachEdgeForPath(\n  type,\n  multi,\n  direction,\n  sourceData,\n  target,\n  callback\n) {\n  const fn = multi ? forEachForKeyMulti : forEachForKeySimple;\n\n  if (type !== 'undirected') {\n    if (typeof sourceData.in !== 'undefined' && direction !== 'out')\n      fn(sourceData.in, target, callback);\n\n    if (sourceData.key !== target)\n      if (typeof sourceData.out !== 'undefined' && direction !== 'in')\n        fn(sourceData.out, target, callback);\n  }\n\n  if (type !== 'directed') {\n    if (typeof sourceData.undirected !== 'undefined')\n      fn(sourceData.undirected, target, callback);\n  }\n}\n\n/**\n * Function iterating over edges for the given path using a callback to match\n * one of them.\n *\n * @param  {string}   type       - Type of edges to retrieve.\n * @param  {boolean}  multi      - Whether the graph is multi.\n * @param  {string}   direction  - In or out?\n * @param  {NodeData} sourceData - Source node's data.\n * @param  {string}   target     - Target node.\n * @param  {function} callback   - Function to call.\n */\nfunction findEdgeForPath(type, multi, direction, sourceData, target, callback) {\n  const fn = multi ? findForKeyMulti : findForKeySimple;\n\n  let found;\n\n  if (type !== 'undirected') {\n    if (typeof sourceData.in !== 'undefined' && direction !== 'out') {\n      found = fn(sourceData.in, target, callback);\n\n      if (found) return found;\n    }\n\n    if (sourceData.key !== target)\n      if (typeof sourceData.out !== 'undefined' && direction !== 'in') {\n        found = fn(\n          sourceData.out,\n          target,\n          callback,\n          !direction ? sourceData.key : null\n        );\n\n        if (found) return found;\n      }\n  }\n\n  if (type !== 'directed') {\n    if (typeof sourceData.undirected !== 'undefined') {\n      found = fn(sourceData.undirected, target, callback);\n\n      if (found) return found;\n    }\n  }\n\n  return;\n}\n\n/**\n * Function returning an iterator over edges for the given path.\n *\n * @param  {string}   type       - Type of edges to retrieve.\n * @param  {string}   direction  - In or out?\n * @param  {NodeData} sourceData - Source node's data.\n * @param  {string}   target     - Target node.\n * @param  {function} callback   - Function to call.\n */\nfunction createEdgeIteratorForPath(type, direction, sourceData, target) {\n  let iterator = Iterator.empty();\n\n  if (type !== 'undirected') {\n    if (\n      typeof sourceData.in !== 'undefined' &&\n      direction !== 'out' &&\n      target in sourceData.in\n    )\n      iterator = chain(iterator, createIteratorForKey(sourceData.in, target));\n\n    if (\n      typeof sourceData.out !== 'undefined' &&\n      direction !== 'in' &&\n      target in sourceData.out\n    )\n      iterator = chain(iterator, createIteratorForKey(sourceData.out, target));\n  }\n\n  if (type !== 'directed') {\n    if (\n      typeof sourceData.undirected !== 'undefined' &&\n      target in sourceData.undirected\n    )\n      iterator = chain(\n        iterator,\n        createIteratorForKey(sourceData.undirected, target)\n      );\n  }\n\n  return iterator;\n}\n\n/**\n * Function attaching an edge array creator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachEdgeArrayCreator(Class, description) {\n  const {name, type, direction} = description;\n\n  /**\n   * Function returning an array of certain edges.\n   *\n   * Arity 0: Return all the relevant edges.\n   *\n   * Arity 1: Return all of a node's relevant edges.\n   * @param  {any}   node   - Target node.\n   *\n   * Arity 2: Return the relevant edges across the given path.\n   * @param  {any}   source - Source node.\n   * @param  {any}   target - Target node.\n   *\n   * @return {array|number} - The edges or the number of edges.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[name] = function (source, target) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return [];\n\n    if (!arguments.length) return createEdgeArray(this, type);\n\n    if (arguments.length === 1) {\n      source = '' + source;\n\n      const nodeData = this._nodes.get(source);\n\n      if (typeof nodeData === 'undefined')\n        throw new NotFoundGraphError(\n          `Graph.${name}: could not find the \"${source}\" node in the graph.`\n        );\n\n      // Iterating over a node's edges\n      return createEdgeArrayForNode(\n        this.multi,\n        type === 'mixed' ? this.type : type,\n        direction,\n        nodeData\n      );\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${name}:  could not find the \"${source}\" source node in the graph.`\n        );\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(\n          `Graph.${name}:  could not find the \"${target}\" target node in the graph.`\n        );\n\n      // Iterating over the edges between source & target\n      return createEdgeArrayForPath(\n        type,\n        this.multi,\n        direction,\n        sourceData,\n        target\n      );\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.${name}: too many arguments (expecting 0, 1 or 2 and got ${arguments.length}).`\n    );\n  };\n}\n\n/**\n * Function attaching a edge callback iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachForEachEdge(Class, description) {\n  const {name, type, direction} = description;\n\n  const forEachName = 'forEach' + name[0].toUpperCase() + name.slice(1, -1);\n\n  /**\n   * Function iterating over the graph's relevant edges by applying the given\n   * callback.\n   *\n   * Arity 1: Iterate over all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Iterate over all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Iterate over the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[forEachName] = function (source, target, callback) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type) return;\n\n    if (arguments.length === 1) {\n      callback = source;\n      return forEachEdge(this, type, callback);\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      callback = target;\n\n      const nodeData = this._nodes.get(source);\n\n      if (typeof nodeData === 'undefined')\n        throw new NotFoundGraphError(\n          `Graph.${forEachName}: could not find the \"${source}\" node in the graph.`\n        );\n\n      // Iterating over a node's edges\n      // TODO: maybe attach the sub method to the instance dynamically?\n      return forEachEdgeForNode(\n        this.multi,\n        type === 'mixed' ? this.type : type,\n        direction,\n        nodeData,\n        callback\n      );\n    }\n\n    if (arguments.length === 3) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${forEachName}:  could not find the \"${source}\" source node in the graph.`\n        );\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(\n          `Graph.${forEachName}:  could not find the \"${target}\" target node in the graph.`\n        );\n\n      // Iterating over the edges between source & target\n      return forEachEdgeForPath(\n        type,\n        this.multi,\n        direction,\n        sourceData,\n        target,\n        callback\n      );\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.${forEachName}: too many arguments (expecting 1, 2 or 3 and got ${arguments.length}).`\n    );\n  };\n\n  /**\n   * Function mapping the graph's relevant edges by applying the given\n   * callback.\n   *\n   * Arity 1: Map all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Map all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Map the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const mapName = 'map' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[mapName] = function () {\n    const args = Array.prototype.slice.call(arguments);\n    const callback = args.pop();\n\n    let result;\n\n    // We know the result length beforehand\n    if (args.length === 0) {\n      let length = 0;\n\n      if (type !== 'directed') length += this.undirectedSize;\n      if (type !== 'undirected') length += this.directedSize;\n\n      result = new Array(length);\n\n      let i = 0;\n\n      args.push((e, ea, s, t, sa, ta, u) => {\n        result[i++] = callback(e, ea, s, t, sa, ta, u);\n      });\n    }\n\n    // We don't know the result length beforehand\n    // TODO: we can in some instances of simple graphs, knowing degree\n    else {\n      result = [];\n\n      args.push((e, ea, s, t, sa, ta, u) => {\n        result.push(callback(e, ea, s, t, sa, ta, u));\n      });\n    }\n\n    this[forEachName].apply(this, args);\n\n    return result;\n  };\n\n  /**\n   * Function filtering the graph's relevant edges using the provided predicate\n   * function.\n   *\n   * Arity 1: Filter all the relevant edges.\n   * @param  {function} predicate - Predicate to use.\n   *\n   * Arity 2: Filter all of a node's relevant edges.\n   * @param  {any}      node      - Target node.\n   * @param  {function} predicate - Predicate to use.\n   *\n   * Arity 3: Filter the relevant edges across the given path.\n   * @param  {any}      source    - Source node.\n   * @param  {any}      target    - Target node.\n   * @param  {function} predicate - Predicate to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const filterName = 'filter' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[filterName] = function () {\n    const args = Array.prototype.slice.call(arguments);\n    const callback = args.pop();\n\n    const result = [];\n\n    args.push((e, ea, s, t, sa, ta, u) => {\n      if (callback(e, ea, s, t, sa, ta, u)) result.push(e);\n    });\n\n    this[forEachName].apply(this, args);\n\n    return result;\n  };\n\n  /**\n   * Function reducing the graph's relevant edges using the provided accumulator\n   * function.\n   *\n   * Arity 1: Reduce all the relevant edges.\n   * @param  {function} accumulator  - Accumulator to use.\n   * @param  {any}      initialValue - Initial value.\n   *\n   * Arity 2: Reduce all of a node's relevant edges.\n   * @param  {any}      node         - Target node.\n   * @param  {function} accumulator  - Accumulator to use.\n   * @param  {any}      initialValue - Initial value.\n   *\n   * Arity 3: Reduce the relevant edges across the given path.\n   * @param  {any}      source       - Source node.\n   * @param  {any}      target       - Target node.\n   * @param  {function} accumulator  - Accumulator to use.\n   * @param  {any}      initialValue - Initial value.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const reduceName = 'reduce' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[reduceName] = function () {\n    let args = Array.prototype.slice.call(arguments);\n\n    if (args.length < 2 || args.length > 4) {\n      throw new InvalidArgumentsGraphError(\n        `Graph.${reduceName}: invalid number of arguments (expecting 2, 3 or 4 and got ${args.length}).`\n      );\n    }\n\n    if (\n      typeof args[args.length - 1] === 'function' &&\n      typeof args[args.length - 2] !== 'function'\n    ) {\n      throw new InvalidArgumentsGraphError(\n        `Graph.${reduceName}: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.`\n      );\n    }\n\n    let callback;\n    let initialValue;\n\n    if (args.length === 2) {\n      callback = args[0];\n      initialValue = args[1];\n      args = [];\n    } else if (args.length === 3) {\n      callback = args[1];\n      initialValue = args[2];\n      args = [args[0]];\n    } else if (args.length === 4) {\n      callback = args[2];\n      initialValue = args[3];\n      args = [args[0], args[1]];\n    }\n\n    let accumulator = initialValue;\n\n    args.push((e, ea, s, t, sa, ta, u) => {\n      accumulator = callback(accumulator, e, ea, s, t, sa, ta, u);\n    });\n\n    this[forEachName].apply(this, args);\n\n    return accumulator;\n  };\n}\n\n/**\n * Function attaching a breakable edge callback iterator method to the Graph\n * prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachFindEdge(Class, description) {\n  const {name, type, direction} = description;\n\n  const findEdgeName = 'find' + name[0].toUpperCase() + name.slice(1, -1);\n\n  /**\n   * Function iterating over the graph's relevant edges in order to match\n   * one of them using the provided predicate function.\n   *\n   * Arity 1: Iterate over all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Iterate over all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Iterate over the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[findEdgeName] = function (source, target, callback) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return false;\n\n    if (arguments.length === 1) {\n      callback = source;\n      return findEdge(this, type, callback);\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      callback = target;\n\n      const nodeData = this._nodes.get(source);\n\n      if (typeof nodeData === 'undefined')\n        throw new NotFoundGraphError(\n          `Graph.${findEdgeName}: could not find the \"${source}\" node in the graph.`\n        );\n\n      // Iterating over a node's edges\n      // TODO: maybe attach the sub method to the instance dynamically?\n      return findEdgeForNode(\n        this.multi,\n        type === 'mixed' ? this.type : type,\n        direction,\n        nodeData,\n        callback\n      );\n    }\n\n    if (arguments.length === 3) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${findEdgeName}:  could not find the \"${source}\" source node in the graph.`\n        );\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(\n          `Graph.${findEdgeName}:  could not find the \"${target}\" target node in the graph.`\n        );\n\n      // Iterating over the edges between source & target\n      return findEdgeForPath(\n        type,\n        this.multi,\n        direction,\n        sourceData,\n        target,\n        callback\n      );\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.${findEdgeName}: too many arguments (expecting 1, 2 or 3 and got ${arguments.length}).`\n    );\n  };\n\n  /**\n   * Function iterating over the graph's relevant edges in order to assert\n   * whether any one of them matches the provided predicate function.\n   *\n   * Arity 1: Iterate over all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Iterate over all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Iterate over the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const someName = 'some' + name[0].toUpperCase() + name.slice(1, -1);\n\n  Class.prototype[someName] = function () {\n    const args = Array.prototype.slice.call(arguments);\n    const callback = args.pop();\n\n    args.push((e, ea, s, t, sa, ta, u) => {\n      return callback(e, ea, s, t, sa, ta, u);\n    });\n\n    const found = this[findEdgeName].apply(this, args);\n\n    if (found) return true;\n\n    return false;\n  };\n\n  /**\n   * Function iterating over the graph's relevant edges in order to assert\n   * whether all of them matche the provided predicate function.\n   *\n   * Arity 1: Iterate over all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Iterate over all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Iterate over the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const everyName = 'every' + name[0].toUpperCase() + name.slice(1, -1);\n\n  Class.prototype[everyName] = function () {\n    const args = Array.prototype.slice.call(arguments);\n    const callback = args.pop();\n\n    args.push((e, ea, s, t, sa, ta, u) => {\n      return !callback(e, ea, s, t, sa, ta, u);\n    });\n\n    const found = this[findEdgeName].apply(this, args);\n\n    if (found) return false;\n\n    return true;\n  };\n}\n\n/**\n * Function attaching an edge iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachEdgeIteratorCreator(Class, description) {\n  const {name: originalName, type, direction} = description;\n\n  const name = originalName.slice(0, -1) + 'Entries';\n\n  /**\n   * Function returning an iterator over the graph's edges.\n   *\n   * Arity 0: Iterate over all the relevant edges.\n   *\n   * Arity 1: Iterate over all of a node's relevant edges.\n   * @param  {any}   node   - Target node.\n   *\n   * Arity 2: Iterate over the relevant edges across the given path.\n   * @param  {any}   source - Source node.\n   * @param  {any}   target - Target node.\n   *\n   * @return {array|number} - The edges or the number of edges.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[name] = function (source, target) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return Iterator.empty();\n\n    if (!arguments.length) return createEdgeIterator(this, type);\n\n    if (arguments.length === 1) {\n      source = '' + source;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${name}: could not find the \"${source}\" node in the graph.`\n        );\n\n      // Iterating over a node's edges\n      return createEdgeIteratorForNode(type, direction, sourceData);\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${name}:  could not find the \"${source}\" source node in the graph.`\n        );\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(\n          `Graph.${name}:  could not find the \"${target}\" target node in the graph.`\n        );\n\n      // Iterating over the edges between source & target\n      return createEdgeIteratorForPath(type, direction, sourceData, target);\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.${name}: too many arguments (expecting 0, 1 or 2 and got ${arguments.length}).`\n    );\n  };\n}\n\n/**\n * Function attaching every edge iteration method to the Graph class.\n *\n * @param {function} Graph - Graph class.\n */\nexport function attachEdgeIterationMethods(Graph) {\n  EDGES_ITERATION.forEach(description => {\n    attachEdgeArrayCreator(Graph, description);\n    attachForEachEdge(Graph, description);\n    attachFindEdge(Graph, description);\n    attachEdgeIteratorCreator(Graph, description);\n  });\n}\n","/**\n * Graphology Neighbor Iteration\n * ==============================\n *\n * Attaching some methods to the Graph class to be able to iterate over\n * neighbors.\n */\nimport Iterator from 'obliterator/iterator';\nimport chain from 'obliterator/chain';\nimport take from 'obliterator/take';\n\nimport {NotFoundGraphError, InvalidArgumentsGraphError} from '../errors';\n\n/**\n * Definitions.\n */\nconst NEIGHBORS_ITERATION = [\n  {\n    name: 'neighbors',\n    type: 'mixed'\n  },\n  {\n    name: 'inNeighbors',\n    type: 'directed',\n    direction: 'in'\n  },\n  {\n    name: 'outNeighbors',\n    type: 'directed',\n    direction: 'out'\n  },\n  {\n    name: 'inboundNeighbors',\n    type: 'mixed',\n    direction: 'in'\n  },\n  {\n    name: 'outboundNeighbors',\n    type: 'mixed',\n    direction: 'out'\n  },\n  {\n    name: 'directedNeighbors',\n    type: 'directed'\n  },\n  {\n    name: 'undirectedNeighbors',\n    type: 'undirected'\n  }\n];\n\n/**\n * Function merging neighbors into the given set iterating over the given object.\n *\n * @param {BasicSet} neighbors - Neighbors set.\n * @param {object}   object    - Target object.\n */\nfunction merge(neighbors, object) {\n  if (typeof object === 'undefined') return;\n\n  for (const neighbor in object) neighbors.add(neighbor);\n}\n\n/**\n * Function creating an array of relevant neighbors for the given node.\n *\n * @param  {string}       type      - Type of neighbors.\n * @param  {string}       direction - Direction.\n * @param  {any}          nodeData  - Target node's data.\n * @return {Array}                  - The list of neighbors.\n */\nfunction createNeighborArrayForNode(type, direction, nodeData) {\n  // If we want only undirected or in or out, we can roll some optimizations\n  if (type !== 'mixed') {\n    if (type === 'undirected') return Object.keys(nodeData.undirected);\n\n    if (typeof direction === 'string') return Object.keys(nodeData[direction]);\n  }\n\n  // Else we need to keep a set of neighbors not to return duplicates\n  const neighbors = new Set();\n\n  if (type !== 'undirected') {\n    if (direction !== 'out') {\n      merge(neighbors, nodeData.in);\n    }\n    if (direction !== 'in') {\n      merge(neighbors, nodeData.out);\n    }\n  }\n\n  if (type !== 'directed') {\n    merge(neighbors, nodeData.undirected);\n  }\n\n  return take(neighbors.values(), neighbors.size);\n}\n\n/**\n * Function iterating over the given node's relevant neighbors using a\n * callback.\n *\n * @param  {string}   type      - Type of neighbors.\n * @param  {string}   direction - Direction.\n * @param  {any}      nodeData  - Target node's data.\n * @param  {function} callback  - Callback to use.\n */\nfunction forEachInObject(nodeData, object, callback) {\n  for (const k in object) {\n    let edgeData = object[k];\n\n    if (edgeData instanceof Set) edgeData = edgeData.values().next().value;\n\n    const sourceData = edgeData.source,\n      targetData = edgeData.target;\n\n    const neighborData = sourceData === nodeData ? targetData : sourceData;\n\n    callback(neighborData.key, neighborData.attributes);\n  }\n}\n\nfunction forEachInObjectOnce(visited, nodeData, object, callback) {\n  for (const k in object) {\n    let edgeData = object[k];\n\n    if (edgeData instanceof Set) edgeData = edgeData.values().next().value;\n\n    const sourceData = edgeData.source,\n      targetData = edgeData.target;\n\n    const neighborData = sourceData === nodeData ? targetData : sourceData;\n\n    if (visited.has(neighborData.key)) continue;\n\n    visited.add(neighborData.key);\n\n    callback(neighborData.key, neighborData.attributes);\n  }\n}\n\n/**\n * Function iterating over the given node's relevant neighbors to match\n * one of them using a predicated function.\n *\n * @param  {string}   type      - Type of neighbors.\n * @param  {string}   direction - Direction.\n * @param  {any}      nodeData  - Target node's data.\n * @param  {function} callback  - Callback to use.\n */\nfunction findInObject(nodeData, object, callback) {\n  for (const k in object) {\n    let edgeData = object[k];\n\n    if (edgeData instanceof Set) edgeData = edgeData.values().next().value;\n\n    const sourceData = edgeData.source;\n    const targetData = edgeData.target;\n\n    const neighborData = sourceData === nodeData ? targetData : sourceData;\n\n    const shouldBreak = callback(neighborData.key, neighborData.attributes);\n\n    if (shouldBreak) return neighborData.key;\n  }\n\n  return;\n}\n\nfunction findInObjectOnce(visited, nodeData, object, callback) {\n  for (const k in object) {\n    let edgeData = object[k];\n\n    if (edgeData instanceof Set) edgeData = edgeData.values().next().value;\n\n    const sourceData = edgeData.source;\n    const targetData = edgeData.target;\n\n    const neighborData = sourceData === nodeData ? targetData : sourceData;\n\n    if (visited.has(neighborData.key)) continue;\n\n    visited.add(neighborData.key);\n\n    const shouldBreak = callback(neighborData.key, neighborData.attributes);\n\n    if (shouldBreak) return neighborData.key;\n  }\n\n  return;\n}\n\nfunction forEachNeighborForNode(type, direction, nodeData, callback) {\n  // If we want only undirected or in or out, we can roll some optimizations\n  if (type !== 'mixed') {\n    if (type === 'undirected')\n      return forEachInObject(nodeData, nodeData.undirected, callback);\n\n    if (typeof direction === 'string')\n      return forEachInObject(nodeData, nodeData[direction], callback);\n  }\n\n  // Else we need to keep a set of neighbors not to return duplicates\n  const visited = new Set();\n\n  if (type !== 'undirected') {\n    if (direction !== 'out') {\n      forEachInObjectOnce(visited, nodeData, nodeData.in, callback);\n    }\n    if (direction !== 'in') {\n      forEachInObjectOnce(visited, nodeData, nodeData.out, callback);\n    }\n  }\n\n  if (type !== 'directed') {\n    forEachInObjectOnce(visited, nodeData, nodeData.undirected, callback);\n  }\n}\n\nfunction findNeighbor(type, direction, nodeData, callback) {\n  // If we want only undirected or in or out, we can roll some optimizations\n  if (type !== 'mixed') {\n    if (type === 'undirected')\n      return findInObject(nodeData, nodeData.undirected, callback);\n\n    if (typeof direction === 'string')\n      return findInObject(nodeData, nodeData[direction], callback);\n  }\n\n  // Else we need to keep a set of neighbors not to return duplicates\n  const visited = new Set();\n\n  let found;\n\n  if (type !== 'undirected') {\n    if (direction !== 'out') {\n      found = findInObjectOnce(visited, nodeData, nodeData.in, callback);\n\n      if (found) return found;\n    }\n    if (direction !== 'in') {\n      found = findInObjectOnce(visited, nodeData, nodeData.out, callback);\n\n      if (found) return found;\n    }\n  }\n\n  if (type !== 'directed') {\n    found = findInObjectOnce(visited, nodeData, nodeData.undirected, callback);\n\n    if (found) return found;\n  }\n\n  return;\n}\n\n/**\n * Function returning an iterator over the given node's relevant neighbors.\n *\n * @param  {string}   type      - Type of neighbors.\n * @param  {string}   direction - Direction.\n * @param  {any}      nodeData  - Target node's data.\n * @return {Iterator}\n */\nfunction createObjectIterator(nodeData, object) {\n  const keys = Object.keys(object),\n    l = keys.length;\n\n  let i = 0;\n\n  return new Iterator(function () {\n    if (i >= l) return {done: true};\n\n    let edgeData = object[keys[i++]];\n\n    if (edgeData instanceof Set) edgeData = edgeData.values().next().value;\n\n    const sourceData = edgeData.source,\n      targetData = edgeData.target;\n\n    const neighborData = sourceData === nodeData ? targetData : sourceData;\n\n    return {\n      done: false,\n      value: {neighbor: neighborData.key, attributes: neighborData.attributes}\n    };\n  });\n}\n\nfunction createDedupedObjectIterator(visited, nodeData, object) {\n  const keys = Object.keys(object),\n    l = keys.length;\n\n  let i = 0;\n\n  return new Iterator(function next() {\n    if (i >= l) return {done: true};\n\n    let edgeData = object[keys[i++]];\n\n    if (edgeData instanceof Set) edgeData = edgeData.values().next().value;\n\n    const sourceData = edgeData.source,\n      targetData = edgeData.target;\n\n    const neighborData = sourceData === nodeData ? targetData : sourceData;\n\n    if (visited.has(neighborData.key)) return next();\n\n    visited.add(neighborData.key);\n\n    return {\n      done: false,\n      value: {neighbor: neighborData.key, attributes: neighborData.attributes}\n    };\n  });\n}\n\nfunction createNeighborIterator(type, direction, nodeData) {\n  // If we want only undirected or in or out, we can roll some optimizations\n  if (type !== 'mixed') {\n    if (type === 'undirected')\n      return createObjectIterator(nodeData, nodeData.undirected);\n\n    if (typeof direction === 'string')\n      return createObjectIterator(nodeData, nodeData[direction]);\n  }\n\n  let iterator = Iterator.empty();\n\n  // Else we need to keep a set of neighbors not to return duplicates\n  const visited = new Set();\n\n  if (type !== 'undirected') {\n    if (direction !== 'out') {\n      iterator = chain(\n        iterator,\n        createDedupedObjectIterator(visited, nodeData, nodeData.in)\n      );\n    }\n    if (direction !== 'in') {\n      iterator = chain(\n        iterator,\n        createDedupedObjectIterator(visited, nodeData, nodeData.out)\n      );\n    }\n  }\n\n  if (type !== 'directed') {\n    iterator = chain(\n      iterator,\n      createDedupedObjectIterator(visited, nodeData, nodeData.undirected)\n    );\n  }\n\n  return iterator;\n}\n\n/**\n * Function attaching a neighbors array creator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachNeighborArrayCreator(Class, description) {\n  const {name, type, direction} = description;\n\n  /**\n   * Function returning an array of certain neighbors.\n   *\n   * @param  {any}   node   - Target node.\n   * @return {array} - The neighbors of neighbors.\n   *\n   * @throws {Error} - Will throw if node is not found in the graph.\n   */\n  Class.prototype[name] = function (node) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return [];\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (typeof nodeData === 'undefined')\n      throw new NotFoundGraphError(\n        `Graph.${name}: could not find the \"${node}\" node in the graph.`\n      );\n\n    // Here, we want to iterate over a node's relevant neighbors\n    return createNeighborArrayForNode(\n      type === 'mixed' ? this.type : type,\n      direction,\n      nodeData\n    );\n  };\n}\n\n/**\n * Function attaching a neighbors callback iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachForEachNeighbor(Class, description) {\n  const {name, type, direction} = description;\n\n  const forEachName = 'forEach' + name[0].toUpperCase() + name.slice(1, -1);\n\n  /**\n   * Function iterating over all the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[forEachName] = function (node, callback) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type) return;\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (typeof nodeData === 'undefined')\n      throw new NotFoundGraphError(\n        `Graph.${forEachName}: could not find the \"${node}\" node in the graph.`\n      );\n\n    // Here, we want to iterate over a node's relevant neighbors\n    forEachNeighborForNode(\n      type === 'mixed' ? this.type : type,\n      direction,\n      nodeData,\n      callback\n    );\n  };\n\n  /**\n   * Function mapping the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const mapName = 'map' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[mapName] = function (node, callback) {\n    // TODO: optimize when size is known beforehand\n    const result = [];\n\n    this[forEachName](node, (n, a) => {\n      result.push(callback(n, a));\n    });\n\n    return result;\n  };\n\n  /**\n   * Function filtering the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const filterName = 'filter' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[filterName] = function (node, callback) {\n    const result = [];\n\n    this[forEachName](node, (n, a) => {\n      if (callback(n, a)) result.push(n);\n    });\n\n    return result;\n  };\n\n  /**\n   * Function reducing the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const reduceName = 'reduce' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[reduceName] = function (node, callback, initialValue) {\n    if (arguments.length < 3)\n      throw new InvalidArgumentsGraphError(\n        `Graph.${reduceName}: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.`\n      );\n\n    let accumulator = initialValue;\n\n    this[forEachName](node, (n, a) => {\n      accumulator = callback(accumulator, n, a);\n    });\n\n    return accumulator;\n  };\n}\n\n/**\n * Function attaching a breakable neighbors callback iterator method to the\n * Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachFindNeighbor(Class, description) {\n  const {name, type, direction} = description;\n\n  const capitalizedSingular = name[0].toUpperCase() + name.slice(1, -1);\n\n  const findName = 'find' + capitalizedSingular;\n\n  /**\n   * Function iterating over all the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[findName] = function (node, callback) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type) return;\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (typeof nodeData === 'undefined')\n      throw new NotFoundGraphError(\n        `Graph.${findName}: could not find the \"${node}\" node in the graph.`\n      );\n\n    // Here, we want to iterate over a node's relevant neighbors\n    return findNeighbor(\n      type === 'mixed' ? this.type : type,\n      direction,\n      nodeData,\n      callback\n    );\n  };\n\n  /**\n   * Function iterating over all the relevant neighbors to find if any of them\n   * matches the given predicate.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const someName = 'some' + capitalizedSingular;\n\n  Class.prototype[someName] = function (node, callback) {\n    const found = this[findName](node, callback);\n\n    if (found) return true;\n\n    return false;\n  };\n\n  /**\n   * Function iterating over all the relevant neighbors to find if all of them\n   * matche the given predicate.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const everyName = 'every' + capitalizedSingular;\n\n  Class.prototype[everyName] = function (node, callback) {\n    const found = this[findName](node, (n, a) => {\n      return !callback(n, a);\n    });\n\n    if (found) return false;\n\n    return true;\n  };\n}\n\n/**\n * Function attaching a neighbors callback iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachNeighborIteratorCreator(Class, description) {\n  const {name, type, direction} = description;\n\n  const iteratorName = name.slice(0, -1) + 'Entries';\n\n  /**\n   * Function returning an iterator over all the relevant neighbors.\n   *\n   * @param  {any}      node     - Target node.\n   * @return {Iterator}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[iteratorName] = function (node) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return Iterator.empty();\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (typeof nodeData === 'undefined')\n      throw new NotFoundGraphError(\n        `Graph.${iteratorName}: could not find the \"${node}\" node in the graph.`\n      );\n\n    // Here, we want to iterate over a node's relevant neighbors\n    return createNeighborIterator(\n      type === 'mixed' ? this.type : type,\n      direction,\n      nodeData\n    );\n  };\n}\n\n/**\n * Function attaching every neighbor iteration method to the Graph class.\n *\n * @param {function} Graph - Graph class.\n */\nexport function attachNeighborIterationMethods(Graph) {\n  NEIGHBORS_ITERATION.forEach(description => {\n    attachNeighborArrayCreator(Graph, description);\n    attachForEachNeighbor(Graph, description);\n    attachFindNeighbor(Graph, description);\n    attachNeighborIteratorCreator(Graph, description);\n  });\n}\n","/**\n * Graphology Adjacency Iteration\n * ================================\n *\n * Attaching some methods to the Graph class to be able to iterate over a\n * graph's adjacency.\n */\nimport Iterator from 'obliterator/iterator';\n\n/**\n * Function iterating over a simple graph's adjacency using a callback.\n *\n * @param {boolean}  breakable - Can we break?\n * @param {Graph}    graph     - Target Graph instance.\n * @param {callback} function  - Iteration callback.\n */\nexport function forEachAdjacencySimple(breakable, graph, callback) {\n  const iterator = graph._nodes.values();\n\n  const type = graph.type;\n\n  let step, sourceData, neighbor, adj, edgeData, targetData, shouldBreak;\n\n  while (((step = iterator.next()), step.done !== true)) {\n    sourceData = step.value;\n\n    if (type !== 'undirected') {\n      adj = sourceData.out;\n\n      for (neighbor in adj) {\n        edgeData = adj[neighbor];\n        targetData = edgeData.target;\n\n        shouldBreak = callback(\n          sourceData.key,\n          targetData.key,\n          sourceData.attributes,\n          targetData.attributes,\n          edgeData.key,\n          edgeData.attributes,\n          edgeData.undirected\n        );\n\n        if (breakable && shouldBreak) return edgeData.key;\n      }\n    }\n\n    if (type !== 'directed') {\n      adj = sourceData.undirected;\n\n      for (neighbor in adj) {\n        edgeData = adj[neighbor];\n        targetData = edgeData.target;\n\n        if (targetData.key !== neighbor) targetData = edgeData.source;\n\n        shouldBreak = callback(\n          sourceData.key,\n          targetData.key,\n          sourceData.attributes,\n          targetData.attributes,\n          edgeData.key,\n          edgeData.attributes,\n          edgeData.undirected\n        );\n\n        if (breakable && shouldBreak) return edgeData.key;\n      }\n    }\n  }\n\n  return;\n}\n\n/**\n * Function iterating over a multi graph's adjacency using a callback.\n *\n * @param {boolean}  breakable - Can we break?\n * @param {Graph}    graph    - Target Graph instance.\n * @param {callback} function - Iteration callback.\n */\nexport function forEachAdjacencyMulti(breakable, graph, callback) {\n  const iterator = graph._nodes.values();\n\n  const type = graph.type;\n\n  let step,\n    sourceData,\n    neighbor,\n    container,\n    containerStep,\n    adj,\n    edgeData,\n    targetData,\n    shouldBreak;\n\n  while (((step = iterator.next()), step.done !== true)) {\n    sourceData = step.value;\n\n    if (type !== 'undirected') {\n      adj = sourceData.out;\n\n      for (neighbor in adj) {\n        container = adj[neighbor].values();\n\n        while (\n          ((containerStep = container.next()), containerStep.done !== true)\n        ) {\n          edgeData = containerStep.value;\n          targetData = edgeData.target;\n\n          shouldBreak = callback(\n            sourceData.key,\n            targetData.key,\n            sourceData.attributes,\n            targetData.attributes,\n            edgeData.key,\n            edgeData.attributes,\n            edgeData.undirected\n          );\n\n          if (breakable && shouldBreak) return edgeData.key;\n        }\n      }\n    }\n\n    if (type !== 'directed') {\n      adj = sourceData.undirected;\n\n      for (neighbor in adj) {\n        container = adj[neighbor].values();\n\n        while (\n          ((containerStep = container.next()), containerStep.done !== true)\n        ) {\n          edgeData = containerStep.value;\n          targetData = edgeData.target;\n\n          if (targetData.key !== neighbor) targetData = edgeData.source;\n\n          shouldBreak = callback(\n            sourceData.key,\n            targetData.key,\n            sourceData.attributes,\n            targetData.attributes,\n            edgeData.key,\n            edgeData.attributes,\n            edgeData.undirected\n          );\n\n          if (breakable && shouldBreak) return edgeData.key;\n        }\n      }\n    }\n  }\n\n  return;\n}\n\nexport function createAdjacencyIteratorSimple(graph) {\n  const iterator = graph._nodes.values();\n\n  const type = graph.type;\n\n  let state = 'outer',\n    sourceData,\n    neighbors,\n    adj,\n    offset;\n\n  return new Iterator(function next() {\n    let step;\n\n    if (state === 'outer') {\n      step = iterator.next();\n\n      if (step.done === true) return step;\n\n      sourceData = step.value;\n\n      state = 'directed';\n      return next();\n    }\n\n    if (state === 'directed') {\n      if (type === 'undirected') {\n        state = 'undirected';\n        return next();\n      }\n\n      adj = sourceData.out;\n      neighbors = Object.keys(sourceData.out);\n      offset = 0;\n      state = 'inner-directed';\n\n      return next();\n    }\n\n    if (state === 'undirected') {\n      if (type === 'directed') {\n        state = 'outer';\n        return next();\n      }\n\n      adj = sourceData.undirected;\n      neighbors = Object.keys(sourceData.undirected);\n      offset = 0;\n      state = 'inner-undirected';\n    }\n\n    // Inner\n    if (offset >= neighbors.length) {\n      if (state === 'inner-undirected') state = 'outer';\n      else state = 'undirected';\n\n      return next();\n    }\n\n    const neighbor = neighbors[offset++];\n    const edgeData = adj[neighbor];\n    let targetData = edgeData.target;\n\n    if (state === 'inner-undirected' && targetData.key === sourceData.key)\n      targetData = edgeData.source;\n\n    return {\n      done: false,\n      value: {\n        source: sourceData.key,\n        target: targetData.key,\n        sourceAttributes: sourceData.attributes,\n        targetAttributes: targetData.attributes,\n        edgeKey: edgeData.key,\n        edgeAttributes: edgeData.attributes,\n        undirected: edgeData.undirected\n      }\n    };\n  });\n}\n\nexport function createAdjacencyIteratorMulti(graph) {\n  const iterator = graph._nodes.values();\n\n  const type = graph.type;\n\n  let state = 'outer',\n    sourceData,\n    neighbors,\n    container = null,\n    adj,\n    offset;\n\n  return new Iterator(function next() {\n    let step;\n\n    if (state === 'outer') {\n      step = iterator.next();\n\n      if (step.done === true) return step;\n\n      sourceData = step.value;\n\n      state = 'directed';\n      return next();\n    }\n\n    if (state === 'directed') {\n      if (type === 'undirected') {\n        state = 'undirected';\n        return next();\n      }\n\n      adj = sourceData.out;\n      neighbors = Object.keys(sourceData.out);\n      offset = 0;\n      state = 'inner-directed';\n\n      return next();\n    }\n\n    if (state === 'undirected') {\n      if (type === 'directed') {\n        state = 'outer';\n        return next();\n      }\n\n      adj = sourceData.undirected;\n      neighbors = Object.keys(sourceData.undirected);\n      offset = 0;\n      state = 'inner-undirected';\n    }\n\n    // Inner\n    if (!container && offset >= neighbors.length) {\n      if (state === 'inner-undirected') state = 'outer';\n      else state = 'undirected';\n\n      return next();\n    }\n\n    if (!container) {\n      const neighbor = neighbors[offset++];\n      container = adj[neighbor].values();\n      return next();\n    }\n\n    step = container.next();\n\n    if (step.done) {\n      container = null;\n      return next();\n    }\n\n    const edgeData = step.value;\n    let targetData = edgeData.target;\n\n    if (state === 'inner-undirected' && targetData.key === sourceData.key)\n      targetData = edgeData.source;\n\n    return {\n      done: false,\n      value: {\n        source: sourceData.key,\n        target: targetData.key,\n        sourceAttributes: sourceData.attributes,\n        targetAttributes: targetData.attributes,\n        edge: edgeData.key,\n        edgeAttributes: edgeData.attributes,\n        undirected: edgeData.undirected\n      }\n    };\n  });\n}\n","/**\n * Graphology Serialization Utilities\n * ===================================\n *\n * Collection of functions used to validate import-export formats & to ouput\n * them from internal graph data.\n *\n * Serialized Node:\n * {key, ?attributes}\n *\n * Serialized Edge:\n * {key?, source, target, attributes?, undirected?}\n *\n * Serialized Graph:\n * {nodes[], edges?[]}\n */\nimport {assign, isPlainObject, isEmpty} from './utils';\n\n/**\n * Formats internal node data into a serialized node.\n *\n * @param  {any}    key  - The node's key.\n * @param  {object} data - Internal node's data.\n * @return {array}       - The serialized node.\n */\nexport function serializeNode(key, data) {\n  const serialized = {key};\n\n  if (!isEmpty(data.attributes))\n    serialized.attributes = assign({}, data.attributes);\n\n  return serialized;\n}\n\n/**\n * Formats internal edge data into a serialized edge.\n *\n * @param  {any}    key  - The edge's key.\n * @param  {object} data - Internal edge's data.\n * @return {array}       - The serialized edge.\n */\nexport function serializeEdge(key, data) {\n  const serialized = {\n    key,\n    source: data.source.key,\n    target: data.target.key\n  };\n\n  if (!isEmpty(data.attributes))\n    serialized.attributes = assign({}, data.attributes);\n\n  if (data.undirected) serialized.undirected = true;\n\n  return serialized;\n}\n\n/**\n * Checks whether the given value is a serialized node.\n *\n * @param  {mixed} value - Target value.\n * @return {string|null}\n */\nexport function validateSerializedNode(value) {\n  if (!isPlainObject(value)) return 'not-object';\n\n  if (!('key' in value)) return 'no-key';\n\n  if (\n    'attributes' in value &&\n    (!isPlainObject(value.attributes) || value.attributes === null)\n  )\n    return 'invalid-attributes';\n\n  return null;\n}\n\n/**\n * Checks whether the given value is a serialized edge.\n *\n * @param  {mixed} value - Target value.\n * @return {string|null}\n */\nexport function validateSerializedEdge(value) {\n  if (!isPlainObject(value)) return 'not-object';\n\n  if (!('source' in value)) return 'no-source';\n\n  if (!('target' in value)) return 'no-target';\n\n  if (\n    'attributes' in value &&\n    (!isPlainObject(value.attributes) || value.attributes === null)\n  )\n    return 'invalid-attributes';\n\n  if ('undirected' in value && typeof value.undirected !== 'boolean')\n    return 'invalid-undirected';\n\n  return null;\n}\n","/* eslint no-nested-ternary: 0 */\n/**\n * Graphology Reference Implementation\n * ====================================\n *\n * Reference implementation of the graphology specs.\n */\nimport {EventEmitter} from 'events';\nimport Iterator from 'obliterator/iterator';\nimport take from 'obliterator/take';\n\nimport {\n  InvalidArgumentsGraphError,\n  NotFoundGraphError,\n  UsageGraphError\n} from './errors';\n\nimport {\n  MixedNodeData,\n  DirectedNodeData,\n  UndirectedNodeData,\n  EdgeData\n} from './data';\n\nimport {\n  updateStructureIndex,\n  clearEdgeFromStructureIndex,\n  clearStructureIndex,\n  upgradeStructureIndexToMulti\n} from './indices';\n\nimport {attachAttributesMethods} from './attributes';\nimport {attachEdgeIterationMethods} from './iteration/edges';\nimport {attachNeighborIterationMethods} from './iteration/neighbors';\nimport {\n  forEachAdjacencySimple,\n  forEachAdjacencyMulti,\n  createAdjacencyIteratorSimple,\n  createAdjacencyIteratorMulti\n} from './iteration/adjacency';\n\nimport {\n  serializeNode,\n  serializeEdge,\n  validateSerializedNode,\n  validateSerializedEdge\n} from './serialization';\n\nimport {\n  assign,\n  getMatchingEdge,\n  isGraph,\n  isPlainObject,\n  privateProperty,\n  readOnlyProperty,\n  incrementalIdStartingFromRandomByte,\n  validateHints\n} from './utils';\n\n/**\n * Constants.\n */\nconst INSTANCE_ID = incrementalIdStartingFromRandomByte();\n\n/**\n * Enums.\n */\nconst TYPES = new Set(['directed', 'undirected', 'mixed']);\n\nconst EMITTER_PROPS = new Set([\n  'domain',\n  '_events',\n  '_eventsCount',\n  '_maxListeners'\n]);\n\nconst EDGE_ADD_METHODS = [\n  {\n    name: verb => `${verb}Edge`,\n    generateKey: true\n  },\n  {\n    name: verb => `${verb}DirectedEdge`,\n    generateKey: true,\n    type: 'directed'\n  },\n  {\n    name: verb => `${verb}UndirectedEdge`,\n    generateKey: true,\n    type: 'undirected'\n  },\n  {\n    name: verb => `${verb}EdgeWithKey`\n  },\n  {\n    name: verb => `${verb}DirectedEdgeWithKey`,\n    type: 'directed'\n  },\n  {\n    name: verb => `${verb}UndirectedEdgeWithKey`,\n    type: 'undirected'\n  }\n];\n\n/**\n * Default options.\n */\nconst DEFAULTS = {\n  allowSelfLoops: true,\n  multi: false,\n  type: 'mixed'\n};\n\n/**\n * Abstract functions used by the Graph class for various methods.\n */\n\n/**\n * Internal method used to add a node to the given graph\n *\n * @param  {Graph}   graph           - Target graph.\n * @param  {any}     node            - The node's key.\n * @param  {object}  [attributes]    - Optional attributes.\n * @return {NodeData}                - Created node data.\n */\nfunction addNode(graph, node, attributes) {\n  if (attributes && !isPlainObject(attributes))\n    throw new InvalidArgumentsGraphError(\n      `Graph.addNode: invalid attributes. Expecting an object but got \"${attributes}\"`\n    );\n\n  // String coercion\n  node = '' + node;\n  attributes = attributes || {};\n\n  if (graph._nodes.has(node))\n    throw new UsageGraphError(\n      `Graph.addNode: the \"${node}\" node already exist in the graph.`\n    );\n\n  const data = new graph.NodeDataClass(node, attributes);\n\n  // Adding the node to internal register\n  graph._nodes.set(node, data);\n\n  // Emitting\n  graph.emit('nodeAdded', {\n    key: node,\n    attributes\n  });\n\n  return data;\n}\n\n/**\n * Same as the above but without sanity checks because we call this in contexts\n * where necessary checks were already done.\n */\nfunction unsafeAddNode(graph, node, attributes) {\n  const data = new graph.NodeDataClass(node, attributes);\n\n  graph._nodes.set(node, data);\n\n  graph.emit('nodeAdded', {\n    key: node,\n    attributes\n  });\n\n  return data;\n}\n\n/**\n * Internal method used to add an arbitrary edge to the given graph.\n *\n * @param  {Graph}   graph           - Target graph.\n * @param  {string}  name            - Name of the child method for errors.\n * @param  {boolean} mustGenerateKey - Should the graph generate an id?\n * @param  {boolean} undirected      - Whether the edge is undirected.\n * @param  {any}     edge            - The edge's key.\n * @param  {any}     source          - The source node.\n * @param  {any}     target          - The target node.\n * @param  {object}  [attributes]    - Optional attributes.\n * @return {any}                     - The edge.\n *\n * @throws {Error} - Will throw if the graph is of the wrong type.\n * @throws {Error} - Will throw if the given attributes are not an object.\n * @throws {Error} - Will throw if source or target doesn't exist.\n * @throws {Error} - Will throw if the edge already exist.\n */\nfunction addEdge(\n  graph,\n  name,\n  mustGenerateKey,\n  undirected,\n  edge,\n  source,\n  target,\n  attributes\n) {\n  // Checking validity of operation\n  if (!undirected && graph.type === 'undirected')\n    throw new UsageGraphError(\n      `Graph.${name}: you cannot add a directed edge to an undirected graph. Use the #.addEdge or #.addUndirectedEdge instead.`\n    );\n\n  if (undirected && graph.type === 'directed')\n    throw new UsageGraphError(\n      `Graph.${name}: you cannot add an undirected edge to a directed graph. Use the #.addEdge or #.addDirectedEdge instead.`\n    );\n\n  if (attributes && !isPlainObject(attributes))\n    throw new InvalidArgumentsGraphError(\n      `Graph.${name}: invalid attributes. Expecting an object but got \"${attributes}\"`\n    );\n\n  // Coercion of source & target:\n  source = '' + source;\n  target = '' + target;\n  attributes = attributes || {};\n\n  if (!graph.allowSelfLoops && source === target)\n    throw new UsageGraphError(\n      `Graph.${name}: source & target are the same (\"${source}\"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false.`\n    );\n\n  const sourceData = graph._nodes.get(source),\n    targetData = graph._nodes.get(target);\n\n  if (!sourceData)\n    throw new NotFoundGraphError(\n      `Graph.${name}: source node \"${source}\" not found.`\n    );\n\n  if (!targetData)\n    throw new NotFoundGraphError(\n      `Graph.${name}: target node \"${target}\" not found.`\n    );\n\n  // Must the graph generate an id for this edge?\n  const eventData = {\n    key: null,\n    undirected,\n    source,\n    target,\n    attributes\n  };\n\n  if (mustGenerateKey) {\n    // NOTE: in this case we can guarantee that the key does not already\n    // exist and is already correctly casted as a string\n    edge = graph._edgeKeyGenerator();\n  } else {\n    // Coercion of edge key\n    edge = '' + edge;\n\n    // Here, we have a key collision\n    if (graph._edges.has(edge))\n      throw new UsageGraphError(\n        `Graph.${name}: the \"${edge}\" edge already exists in the graph.`\n      );\n  }\n\n  // Here, we might have a source / target collision\n  if (\n    !graph.multi &&\n    (undirected\n      ? typeof sourceData.undirected[target] !== 'undefined'\n      : typeof sourceData.out[target] !== 'undefined')\n  ) {\n    throw new UsageGraphError(\n      `Graph.${name}: an edge linking \"${source}\" to \"${target}\" already exists. If you really want to add multiple edges linking those nodes, you should create a multi graph by using the 'multi' option.`\n    );\n  }\n\n  // Storing some data\n  const edgeData = new EdgeData(\n    undirected,\n    edge,\n    sourceData,\n    targetData,\n    attributes\n  );\n\n  // Adding the edge to the internal register\n  graph._edges.set(edge, edgeData);\n\n  // Incrementing node degree counters\n  if (source === target) {\n    if (undirected) {\n      sourceData.undirectedSelfLoops++;\n      graph._undirectedSelfLoopCount++;\n    } else {\n      sourceData.directedSelfLoops++;\n      graph._directedSelfLoopCount++;\n    }\n  } else {\n    if (undirected) {\n      sourceData.undirectedDegree++;\n      targetData.undirectedDegree++;\n    } else {\n      sourceData.outDegree++;\n      targetData.inDegree++;\n    }\n  }\n\n  // Updating relevant index\n  updateStructureIndex(\n    graph,\n    undirected,\n    edgeData,\n    source,\n    target,\n    sourceData,\n    targetData\n  );\n\n  if (undirected) graph._undirectedSize++;\n  else graph._directedSize++;\n\n  // Emitting\n  eventData.key = edge;\n\n  graph.emit('edgeAdded', eventData);\n\n  return edge;\n}\n\n/**\n * Internal method used to add an arbitrary edge to the given graph.\n *\n * @param  {Graph}   graph           - Target graph.\n * @param  {string}  name            - Name of the child method for errors.\n * @param  {boolean} mustGenerateKey - Should the graph generate an id?\n * @param  {boolean} undirected      - Whether the edge is undirected.\n * @param  {any}     edge            - The edge's key.\n * @param  {any}     source          - The source node.\n * @param  {any}     target          - The target node.\n * @param  {object}  [attributes]    - Optional attributes.\n * @param  {boolean} [asUpdater]       - Are we updating or merging?\n * @return {any}                     - The edge.\n *\n * @throws {Error} - Will throw if the graph is of the wrong type.\n * @throws {Error} - Will throw if the given attributes are not an object.\n * @throws {Error} - Will throw if source or target doesn't exist.\n * @throws {Error} - Will throw if the edge already exist.\n */\nfunction mergeEdge(\n  graph,\n  name,\n  mustGenerateKey,\n  undirected,\n  edge,\n  source,\n  target,\n  attributes,\n  asUpdater\n) {\n  // Checking validity of operation\n  if (!undirected && graph.type === 'undirected')\n    throw new UsageGraphError(\n      `Graph.${name}: you cannot merge/update a directed edge to an undirected graph. Use the #.mergeEdge/#.updateEdge or #.addUndirectedEdge instead.`\n    );\n\n  if (undirected && graph.type === 'directed')\n    throw new UsageGraphError(\n      `Graph.${name}: you cannot merge/update an undirected edge to a directed graph. Use the #.mergeEdge/#.updateEdge or #.addDirectedEdge instead.`\n    );\n\n  if (attributes) {\n    if (asUpdater) {\n      if (typeof attributes !== 'function')\n        throw new InvalidArgumentsGraphError(\n          `Graph.${name}: invalid updater function. Expecting a function but got \"${attributes}\"`\n        );\n    } else {\n      if (!isPlainObject(attributes))\n        throw new InvalidArgumentsGraphError(\n          `Graph.${name}: invalid attributes. Expecting an object but got \"${attributes}\"`\n        );\n    }\n  }\n\n  // Coercion of source & target:\n  source = '' + source;\n  target = '' + target;\n\n  let updater;\n\n  if (asUpdater) {\n    updater = attributes;\n    attributes = undefined;\n  }\n\n  if (!graph.allowSelfLoops && source === target)\n    throw new UsageGraphError(\n      `Graph.${name}: source & target are the same (\"${source}\"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false.`\n    );\n\n  let sourceData = graph._nodes.get(source),\n    targetData = graph._nodes.get(target),\n    edgeData;\n\n  // Do we need to handle duplicate?\n  let alreadyExistingEdgeData;\n\n  if (!mustGenerateKey) {\n    edgeData = graph._edges.get(edge);\n\n    if (edgeData) {\n      // Here, we need to ensure, if the user gave a key, that source & target\n      // are coherent\n      if (\n        edgeData.source.key !== source ||\n        edgeData.target.key !== target ||\n        (undirected &&\n          (edgeData.source.key !== target || edgeData.target.key !== source))\n      ) {\n        throw new UsageGraphError(\n          `Graph.${name}: inconsistency detected when attempting to merge the \"${edge}\" edge with \"${source}\" source & \"${target}\" target vs. (\"${edgeData.source.key}\", \"${edgeData.target.key}\").`\n        );\n      }\n\n      alreadyExistingEdgeData = edgeData;\n    }\n  }\n\n  // Here, we might have a source / target collision\n  if (!alreadyExistingEdgeData && !graph.multi && sourceData) {\n    alreadyExistingEdgeData = undirected\n      ? sourceData.undirected[target]\n      : sourceData.out[target];\n  }\n\n  // Handling duplicates\n  if (alreadyExistingEdgeData) {\n    // We can skip the attribute merging part if the user did not provide them\n    if (asUpdater ? !updater : !attributes) return alreadyExistingEdgeData.key;\n\n    // Updating the attributes\n    if (asUpdater) {\n      const oldAttributes = alreadyExistingEdgeData.attributes;\n      alreadyExistingEdgeData.attributes = updater(oldAttributes);\n\n      graph.emit('edgeAttributesUpdated', {\n        type: 'replace',\n        key: alreadyExistingEdgeData.key,\n        attributes: alreadyExistingEdgeData.attributes\n      });\n    }\n\n    // Merging the attributes\n    else {\n      assign(alreadyExistingEdgeData.attributes, attributes);\n\n      graph.emit('edgeAttributesUpdated', {\n        type: 'merge',\n        key: alreadyExistingEdgeData.key,\n        attributes: alreadyExistingEdgeData.attributes,\n        data: attributes\n      });\n    }\n\n    return alreadyExistingEdgeData.key;\n  }\n\n  attributes = attributes || {};\n\n  if (asUpdater && updater) attributes = updater(attributes);\n\n  // Must the graph generate an id for this edge?\n  const eventData = {\n    key: null,\n    undirected,\n    source,\n    target,\n    attributes\n  };\n\n  if (mustGenerateKey) {\n    // NOTE: in this case we can guarantee that the key does not already\n    // exist and is already correctly casted as a string\n    edge = graph._edgeKeyGenerator();\n  } else {\n    // Coercion of edge key\n    edge = '' + edge;\n\n    // Here, we have a key collision\n    if (graph._edges.has(edge))\n      throw new UsageGraphError(\n        `Graph.${name}: the \"${edge}\" edge already exists in the graph.`\n      );\n  }\n\n  if (!sourceData) {\n    sourceData = unsafeAddNode(graph, source, {});\n\n    if (source === target) targetData = sourceData;\n  }\n  if (!targetData) {\n    targetData = unsafeAddNode(graph, target, {});\n  }\n\n  // Storing some data\n  edgeData = new EdgeData(undirected, edge, sourceData, targetData, attributes);\n\n  // Adding the edge to the internal register\n  graph._edges.set(edge, edgeData);\n\n  // Incrementing node degree counters\n  if (source === target) {\n    if (undirected) {\n      sourceData.undirectedSelfLoops++;\n      graph._undirectedSelfLoopCount++;\n    } else {\n      sourceData.directedSelfLoops++;\n      graph._directedSelfLoopCount++;\n    }\n  } else {\n    if (undirected) {\n      sourceData.undirectedDegree++;\n      targetData.undirectedDegree++;\n    } else {\n      sourceData.outDegree++;\n      targetData.inDegree++;\n    }\n  }\n\n  // Updating relevant index\n  updateStructureIndex(\n    graph,\n    undirected,\n    edgeData,\n    source,\n    target,\n    sourceData,\n    targetData\n  );\n\n  if (undirected) graph._undirectedSize++;\n  else graph._directedSize++;\n\n  // Emitting\n  eventData.key = edge;\n\n  graph.emit('edgeAdded', eventData);\n\n  return edge;\n}\n\n/**\n * Graph class\n *\n * @constructor\n * @param  {object}  [options] - Options:\n * @param  {boolean}   [allowSelfLoops] - Allow self loops?\n * @param  {string}    [type]           - Type of the graph.\n * @param  {boolean}   [map]            - Allow references as keys?\n * @param  {boolean}   [multi]          - Allow parallel edges?\n *\n * @throws {Error} - Will throw if the arguments are not valid.\n */\nexport default class Graph extends EventEmitter {\n  constructor(options) {\n    super();\n\n    //-- Solving options\n    options = assign({}, DEFAULTS, options);\n\n    // Enforcing options validity\n    if (typeof options.multi !== 'boolean')\n      throw new InvalidArgumentsGraphError(\n        `Graph.constructor: invalid 'multi' option. Expecting a boolean but got \"${options.multi}\".`\n      );\n\n    if (!TYPES.has(options.type))\n      throw new InvalidArgumentsGraphError(\n        `Graph.constructor: invalid 'type' option. Should be one of \"mixed\", \"directed\" or \"undirected\" but got \"${options.type}\".`\n      );\n\n    if (typeof options.allowSelfLoops !== 'boolean')\n      throw new InvalidArgumentsGraphError(\n        `Graph.constructor: invalid 'allowSelfLoops' option. Expecting a boolean but got \"${options.allowSelfLoops}\".`\n      );\n\n    //-- Private properties\n\n    // Utilities\n    const NodeDataClass =\n      options.type === 'mixed'\n        ? MixedNodeData\n        : options.type === 'directed'\n        ? DirectedNodeData\n        : UndirectedNodeData;\n\n    privateProperty(this, 'NodeDataClass', NodeDataClass);\n\n    // Internal edge key generator\n\n    // NOTE: this internal generator produce keys that are strings\n    // composed of a weird prefix, an incremental instance id starting from\n    // a random byte and finally an internal instance incremental id.\n    // All this to avoid intra-frame and cross-frame adversarial inputs\n    // that can force a single #.addEdge call to degenerate into a O(n)\n    // available key search loop.\n\n    // It also ensures that automatically generated edge keys are unlikely\n    // to produce collisions with arbitrary keys given by users.\n    const instanceId = INSTANCE_ID();\n    let edgeId = 0;\n\n    const edgeKeyGenerator = () => {\n      let availableEdgeKey;\n\n      do {\n        availableEdgeKey = 'geid_' + instanceId + '_' + edgeId++;\n      } while (this._edges.has(availableEdgeKey));\n\n      return availableEdgeKey;\n    };\n\n    // Indexes\n    privateProperty(this, '_attributes', {});\n    privateProperty(this, '_nodes', new Map());\n    privateProperty(this, '_edges', new Map());\n    privateProperty(this, '_directedSize', 0);\n    privateProperty(this, '_undirectedSize', 0);\n    privateProperty(this, '_directedSelfLoopCount', 0);\n    privateProperty(this, '_undirectedSelfLoopCount', 0);\n    privateProperty(this, '_edgeKeyGenerator', edgeKeyGenerator);\n\n    // Options\n    privateProperty(this, '_options', options);\n\n    // Emitter properties\n    EMITTER_PROPS.forEach(prop => privateProperty(this, prop, this[prop]));\n\n    //-- Properties readers\n    readOnlyProperty(this, 'order', () => this._nodes.size);\n    readOnlyProperty(this, 'size', () => this._edges.size);\n    readOnlyProperty(this, 'directedSize', () => this._directedSize);\n    readOnlyProperty(this, 'undirectedSize', () => this._undirectedSize);\n    readOnlyProperty(\n      this,\n      'selfLoopCount',\n      () => this._directedSelfLoopCount + this._undirectedSelfLoopCount\n    );\n    readOnlyProperty(\n      this,\n      'directedSelfLoopCount',\n      () => this._directedSelfLoopCount\n    );\n    readOnlyProperty(\n      this,\n      'undirectedSelfLoopCount',\n      () => this._undirectedSelfLoopCount\n    );\n    readOnlyProperty(this, 'multi', this._options.multi);\n    readOnlyProperty(this, 'type', this._options.type);\n    readOnlyProperty(this, 'allowSelfLoops', this._options.allowSelfLoops);\n    readOnlyProperty(this, 'implementation', () => 'graphology');\n  }\n\n  _resetInstanceCounters() {\n    this._directedSize = 0;\n    this._undirectedSize = 0;\n    this._directedSelfLoopCount = 0;\n    this._undirectedSelfLoopCount = 0;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Read\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method returning whether the given node is found in the graph.\n   *\n   * @param  {any}     node - The node.\n   * @return {boolean}\n   */\n  hasNode(node) {\n    return this._nodes.has('' + node);\n  }\n\n  /**\n   * Method returning whether the given directed edge is found in the graph.\n   *\n   * Arity 1:\n   * @param  {any}     edge - The edge's key.\n   *\n   * Arity 2:\n   * @param  {any}     source - The edge's source.\n   * @param  {any}     target - The edge's target.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the arguments are invalid.\n   */\n  hasDirectedEdge(source, target) {\n    // Early termination\n    if (this.type === 'undirected') return false;\n\n    if (arguments.length === 1) {\n      const edge = '' + source;\n\n      const edgeData = this._edges.get(edge);\n\n      return !!edgeData && !edgeData.undirected;\n    } else if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      // If the node source or the target is not in the graph we break\n      const nodeData = this._nodes.get(source);\n\n      if (!nodeData) return false;\n\n      // Is there a directed edge pointing toward target?\n      const edges = nodeData.out[target];\n\n      if (!edges) return false;\n\n      return this.multi ? !!edges.size : true;\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.hasDirectedEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`\n    );\n  }\n\n  /**\n   * Method returning whether the given undirected edge is found in the graph.\n   *\n   * Arity 1:\n   * @param  {any}     edge - The edge's key.\n   *\n   * Arity 2:\n   * @param  {any}     source - The edge's source.\n   * @param  {any}     target - The edge's target.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the arguments are invalid.\n   */\n  hasUndirectedEdge(source, target) {\n    // Early termination\n    if (this.type === 'directed') return false;\n\n    if (arguments.length === 1) {\n      const edge = '' + source;\n\n      const edgeData = this._edges.get(edge);\n\n      return !!edgeData && edgeData.undirected;\n    } else if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      // If the node source or the target is not in the graph we break\n      const nodeData = this._nodes.get(source);\n\n      if (!nodeData) return false;\n\n      // Is there a directed edge pointing toward target?\n      const edges = nodeData.undirected[target];\n\n      if (!edges) return false;\n\n      return this.multi ? !!edges.size : true;\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.hasDirectedEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`\n    );\n  }\n\n  /**\n   * Method returning whether the given edge is found in the graph.\n   *\n   * Arity 1:\n   * @param  {any}     edge - The edge's key.\n   *\n   * Arity 2:\n   * @param  {any}     source - The edge's source.\n   * @param  {any}     target - The edge's target.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the arguments are invalid.\n   */\n  hasEdge(source, target) {\n    if (arguments.length === 1) {\n      const edge = '' + source;\n\n      return this._edges.has(edge);\n    } else if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      // If the node source or the target is not in the graph we break\n      const nodeData = this._nodes.get(source);\n\n      if (!nodeData) return false;\n\n      // Is there a directed edge pointing toward target?\n      let edges = typeof nodeData.out !== 'undefined' && nodeData.out[target];\n\n      if (!edges)\n        edges =\n          typeof nodeData.undirected !== 'undefined' &&\n          nodeData.undirected[target];\n\n      if (!edges) return false;\n\n      return this.multi ? !!edges.size : true;\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.hasEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`\n    );\n  }\n\n  /**\n   * Method returning the edge matching source & target in a directed fashion.\n   *\n   * @param  {any} source - The edge's source.\n   * @param  {any} target - The edge's target.\n   *\n   * @return {any|undefined}\n   *\n   * @throws {Error} - Will throw if the graph is multi.\n   * @throws {Error} - Will throw if source or target doesn't exist.\n   */\n  directedEdge(source, target) {\n    if (this.type === 'undirected') return;\n\n    source = '' + source;\n    target = '' + target;\n\n    if (this.multi)\n      throw new UsageGraphError(\n        'Graph.directedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.directedEdges instead.'\n      );\n\n    const sourceData = this._nodes.get(source);\n\n    if (!sourceData)\n      throw new NotFoundGraphError(\n        `Graph.directedEdge: could not find the \"${source}\" source node in the graph.`\n      );\n\n    if (!this._nodes.has(target))\n      throw new NotFoundGraphError(\n        `Graph.directedEdge: could not find the \"${target}\" target node in the graph.`\n      );\n\n    const edgeData = (sourceData.out && sourceData.out[target]) || undefined;\n\n    if (edgeData) return edgeData.key;\n  }\n\n  /**\n   * Method returning the edge matching source & target in a undirected fashion.\n   *\n   * @param  {any} source - The edge's source.\n   * @param  {any} target - The edge's target.\n   *\n   * @return {any|undefined}\n   *\n   * @throws {Error} - Will throw if the graph is multi.\n   * @throws {Error} - Will throw if source or target doesn't exist.\n   */\n  undirectedEdge(source, target) {\n    if (this.type === 'directed') return;\n\n    source = '' + source;\n    target = '' + target;\n\n    if (this.multi)\n      throw new UsageGraphError(\n        'Graph.undirectedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.undirectedEdges instead.'\n      );\n\n    const sourceData = this._nodes.get(source);\n\n    if (!sourceData)\n      throw new NotFoundGraphError(\n        `Graph.undirectedEdge: could not find the \"${source}\" source node in the graph.`\n      );\n\n    if (!this._nodes.has(target))\n      throw new NotFoundGraphError(\n        `Graph.undirectedEdge: could not find the \"${target}\" target node in the graph.`\n      );\n\n    const edgeData =\n      (sourceData.undirected && sourceData.undirected[target]) || undefined;\n\n    if (edgeData) return edgeData.key;\n  }\n\n  /**\n   * Method returning the edge matching source & target in a mixed fashion.\n   *\n   * @param  {any} source - The edge's source.\n   * @param  {any} target - The edge's target.\n   *\n   * @return {any|undefined}\n   *\n   * @throws {Error} - Will throw if the graph is multi.\n   * @throws {Error} - Will throw if source or target doesn't exist.\n   */\n  edge(source, target) {\n    if (this.multi)\n      throw new UsageGraphError(\n        'Graph.edge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.edges instead.'\n      );\n\n    source = '' + source;\n    target = '' + target;\n\n    const sourceData = this._nodes.get(source);\n\n    if (!sourceData)\n      throw new NotFoundGraphError(\n        `Graph.edge: could not find the \"${source}\" source node in the graph.`\n      );\n\n    if (!this._nodes.has(target))\n      throw new NotFoundGraphError(\n        `Graph.edge: could not find the \"${target}\" target node in the graph.`\n      );\n\n    const edgeData =\n      (sourceData.out && sourceData.out[target]) ||\n      (sourceData.undirected && sourceData.undirected[target]) ||\n      undefined;\n\n    if (edgeData) return edgeData.key;\n  }\n\n  /**\n   * Method returning whether two nodes are directed neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areDirectedNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areDirectedNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return false;\n\n    return neighbor in nodeData.in || neighbor in nodeData.out;\n  }\n\n  /**\n   * Method returning whether two nodes are out neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areOutNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areOutNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return false;\n\n    return neighbor in nodeData.out;\n  }\n\n  /**\n   * Method returning whether two nodes are in neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areInNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areInNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return false;\n\n    return neighbor in nodeData.in;\n  }\n\n  /**\n   * Method returning whether two nodes are undirected neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areUndirectedNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areUndirectedNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'directed') return false;\n\n    return neighbor in nodeData.undirected;\n  }\n\n  /**\n   * Method returning whether two nodes are neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type !== 'undirected') {\n      if (neighbor in nodeData.in || neighbor in nodeData.out) return true;\n    }\n\n    if (this.type !== 'directed') {\n      if (neighbor in nodeData.undirected) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Method returning whether two nodes are inbound neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areInboundNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areInboundNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type !== 'undirected') {\n      if (neighbor in nodeData.in) return true;\n    }\n\n    if (this.type !== 'directed') {\n      if (neighbor in nodeData.undirected) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Method returning whether two nodes are outbound neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areOutboundNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areOutboundNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type !== 'undirected') {\n      if (neighbor in nodeData.out) return true;\n    }\n\n    if (this.type !== 'directed') {\n      if (neighbor in nodeData.undirected) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Method returning the given node's in degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  inDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.inDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.inDegree + nodeData.directedSelfLoops;\n  }\n\n  /**\n   * Method returning the given node's out degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  outDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.outDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.outDegree + nodeData.directedSelfLoops;\n  }\n\n  /**\n   * Method returning the given node's directed degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  directedDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.directedDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    const loops = nodeData.directedSelfLoops;\n\n    const inDegree = nodeData.inDegree + loops;\n    const outDegree = nodeData.outDegree + loops;\n\n    return inDegree + outDegree;\n  }\n\n  /**\n   * Method returning the given node's undirected degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  undirectedDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.undirectedDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'directed') return 0;\n\n    const loops = nodeData.undirectedSelfLoops;\n\n    return nodeData.undirectedDegree + loops * 2;\n  }\n\n  /**\n   * Method returning the given node's directed degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  degree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.degree: could not find the \"${node}\" node in the graph.`\n      );\n\n    let degree = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree + nodeData.undirectedSelfLoops * 2;\n    }\n\n    if (this.type !== 'undirected') {\n      degree +=\n        nodeData.inDegree + nodeData.outDegree + nodeData.directedSelfLoops * 2;\n    }\n\n    return degree;\n  }\n\n  /**\n   * Method returning the given node's in degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  inDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.inDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.inDegree;\n  }\n\n  /**\n   * Method returning the given node's out degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  outDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.outDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.outDegree;\n  }\n\n  /**\n   * Method returning the given node's directed degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  directedDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.directedDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.inDegree + nodeData.outDegree;\n  }\n\n  /**\n   * Method returning the given node's undirected degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  undirectedDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.undirectedDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'directed') return 0;\n\n    return nodeData.undirectedDegree;\n  }\n\n  /**\n   * Method returning the given node's directed degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  degreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.degreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    let degree = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree;\n    }\n\n    if (this.type !== 'undirected') {\n      degree += nodeData.inDegree + nodeData.outDegree;\n    }\n\n    return degree;\n  }\n\n  /**\n   * Method returning the given edge's source.\n   *\n   * @param  {any} edge - The edge's key.\n   * @return {any}      - The edge's source.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  source(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.source: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.source.key;\n  }\n\n  /**\n   * Method returning the given edge's target.\n   *\n   * @param  {any} edge - The edge's key.\n   * @return {any}      - The edge's target.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  target(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.target: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.target.key;\n  }\n\n  /**\n   * Method returning the given edge's extremities.\n   *\n   * @param  {any}   edge - The edge's key.\n   * @return {array}      - The edge's extremities.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  extremities(edge) {\n    edge = '' + edge;\n\n    const edgeData = this._edges.get(edge);\n\n    if (!edgeData)\n      throw new NotFoundGraphError(\n        `Graph.extremities: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return [edgeData.source.key, edgeData.target.key];\n  }\n\n  /**\n   * Given a node & an edge, returns the other extremity of the edge.\n   *\n   * @param  {any}   node - The node's key.\n   * @param  {any}   edge - The edge's key.\n   * @return {any}        - The related node.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph or if the\n   *                   edge & node are not related.\n   */\n  opposite(node, edge) {\n    node = '' + node;\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.opposite: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    const source = data.source.key,\n      target = data.target.key;\n\n    if (node !== source && node !== target)\n      throw new NotFoundGraphError(\n        `Graph.opposite: the \"${node}\" node is not attached to the \"${edge}\" edge (${source}, ${target}).`\n      );\n\n    return node === source ? target : source;\n  }\n\n  /**\n   * Returns whether the given edge has the given node as extremity.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @param  {any}     node - The node's key.\n   * @return {boolean}      - The related node.\n   *\n   * @throws {Error} - Will throw if either the node or the edge isn't in the graph.\n   */\n  hasExtremity(edge, node) {\n    edge = '' + edge;\n    node = '' + node;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.hasExtremity: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.source.key === node || data.target.key === node;\n  }\n\n  /**\n   * Method returning whether the given edge is undirected.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  isUndirected(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.isUndirected: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.undirected;\n  }\n\n  /**\n   * Method returning whether the given edge is directed.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  isDirected(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.isDirected: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return !data.undirected;\n  }\n\n  /**\n   * Method returning whether the given edge is a self loop.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  isSelfLoop(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.isSelfLoop: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.source === data.target;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Mutation\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method used to add a node to the graph.\n   *\n   * @param  {any}    node         - The node.\n   * @param  {object} [attributes] - Optional attributes.\n   * @return {any}                 - The node.\n   *\n   * @throws {Error} - Will throw if the given node already exist.\n   * @throws {Error} - Will throw if the given attributes are not an object.\n   */\n  addNode(node, attributes) {\n    const nodeData = addNode(this, node, attributes);\n\n    return nodeData.key;\n  }\n\n  /**\n   * Method used to merge a node into the graph.\n   *\n   * @param  {any}    node         - The node.\n   * @param  {object} [attributes] - Optional attributes.\n   * @return {any}                 - The node.\n   */\n  mergeNode(node, attributes) {\n    if (attributes && !isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        `Graph.mergeNode: invalid attributes. Expecting an object but got \"${attributes}\"`\n      );\n\n    // String coercion\n    node = '' + node;\n    attributes = attributes || {};\n\n    // If the node already exists, we merge the attributes\n    let data = this._nodes.get(node);\n\n    if (data) {\n      if (attributes) {\n        assign(data.attributes, attributes);\n\n        this.emit('nodeAttributesUpdated', {\n          type: 'merge',\n          key: node,\n          attributes: data.attributes,\n          data: attributes\n        });\n      }\n      return node;\n    }\n\n    data = new this.NodeDataClass(node, attributes);\n\n    // Adding the node to internal register\n    this._nodes.set(node, data);\n\n    // Emitting\n    this.emit('nodeAdded', {\n      key: node,\n      attributes\n    });\n\n    return node;\n  }\n\n  /**\n   * Method used to add a node if it does not exist in the graph or else to\n   * update its attributes using a function.\n   *\n   * @param  {any}      node      - The node.\n   * @param  {function} [updater] - Optional updater function.\n   * @return {any}                - The node.\n   */\n  updateNode(node, updater) {\n    if (updater && typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        `Graph.updateNode: invalid updater function. Expecting a function but got \"${updater}\"`\n      );\n\n    // String coercion\n    node = '' + node;\n\n    // If the node already exists, we update the attributes\n    let data = this._nodes.get(node);\n\n    if (data) {\n      if (updater) {\n        const oldAttributes = data.attributes;\n        data.attributes = updater(oldAttributes);\n\n        this.emit('nodeAttributesUpdated', {\n          type: 'replace',\n          key: node,\n          attributes: data.attributes\n        });\n      }\n      return node;\n    }\n\n    const attributes = updater ? updater({}) : {};\n\n    data = new this.NodeDataClass(node, attributes);\n\n    // Adding the node to internal register\n    this._nodes.set(node, data);\n\n    // Emitting\n    this.emit('nodeAdded', {\n      key: node,\n      attributes\n    });\n\n    return node;\n  }\n\n  /**\n   * Method used to drop a single node & all its attached edges from the graph.\n   *\n   * @param  {any}    node - The node.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the node doesn't exist.\n   */\n  dropNode(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.dropNode: could not find the \"${node}\" node in the graph.`\n      );\n\n    // Removing attached edges\n    // TODO: we could do faster\n    this.forEachEdge(node, edge => {\n      this.dropEdge(edge);\n    });\n\n    // Dropping the node from the register\n    this._nodes.delete(node);\n\n    // Emitting\n    this.emit('nodeDropped', {\n      key: node,\n      attributes: nodeData.attributes\n    });\n  }\n\n  /**\n   * Method used to drop a single edge from the graph.\n   *\n   * Arity 1:\n   * @param  {any}    edge - The edge.\n   *\n   * Arity 2:\n   * @param  {any}    source - Source node.\n   * @param  {any}    target - Target node.\n   *\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the edge doesn't exist.\n   */\n  dropEdge(edge) {\n    let edgeData;\n\n    if (arguments.length > 1) {\n      const source = '' + arguments[0],\n        target = '' + arguments[1];\n\n      edgeData = getMatchingEdge(this, source, target, this.type);\n\n      if (!edgeData)\n        throw new NotFoundGraphError(\n          `Graph.dropEdge: could not find the \"${source}\" -> \"${target}\" edge in the graph.`\n        );\n    } else {\n      edge = '' + edge;\n\n      edgeData = this._edges.get(edge);\n\n      if (!edgeData)\n        throw new NotFoundGraphError(\n          `Graph.dropEdge: could not find the \"${edge}\" edge in the graph.`\n        );\n    }\n\n    // Dropping the edge from the register\n    this._edges.delete(edgeData.key);\n\n    // Updating related degrees\n    const {source: sourceData, target: targetData, attributes} = edgeData;\n\n    const undirected = edgeData.undirected;\n\n    if (sourceData === targetData) {\n      if (undirected) {\n        sourceData.undirectedSelfLoops--;\n        this._undirectedSelfLoopCount--;\n      } else {\n        sourceData.directedSelfLoops--;\n        this._directedSelfLoopCount--;\n      }\n    } else {\n      if (undirected) {\n        sourceData.undirectedDegree--;\n        targetData.undirectedDegree--;\n      } else {\n        sourceData.outDegree--;\n        targetData.inDegree--;\n      }\n    }\n\n    // Clearing index\n    clearEdgeFromStructureIndex(this, undirected, edgeData);\n\n    if (undirected) this._undirectedSize--;\n    else this._directedSize--;\n\n    // Emitting\n    this.emit('edgeDropped', {\n      key: edge,\n      attributes,\n      source: sourceData.key,\n      target: targetData.key,\n      undirected\n    });\n\n    return this;\n  }\n\n  /**\n   * Method used to remove every edge & every node from the graph.\n   *\n   * @return {Graph}\n   */\n  clear() {\n    // Clearing edges\n    this._edges.clear();\n\n    // Clearing nodes\n    this._nodes.clear();\n\n    // Reset counters\n    this._resetInstanceCounters();\n\n    // Emitting\n    this.emit('cleared');\n  }\n\n  /**\n   * Method used to remove every edge from the graph.\n   *\n   * @return {Graph}\n   */\n  clearEdges() {\n    clearStructureIndex(this);\n\n    // Clearing edges\n    this._edges.clear();\n\n    // Reset counters\n    this._resetInstanceCounters();\n\n    // Emitting\n    this.emit('edgesCleared');\n  }\n\n  /**---------------------------------------------------------------------------\n   * Attributes-related methods\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method returning the desired graph's attribute.\n   *\n   * @param  {string} name - Name of the attribute.\n   * @return {any}\n   */\n  getAttribute(name) {\n    return this._attributes[name];\n  }\n\n  /**\n   * Method returning the graph's attributes.\n   *\n   * @return {object}\n   */\n  getAttributes() {\n    return this._attributes;\n  }\n\n  /**\n   * Method returning whether the graph has the desired attribute.\n   *\n   * @param  {string}  name - Name of the attribute.\n   * @return {boolean}\n   */\n  hasAttribute(name) {\n    return this._attributes.hasOwnProperty(name);\n  }\n\n  /**\n   * Method setting a value for the desired graph's attribute.\n   *\n   * @param  {string}  name  - Name of the attribute.\n   * @param  {any}     value - Value for the attribute.\n   * @return {Graph}\n   */\n  setAttribute(name, value) {\n    this._attributes[name] = value;\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'set',\n      attributes: this._attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method using a function to update the desired graph's attribute's value.\n   *\n   * @param  {string}   name    - Name of the attribute.\n   * @param  {function} updater - Function use to update the attribute's value.\n   * @return {Graph}\n   */\n  updateAttribute(name, updater) {\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateAttribute: updater should be a function.'\n      );\n\n    const value = this._attributes[name];\n\n    this._attributes[name] = updater(value);\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'set',\n      attributes: this._attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method removing the desired graph's attribute.\n   *\n   * @param  {string} name  - Name of the attribute.\n   * @return {Graph}\n   */\n  removeAttribute(name) {\n    delete this._attributes[name];\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'remove',\n      attributes: this._attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method replacing the graph's attributes.\n   *\n   * @param  {object} attributes - New attributes.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if given attributes are not a plain object.\n   */\n  replaceAttributes(attributes) {\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        'Graph.replaceAttributes: provided attributes are not a plain object.'\n      );\n\n    this._attributes = attributes;\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'replace',\n      attributes: this._attributes\n    });\n\n    return this;\n  }\n\n  /**\n   * Method merging the graph's attributes.\n   *\n   * @param  {object} attributes - Attributes to merge.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if given attributes are not a plain object.\n   */\n  mergeAttributes(attributes) {\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        'Graph.mergeAttributes: provided attributes are not a plain object.'\n      );\n\n    assign(this._attributes, attributes);\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'merge',\n      attributes: this._attributes,\n      data: attributes\n    });\n\n    return this;\n  }\n\n  /**\n   * Method returning the desired attribute for the given node.\n   *\n   * @param  {any}    node - Target node.\n   * @param  {string} name - Name of the attribute to get.\n   * @return {any}\n   *\n   * @throws {Error} - Will throw if the node is not found.\n   */\n  getNodeAttribute(node, name) {\n    node = '' + node;\n\n    const data = this._nodes.get(node);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.getNodeAttribute: could not find the \"${node}\" node in the graph.`\n      );\n\n    return data.attributes[name];\n  }\n\n  /**\n   * Method returning the attributes for the given node.\n   *\n   * @param  {any}    node - Target node.\n   * @return {object}\n   *\n   * @throws {Error} - Will throw if the node is not found.\n   */\n  getNodeAttributes(node) {\n    node = '' + node;\n\n    const data = this._nodes.get(node);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.getNodeAttributes: could not find the \"${node}\" node in the graph.`\n      );\n\n    return data.attributes;\n  }\n\n  /**\n   * Method checking whether the given attribute exists for the given node.\n   *\n   * @param  {any}    node - Target node.\n   * @param  {string} name - Name of the attribute to check.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node is not found.\n   */\n  hasNodeAttribute(node, name) {\n    node = '' + node;\n\n    const data = this._nodes.get(node);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.hasNodeAttribute: could not find the \"${node}\" node in the graph.`\n      );\n\n    return data.attributes.hasOwnProperty(name);\n  }\n\n  /**\n   * Method checking setting the desired attribute for the given node.\n   *\n   * @param  {any}    node  - Target node.\n   * @param  {string} name  - Name of the attribute to set.\n   * @param  {any}    value - Value for the attribute.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if less than 3 arguments are passed.\n   * @throws {Error} - Will throw if the node is not found.\n   */\n  setNodeAttribute(node, name, value) {\n    node = '' + node;\n\n    const data = this._nodes.get(node);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.setNodeAttribute: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (arguments.length < 3)\n      throw new InvalidArgumentsGraphError(\n        \"Graph.setNodeAttribute: not enough arguments. Either you forgot to pass the attribute's name or value, or you meant to use #.replaceNodeAttributes / #.mergeNodeAttributes instead.\"\n      );\n\n    data.attributes[name] = value;\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: node,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method checking setting the desired attribute for the given node.\n   *\n   * @param  {any}      node    - Target node.\n   * @param  {string}   name    - Name of the attribute to set.\n   * @param  {function} updater - Function that will update the attribute.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if less than 3 arguments are passed.\n   * @throws {Error} - Will throw if updater is not a function.\n   * @throws {Error} - Will throw if the node is not found.\n   */\n  updateNodeAttribute(node, name, updater) {\n    node = '' + node;\n\n    const data = this._nodes.get(node);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.updateNodeAttribute: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (arguments.length < 3)\n      throw new InvalidArgumentsGraphError(\n        \"Graph.updateNodeAttribute: not enough arguments. Either you forgot to pass the attribute's name or updater, or you meant to use #.replaceNodeAttributes / #.mergeNodeAttributes instead.\"\n      );\n\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateAttribute: updater should be a function.'\n      );\n\n    const attributes = data.attributes;\n    const value = updater(attributes[name]);\n\n    attributes[name] = value;\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: node,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method removing the desired attribute for the given node.\n   *\n   * @param  {any}    node  - Target node.\n   * @param  {string} name  - Name of the attribute to remove.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the node is not found.\n   */\n  removeNodeAttribute(node, name) {\n    node = '' + node;\n\n    const data = this._nodes.get(node);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.removeNodeAttribute: could not find the \"${node}\" node in the graph.`\n      );\n\n    delete data.attributes[name];\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: node,\n      type: 'remove',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method completely replacing the attributes of the given node.\n   *\n   * @param  {any}    node       - Target node.\n   * @param  {object} attributes - New attributes.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the node is not found.\n   * @throws {Error} - Will throw if the given attributes is not a plain object.\n   */\n  replaceNodeAttributes(node, attributes) {\n    node = '' + node;\n\n    const data = this._nodes.get(node);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.replaceNodeAttributes: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        'Graph.replaceNodeAttributes: provided attributes are not a plain object.'\n      );\n\n    data.attributes = attributes;\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: node,\n      type: 'replace',\n      attributes: data.attributes\n    });\n\n    return this;\n  }\n\n  /**\n   * Method merging the attributes of the given node with the provided ones.\n   *\n   * @param  {any}    node       - Target node.\n   * @param  {object} attributes - Attributes to merge.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the node is not found.\n   * @throws {Error} - Will throw if the given attributes is not a plain object.\n   */\n  mergeNodeAttributes(node, attributes) {\n    node = '' + node;\n\n    const data = this._nodes.get(node);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.mergeNodeAttributes: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        'Graph.mergeNodeAttributes: provided attributes are not a plain object.'\n      );\n\n    assign(data.attributes, attributes);\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: node,\n      type: 'merge',\n      attributes: data.attributes,\n      data: attributes\n    });\n\n    return this;\n  }\n\n  /**\n   * Method used to update each node's attributes using the given function.\n   *\n   * @param {function}  updater - Updater function to use.\n   * @param {object}    [hints] - Optional hints.\n   */\n  updateEachNodeAttributes(updater, hints) {\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateEachNodeAttributes: expecting an updater function.'\n      );\n\n    if (hints && !validateHints(hints))\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateEachNodeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n      nodeData.attributes = updater(nodeData.key, nodeData.attributes);\n    }\n\n    this.emit('eachNodeAttributesUpdated', {\n      hints: hints ? hints : null\n    });\n  }\n\n  /**\n   * Method used to update each edge's attributes using the given function.\n   *\n   * @param {function}  updater - Updater function to use.\n   * @param {object}    [hints] - Optional hints.\n   */\n  updateEachEdgeAttributes(updater, hints) {\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateEachEdgeAttributes: expecting an updater function.'\n      );\n\n    if (hints && !validateHints(hints))\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateEachEdgeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}'\n      );\n\n    const iterator = this._edges.values();\n\n    let step, edgeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      edgeData = step.value;\n      edgeData.attributes = updater(edgeData.key, edgeData.attributes);\n    }\n\n    this.emit('eachEdgeAttributesUpdated', {\n      hints: hints ? hints : null\n    });\n  }\n\n  /**---------------------------------------------------------------------------\n   * Iteration-related methods\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method iterating over the graph's adjacency using the given callback.\n   *\n   * @param  {function}  callback - Callback to use.\n   */\n  forEach(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.forEach: expecting a callback.'\n      );\n\n    if (this.multi) forEachAdjacencyMulti(false, this, callback);\n    else forEachAdjacencySimple(false, this, callback);\n  }\n\n  /**\n   * Method returning whether a matching edge can be found using given\n   * predicate function.\n   *\n   * @param  {function}  callback - Callback to use.\n   */\n  find(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError('Graph.find: expecting a callback.');\n\n    if (this.multi) return forEachAdjacencyMulti(true, this, callback);\n\n    return forEachAdjacencySimple(true, this, callback);\n  }\n\n  /**\n   * Method returning an iterator over the graph's adjacency.\n   *\n   * @return {Iterator}\n   */\n  adjacency() {\n    if (this.multi) return createAdjacencyIteratorMulti(this);\n\n    return createAdjacencyIteratorSimple(this);\n  }\n\n  /**\n   * Method returning the list of the graph's nodes.\n   *\n   * @return {array} - The nodes.\n   */\n  nodes() {\n    if (typeof Array.from === 'function') return Array.from(this._nodes.keys());\n\n    return take(this._nodes.keys(), this._nodes.size);\n  }\n\n  /**\n   * Method iterating over the graph's nodes using the given callback.\n   *\n   * @param  {function}  callback - Callback (key, attributes, index).\n   */\n  forEachNode(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.forEachNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n      callback(nodeData.key, nodeData.attributes);\n    }\n  }\n\n  /**\n   * Method iterating attempting to find a node matching the given predicate\n   * function.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  findNode(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.findNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n\n      if (callback(nodeData.key, nodeData.attributes)) return nodeData.key;\n    }\n\n    return;\n  }\n\n  /**\n   * Method mapping nodes.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  mapNodes(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.mapNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    const result = new Array(this.order);\n    let i = 0;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n      result[i++] = callback(nodeData.key, nodeData.attributes);\n    }\n\n    return result;\n  }\n\n  /**\n   * Method returning whether some node verify the given predicate.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  someNode(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.someNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n\n      if (callback(nodeData.key, nodeData.attributes)) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Method returning whether all node verify the given predicate.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  everyNode(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.everyNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n\n      if (!callback(nodeData.key, nodeData.attributes)) return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Method filtering nodes.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  filterNodes(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.filterNodes: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    const result = [];\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n\n      if (callback(nodeData.key, nodeData.attributes))\n        result.push(nodeData.key);\n    }\n\n    return result;\n  }\n\n  /**\n   * Method reducing nodes.\n   *\n   * @param  {function}  callback - Callback (accumulator, key, attributes).\n   */\n  reduceNodes(callback, initialValue) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.reduceNodes: expecting a callback.'\n      );\n\n    if (arguments.length < 2)\n      throw new InvalidArgumentsGraphError(\n        'Graph.reduceNodes: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.'\n      );\n\n    let accumulator = initialValue;\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n      accumulator = callback(accumulator, nodeData.key, nodeData.attributes);\n    }\n\n    return accumulator;\n  }\n\n  /**\n   * Method returning an iterator over the graph's node entries.\n   *\n   * @return {Iterator}\n   */\n  nodeEntries() {\n    const iterator = this._nodes.values();\n\n    return new Iterator(() => {\n      const step = iterator.next();\n\n      if (step.done) return step;\n\n      const data = step.value;\n\n      return {\n        value: {node: data.key, attributes: data.attributes},\n        done: false\n      };\n    });\n  }\n\n  /**---------------------------------------------------------------------------\n   * Serialization\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method exporting the target node.\n   *\n   * @param  {any}   node - Target node.\n   * @return {array}      - The serialized node.\n   *\n   * @throws {Error} - Will throw if the node is not found.\n   */\n  exportNode(node) {\n    node = '' + node;\n\n    const data = this._nodes.get(node);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.exportNode: could not find the \"${node}\" node in the graph.`\n      );\n\n    return serializeNode(node, data);\n  }\n\n  /**\n   * Method exporting the target edge.\n   *\n   * @param  {any}   edge - Target edge.\n   * @return {array}      - The serialized edge.\n   *\n   * @throws {Error} - Will throw if the edge is not found.\n   */\n  exportEdge(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.exportEdge: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return serializeEdge(edge, data);\n  }\n\n  /**\n   * Method used to export the whole graph.\n   *\n   * @return {object} - The serialized graph.\n   */\n  export() {\n    const nodes = new Array(this._nodes.size);\n\n    let i = 0;\n\n    this._nodes.forEach((data, key) => {\n      nodes[i++] = serializeNode(key, data);\n    });\n\n    const edges = new Array(this._edges.size);\n\n    i = 0;\n\n    this._edges.forEach((data, key) => {\n      edges[i++] = serializeEdge(key, data);\n    });\n\n    return {\n      attributes: this.getAttributes(),\n      nodes,\n      edges,\n      options: {\n        type: this.type,\n        multi: this.multi,\n        allowSelfLoops: this.allowSelfLoops\n      }\n    };\n  }\n\n  /**\n   * Method used to import a serialized node.\n   *\n   * @param  {object} data   - The serialized node.\n   * @param  {boolean} merge - Whether to merge the given node.\n   * @return {Graph}         - Returns itself for chaining.\n   */\n  importNode(data, merge = false) {\n    // Validating\n    const error = validateSerializedNode(data);\n\n    if (error) {\n      if (error === 'not-object')\n        throw new InvalidArgumentsGraphError(\n          'Graph.importNode: invalid serialized node. A serialized node should be a plain object with at least a \"key\" property.'\n        );\n      if (error === 'no-key')\n        throw new InvalidArgumentsGraphError(\n          'Graph.importNode: no key provided.'\n        );\n      if (error === 'invalid-attributes')\n        throw new InvalidArgumentsGraphError(\n          'Graph.importNode: invalid attributes. Attributes should be a plain object, null or omitted.'\n        );\n    }\n\n    // Adding the node\n    const {key, attributes = {}} = data;\n\n    if (merge) this.mergeNode(key, attributes);\n    else this.addNode(key, attributes);\n\n    return this;\n  }\n\n  /**\n   * Method used to import a serialized edge.\n   *\n   * @param  {object}  data  - The serialized edge.\n   * @param  {boolean} merge - Whether to merge the given edge.\n   * @return {Graph}         - Returns itself for chaining.\n   */\n  importEdge(data, merge = false) {\n    // Validating\n    const error = validateSerializedEdge(data);\n\n    if (error) {\n      if (error === 'not-object')\n        throw new InvalidArgumentsGraphError(\n          'Graph.importEdge: invalid serialized edge. A serialized edge should be a plain object with at least a \"source\" & \"target\" property.'\n        );\n      if (error === 'no-source')\n        throw new InvalidArgumentsGraphError(\n          'Graph.importEdge: missing souce.'\n        );\n      if (error === 'no-target')\n        throw new InvalidArgumentsGraphError(\n          'Graph.importEdge: missing target.'\n        );\n      if (error === 'invalid-attributes')\n        throw new InvalidArgumentsGraphError(\n          'Graph.importEdge: invalid attributes. Attributes should be a plain object, null or omitted.'\n        );\n      if (error === 'invalid-undirected')\n        throw new InvalidArgumentsGraphError(\n          'Graph.importEdge: invalid undirected. Undirected should be boolean or omitted.'\n        );\n    }\n\n    // Adding the edge\n    const {source, target, attributes = {}, undirected = false} = data;\n\n    let method;\n\n    if ('key' in data) {\n      method = merge\n        ? undirected\n          ? this.mergeUndirectedEdgeWithKey\n          : this.mergeDirectedEdgeWithKey\n        : undirected\n        ? this.addUndirectedEdgeWithKey\n        : this.addDirectedEdgeWithKey;\n\n      method.call(this, data.key, source, target, attributes);\n    } else {\n      method = merge\n        ? undirected\n          ? this.mergeUndirectedEdge\n          : this.mergeDirectedEdge\n        : undirected\n        ? this.addUndirectedEdge\n        : this.addDirectedEdge;\n\n      method.call(this, source, target, attributes);\n    }\n\n    return this;\n  }\n\n  /**\n   * Method used to import a serialized graph.\n   *\n   * @param  {object|Graph} data  - The serialized graph.\n   * @param  {boolean}      merge - Whether to merge data.\n   * @return {Graph}              - Returns itself for chaining.\n   */\n  import(data, merge = false) {\n    // Importing a Graph instance\n    if (isGraph(data)) {\n      this.import(data.export(), merge);\n      return this;\n    }\n\n    // Importing a serialized graph\n    if (!isPlainObject(data))\n      throw new InvalidArgumentsGraphError(\n        'Graph.import: invalid argument. Expecting a serialized graph or, alternatively, a Graph instance.'\n      );\n\n    if (data.attributes) {\n      if (!isPlainObject(data.attributes))\n        throw new InvalidArgumentsGraphError(\n          'Graph.import: invalid attributes. Expecting a plain object.'\n        );\n\n      if (merge) this.mergeAttributes(data.attributes);\n      else this.replaceAttributes(data.attributes);\n    }\n\n    let i, l, list;\n\n    if (data.nodes) {\n      list = data.nodes;\n\n      if (!Array.isArray(list))\n        throw new InvalidArgumentsGraphError(\n          'Graph.import: invalid nodes. Expecting an array.'\n        );\n\n      for (i = 0, l = list.length; i < l; i++) this.importNode(list[i], merge);\n    }\n\n    if (data.edges) {\n      list = data.edges;\n\n      if (!Array.isArray(list))\n        throw new InvalidArgumentsGraphError(\n          'Graph.import: invalid edges. Expecting an array.'\n        );\n\n      for (i = 0, l = list.length; i < l; i++) this.importEdge(list[i], merge);\n    }\n\n    return this;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Utils\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method returning a null copy of the graph, i.e. a graph without nodes\n   * & edges but with the exact same options.\n   *\n   * @param  {object} options - Options to merge with the current ones.\n   * @return {Graph}          - The null copy.\n   */\n  nullCopy(options) {\n    return new Graph(assign({}, this._options, options));\n  }\n\n  /**\n   * Method returning an empty copy of the graph, i.e. a graph without edges but\n   * with the exact same options.\n   *\n   * @param  {object} options - Options to merge with the current ones.\n   * @return {Graph}          - The empty copy.\n   */\n  emptyCopy(options) {\n    const graph = this.nullCopy(options);\n\n    this._nodes.forEach((nodeData, key) => {\n      const attributes = assign({}, nodeData.attributes);\n\n      // NOTE: no need to emit events since user cannot access the instance yet\n      nodeData = new graph.NodeDataClass(key, attributes);\n      graph._nodes.set(key, nodeData);\n    });\n\n    return graph;\n  }\n\n  /**\n   * Method returning an exact copy of the graph.\n   *\n   * @return {Graph} - The copy.\n   */\n  copy() {\n    const graph = this.emptyCopy();\n\n    this.forEachEdge((edge, attr, source, target, _sa, _ta, undirected) => {\n      addEdge(\n        graph,\n        'copy',\n        false,\n        undirected,\n        edge,\n        source,\n        target,\n        assign({}, attr)\n      );\n    });\n\n    return graph;\n  }\n\n  /**\n   * Method upgrading the graph to a mixed one.\n   *\n   * @return {Graph} - The copy.\n   */\n  upgradeToMixed() {\n    if (this.type === 'mixed') return this;\n\n    // Upgrading node data:\n    // NOTE: maybe this could lead to some de-optimization by usual\n    // JavaScript engines but I cannot be sure of it. Another solution\n    // would be to reinstantiate the classes but this surely has a performance\n    // and memory impact.\n    this._nodes.forEach(data => data.upgradeToMixed());\n\n    // Mutating the options & the instance\n    this._options.type = 'mixed';\n    readOnlyProperty(this, 'type', this._options.type);\n    privateProperty(this, 'NodeDataClass', MixedNodeData);\n\n    return this;\n  }\n\n  /**\n   * Method upgrading the graph to a multi one.\n   *\n   * @return {Graph} - The copy.\n   */\n  upgradeToMulti() {\n    if (this.multi) return this;\n\n    // Mutating the options & the instance\n    this._options.multi = true;\n    readOnlyProperty(this, 'multi', true);\n\n    // Upgrading indices\n    upgradeStructureIndexToMulti(this);\n\n    return this;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Known methods\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method used by JavaScript to perform JSON serialization.\n   *\n   * @return {object} - The serialized graph.\n   */\n  toJSON() {\n    return this.export();\n  }\n\n  /**\n   * Method returning [object Graph].\n   */\n  toString() {\n    return '[object Graph]';\n  }\n\n  /**\n   * Method used internally by node's console to display a custom object.\n   *\n   * @return {object} - Formatted object representation of the graph.\n   */\n  inspect() {\n    const nodes = {};\n    this._nodes.forEach((data, key) => {\n      nodes[key] = data.attributes;\n    });\n\n    const edges = {},\n      multiIndex = {};\n\n    this._edges.forEach((data, key) => {\n      const direction = data.undirected ? '--' : '->';\n\n      let label = '';\n\n      let source = data.source.key;\n      let target = data.target.key;\n      let tmp;\n\n      if (data.undirected && source > target) {\n        tmp = source;\n        source = target;\n        target = tmp;\n      }\n\n      const desc = `(${source})${direction}(${target})`;\n\n      if (!key.startsWith('geid_')) {\n        label += `[${key}]: `;\n      } else if (this.multi) {\n        if (typeof multiIndex[desc] === 'undefined') {\n          multiIndex[desc] = 0;\n        } else {\n          multiIndex[desc]++;\n        }\n\n        label += `${multiIndex[desc]}. `;\n      }\n\n      label += desc;\n\n      edges[label] = data.attributes;\n    });\n\n    const dummy = {};\n\n    for (const k in this) {\n      if (\n        this.hasOwnProperty(k) &&\n        !EMITTER_PROPS.has(k) &&\n        typeof this[k] !== 'function'\n      )\n        dummy[k] = this[k];\n    }\n\n    dummy.attributes = this._attributes;\n    dummy.nodes = nodes;\n    dummy.edges = edges;\n\n    privateProperty(dummy, 'constructor', this.constructor);\n\n    return dummy;\n  }\n}\n\n/**\n * Attaching custom inspect method for node >= 10.\n */\nif (typeof Symbol !== 'undefined')\n  Graph.prototype[Symbol.for('nodejs.util.inspect.custom')] =\n    Graph.prototype.inspect;\n\n/**\n * Attaching methods to the prototype.\n *\n * Here, we are attaching a wide variety of methods to the Graph class'\n * prototype when those are very numerous and when their creation is\n * abstracted.\n */\n\n/**\n * Related to edge addition.\n */\nEDGE_ADD_METHODS.forEach(method => {\n  ['add', 'merge', 'update'].forEach(verb => {\n    const name = method.name(verb);\n    const fn = verb === 'add' ? addEdge : mergeEdge;\n\n    if (method.generateKey) {\n      Graph.prototype[name] = function (source, target, attributes) {\n        return fn(\n          this,\n          name,\n          true,\n          (method.type || this.type) === 'undirected',\n          null,\n          source,\n          target,\n          attributes,\n          verb === 'update'\n        );\n      };\n    } else {\n      Graph.prototype[name] = function (edge, source, target, attributes) {\n        return fn(\n          this,\n          name,\n          false,\n          (method.type || this.type) === 'undirected',\n          edge,\n          source,\n          target,\n          attributes,\n          verb === 'update'\n        );\n      };\n    }\n  });\n});\n\n/**\n * Self iterator.\n */\nif (typeof Symbol !== 'undefined')\n  Graph.prototype[Symbol.iterator] = Graph.prototype.adjacency;\n\n/**\n * Attributes-related.\n */\nattachAttributesMethods(Graph);\n\n/**\n * Edge iteration-related.\n */\nattachEdgeIterationMethods(Graph);\n\n/**\n * Neighbor iteration-related.\n */\nattachNeighborIterationMethods(Graph);\n","/**\n * Graphology Helper Classes\n * ==========================\n *\n * Building some higher-order classes instantiating the graph with\n * predefinite options.\n */\nimport {assign} from './utils';\nimport Graph from './graph';\n\nimport {\n  InvalidArgumentsGraphError,\n  NotFoundGraphError,\n  UsageGraphError\n} from './errors';\n\n/**\n * Alternative constructors.\n */\nclass DirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'directed'}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== false)\n      throw new InvalidArgumentsGraphError(\n        'DirectedGraph.from: inconsistent indication that the graph should be multi in given options!'\n      );\n\n    if (finalOptions.type !== 'directed')\n      throw new InvalidArgumentsGraphError(\n        'DirectedGraph.from: inconsistent \"' +\n          finalOptions.type +\n          '\" type in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\nclass UndirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'undirected'}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== false)\n      throw new InvalidArgumentsGraphError(\n        'UndirectedGraph.from: inconsistent indication that the graph should be multi in given options!'\n      );\n\n    if (finalOptions.type !== 'undirected')\n      throw new InvalidArgumentsGraphError(\n        'UndirectedGraph.from: inconsistent \"' +\n          finalOptions.type +\n          '\" type in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\nclass MultiGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({multi: true}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== true)\n      throw new InvalidArgumentsGraphError(\n        'MultiGraph.from: inconsistent indication that the graph should be simple in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\nclass MultiDirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'directed', multi: true}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== true)\n      throw new InvalidArgumentsGraphError(\n        'MultiDirectedGraph.from: inconsistent indication that the graph should be simple in given options!'\n      );\n\n    if (finalOptions.type !== 'directed')\n      throw new InvalidArgumentsGraphError(\n        'MultiDirectedGraph.from: inconsistent \"' +\n          finalOptions.type +\n          '\" type in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\nclass MultiUndirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'undirected', multi: true}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== true)\n      throw new InvalidArgumentsGraphError(\n        'MultiUndirectedGraph.from: inconsistent indication that the graph should be simple in given options!'\n      );\n\n    if (finalOptions.type !== 'undirected')\n      throw new InvalidArgumentsGraphError(\n        'MultiUndirectedGraph.from: inconsistent \"' +\n          finalOptions.type +\n          '\" type in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\n\n/**\n * Attaching static #.from method to each of the constructors.\n */\nfunction attachStaticFromMethod(Class) {\n  /**\n   * Builds a graph from serialized data or another graph's data.\n   *\n   * @param  {Graph|SerializedGraph} data      - Hydratation data.\n   * @param  {object}                [options] - Options.\n   * @return {Class}\n   */\n  Class.from = function (data, options) {\n    // Merging given options with serialized ones\n    const finalOptions = assign({}, data.options, options);\n\n    const instance = new Class(finalOptions);\n    instance.import(data);\n\n    return instance;\n  };\n}\n\nattachStaticFromMethod(Graph);\nattachStaticFromMethod(DirectedGraph);\nattachStaticFromMethod(UndirectedGraph);\nattachStaticFromMethod(MultiGraph);\nattachStaticFromMethod(MultiDirectedGraph);\nattachStaticFromMethod(MultiUndirectedGraph);\n\nGraph.Graph = Graph;\nGraph.DirectedGraph = DirectedGraph;\nGraph.UndirectedGraph = UndirectedGraph;\nGraph.MultiGraph = MultiGraph;\nGraph.MultiDirectedGraph = MultiDirectedGraph;\nGraph.MultiUndirectedGraph = MultiUndirectedGraph;\n\nGraph.InvalidArgumentsGraphError = InvalidArgumentsGraphError;\nGraph.NotFoundGraphError = NotFoundGraphError;\nGraph.UsageGraphError = UsageGraphError;\n\nexport {\n  Graph,\n  DirectedGraph,\n  UndirectedGraph,\n  MultiGraph,\n  MultiDirectedGraph,\n  MultiUndirectedGraph\n};\n","/**\n * Graphology CommonJS Endoint\n * ============================\n *\n * Endpoint for CommonJS modules consumers.\n */\nimport {Graph} from './classes';\n\nexport default Graph;\n"],"names":["assignPolyfill","target","arguments","i","l","length","k","assign","Object","getMatchingEdge","graph","source","type","sourceData","_nodes","get","edge","out","undirected","isGraph","value","addUndirectedEdgeWithKey","dropNode","isPlainObject","constructor","isEmpty","o","privateProperty","name","defineProperty","enumerable","configurable","writable","readOnlyProperty","descriptor","validateHints","hints","attributes","Array","isArray","incrementalIdStartingFromRandomByte","Math","floor","random","GraphError","message","Error","InvalidArgumentsGraphError","captureStackTrace","prototype","NotFoundGraphError","UsageGraphError","MixedNodeData","key","clear","inDegree","outDegree","undirectedDegree","directedSelfLoops","undirectedSelfLoops","DirectedNodeData","upgradeToMixed","UndirectedNodeData","EdgeData","updateStructureIndex","edgeData","targetData","multi","outKey","inKey","adj","container","Set","add","clearEdgeFromStructureIndex","sourceIndex","set","size","targetIndex","clearStructureIndex","iterator","values","step","next","done","upgradeStructureIndexToMulti","forEach","data","node","neighbor","edges","attachAttributeGetter","Class","method","element","_edges","attachAttributesGetter","attachAttributeChecker","hasOwnProperty","attachAttributeSetter","emit","attachAttributeUpdater","updater","attachAttributeRemover","attachAttributesReplacer","attachAttributesMerger","ATTRIBUTES_METHODS","attacher","attachAttributesMethods","Graph","EDGES_ITERATION","direction","collectSimple","object","push","collectMulti","forEachSimple","callback","avoid","forEachMulti","findSimple","shouldBreak","findMulti","createIterator","keys","inner","Iterator","sourceAttributes","targetAttributes","collectForKeySimple","collectForKeyMulti","edgesData","forEachForKeySimple","forEachForKeyMulti","findForKeySimple","findForKeyMulti","createIteratorForKey","v","of","createEdgeArray","from","take","undirectedSize","directedSize","list","mask","forEachEdge","shouldFilter","findEdge","createEdgeIterator","empty","createEdgeArrayForNode","nodeData","fn","splice","lastIndexOf","forEachEdgeForNode","findEdgeForNode","found","createEdgeIteratorForNode","chain","createEdgeArrayForPath","forEachEdgeForPath","findEdgeForPath","createEdgeIteratorForPath","attachEdgeArrayCreator","description","has","attachForEachEdge","forEachName","toUpperCase","slice","mapName","args","call","pop","result","e","ea","s","t","sa","ta","u","apply","filterName","reduceName","initialValue","accumulator","attachFindEdge","findEdgeName","someName","everyName","attachEdgeIteratorCreator","originalName","attachEdgeIterationMethods","NEIGHBORS_ITERATION","merge","neighbors","createNeighborArrayForNode","forEachInObject","neighborData","forEachInObjectOnce","visited","findInObject","findInObjectOnce","forEachNeighborForNode","findNeighbor","createObjectIterator","createDedupedObjectIterator","createNeighborIterator","attachNeighborArrayCreator","attachForEachNeighbor","n","a","attachFindNeighbor","capitalizedSingular","findName","attachNeighborIteratorCreator","iteratorName","attachNeighborIterationMethods","forEachAdjacencySimple","breakable","forEachAdjacencyMulti","containerStep","createAdjacencyIteratorSimple","state","offset","edgeKey","edgeAttributes","createAdjacencyIteratorMulti","serializeNode","serialized","serializeEdge","validateSerializedNode","validateSerializedEdge","INSTANCE_ID","TYPES","EMITTER_PROPS","EDGE_ADD_METHODS","verb","generateKey","DEFAULTS","allowSelfLoops","addNode","NodeDataClass","unsafeAddNode","addEdge","mustGenerateKey","eventData","_edgeKeyGenerator","_undirectedSelfLoopCount","_directedSelfLoopCount","_undirectedSize","_directedSize","mergeEdge","asUpdater","undefined","alreadyExistingEdgeData","oldAttributes","options","instanceId","edgeId","edgeKeyGenerator","availableEdgeKey","Map","prop","_options","_resetInstanceCounters","hasNode","hasDirectedEdge","hasUndirectedEdge","hasEdge","directedEdge","undirectedEdge","areDirectedNeighbors","areOutNeighbors","areInNeighbors","areUndirectedNeighbors","areNeighbors","areInboundNeighbors","areOutboundNeighbors","directedDegree","loops","degree","inDegreeWithoutSelfLoops","outDegreeWithoutSelfLoops","directedDegreeWithoutSelfLoops","undirectedDegreeWithoutSelfLoops","degreeWithoutSelfLoops","extremities","opposite","hasExtremity","isUndirected","isDirected","isSelfLoop","mergeNode","updateNode","dropEdge","clearEdges","getAttribute","_attributes","getAttributes","hasAttribute","setAttribute","updateAttribute","removeAttribute","replaceAttributes","mergeAttributes","getNodeAttribute","getNodeAttributes","hasNodeAttribute","setNodeAttribute","updateNodeAttribute","removeNodeAttribute","replaceNodeAttributes","mergeNodeAttributes","updateEachNodeAttributes","updateEachEdgeAttributes","find","adjacency","nodes","forEachNode","findNode","mapNodes","order","someNode","everyNode","filterNodes","reduceNodes","nodeEntries","exportNode","exportEdge","importNode","error","importEdge","mergeUndirectedEdgeWithKey","mergeDirectedEdgeWithKey","addDirectedEdgeWithKey","mergeUndirectedEdge","mergeDirectedEdge","addUndirectedEdge","addDirectedEdge","nullCopy","emptyCopy","copy","attr","_sa","_ta","upgradeToMulti","toJSON","toString","inspect","multiIndex","label","tmp","desc","startsWith","dummy","EventEmitter","Symbol","DirectedGraph","finalOptions","UndirectedGraph","MultiGraph","MultiDirectedGraph","MultiUndirectedGraph","attachStaticFromMethod","instance"],"mappings":"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"}