{"version":3,"file":"graphology.umd.min.js","sources":["../src/utils.js","../../../node_modules/events/events.js","../../../node_modules/obliterator/iterator.js","../../../node_modules/obliterator/support.js","../../../node_modules/obliterator/iter.js","../../../node_modules/obliterator/take.js","../src/errors.js","../src/data.js","../src/indices.js","../src/attributes.js","../../../node_modules/obliterator/chain.js","../src/iteration/edges.js","../src/iteration/neighbors.js","../src/iteration/adjacency.js","../src/serialization.js","../src/graph.js","../src/classes.js"],"sourcesContent":["/**\n * Graphology Utilities\n * =====================\n *\n * Collection of helpful functions used by the implementation.\n */\n\n/**\n * Object.assign-like polyfill.\n *\n * @param  {object} target       - First object.\n * @param  {object} [...objects] - Objects to merge.\n * @return {object}\n */\nfunction assignPolyfill() {\n  const target = arguments[0];\n\n  for (let i = 1, l = arguments.length; i < l; i++) {\n    if (!arguments[i]) continue;\n\n    for (const k in arguments[i]) target[k] = arguments[i][k];\n  }\n\n  return target;\n}\n\nlet assign = assignPolyfill;\n\nif (typeof Object.assign === 'function') assign = Object.assign;\n\nexport {assign};\n\n/**\n * Function returning the first matching edge for given path.\n * Note: this function does not check the existence of source & target. This\n * must be performed by the caller.\n *\n * @param  {Graph}  graph  - Target graph.\n * @param  {any}    source - Source node.\n * @param  {any}    target - Target node.\n * @param  {string} type   - Type of the edge (mixed, directed or undirected).\n * @return {string|null}\n */\nexport function getMatchingEdge(graph, source, target, type) {\n  const sourceData = graph._nodes.get(source);\n\n  let edge = null;\n\n  if (!sourceData) return edge;\n\n  if (type === 'mixed') {\n    edge =\n      (sourceData.out && sourceData.out[target]) ||\n      (sourceData.undirected && sourceData.undirected[target]);\n  } else if (type === 'directed') {\n    edge = sourceData.out && sourceData.out[target];\n  } else {\n    edge = sourceData.undirected && sourceData.undirected[target];\n  }\n\n  return edge;\n}\n\n/**\n * Checks whether the given value is a Graph implementation instance.\n *\n * @param  {mixed}   value - Target value.\n * @return {boolean}\n */\nexport function isGraph(value) {\n  return (\n    value !== null &&\n    typeof value === 'object' &&\n    typeof value.addUndirectedEdgeWithKey === 'function' &&\n    typeof value.dropNode === 'function'\n  );\n}\n\n/**\n * Checks whether the given value is a plain object.\n *\n * @param  {mixed}   value - Target value.\n * @return {boolean}\n */\nexport function isPlainObject(value) {\n  return (\n    typeof value === 'object' && value !== null && value.constructor === Object\n  );\n}\n\n/**\n * Checks whether the given object is empty.\n *\n * @param  {object}  o - Target Object.\n * @return {boolean}\n */\nexport function isEmpty(o) {\n  let k;\n\n  for (k in o) return false;\n\n  return true;\n}\n\n/**\n * Creates a \"private\" property for the given member name by concealing it\n * using the `enumerable` option.\n *\n * @param {object} target - Target object.\n * @param {string} name   - Member name.\n */\nexport function privateProperty(target, name, value) {\n  Object.defineProperty(target, name, {\n    enumerable: false,\n    configurable: false,\n    writable: true,\n    value\n  });\n}\n\n/**\n * Creates a read-only property for the given member name & the given getter.\n *\n * @param {object}   target - Target object.\n * @param {string}   name   - Member name.\n * @param {mixed}    value  - The attached getter or fixed value.\n */\nexport function readOnlyProperty(target, name, value) {\n  const descriptor = {\n    enumerable: true,\n    configurable: true\n  };\n\n  if (typeof value === 'function') {\n    descriptor.get = value;\n  } else {\n    descriptor.value = value;\n    descriptor.writable = false;\n  }\n\n  Object.defineProperty(target, name, descriptor);\n}\n\n/**\n * Returns whether the given object constitute valid hints.\n *\n * @param {object} hints - Target object.\n */\nexport function validateHints(hints) {\n  if (!isPlainObject(hints)) return false;\n\n  if (hints.attributes && !Array.isArray(hints.attributes)) return false;\n\n  return true;\n}\n\n/**\n * Creates a function generating incremental ids for edges.\n *\n * @return {function}\n */\nexport function incrementalIdStartingFromRandomByte() {\n  let i = Math.floor(Math.random() * 256) & 0xff;\n\n  return () => {\n    return i++;\n  };\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","/**\n * Obliterator Iterator Class\n * ===========================\n *\n * Simple class representing the library's iterators.\n */\n\n/**\n * Iterator class.\n *\n * @constructor\n * @param {function} next - Next function.\n */\nfunction Iterator(next) {\n  if (typeof next !== 'function')\n    throw new Error('obliterator/iterator: expecting a function!');\n\n  this.next = next;\n}\n\n/**\n * If symbols are supported, we add `next` to `Symbol.iterator`.\n */\nif (typeof Symbol !== 'undefined')\n  Iterator.prototype[Symbol.iterator] = function () {\n    return this;\n  };\n\n/**\n * Returning an iterator of the given values.\n *\n * @param  {any...} values - Values.\n * @return {Iterator}\n */\nIterator.of = function () {\n  var args = arguments,\n    l = args.length,\n    i = 0;\n\n  return new Iterator(function () {\n    if (i >= l) return {done: true};\n\n    return {done: false, value: args[i++]};\n  });\n};\n\n/**\n * Returning an empty iterator.\n *\n * @return {Iterator}\n */\nIterator.empty = function () {\n  var iterator = new Iterator(function () {\n    return {done: true};\n  });\n\n  return iterator;\n};\n\n/**\n * Returning an iterator over the given indexed sequence.\n *\n * @param  {string|Array} sequence - Target sequence.\n * @return {Iterator}\n */\nIterator.fromSequence = function (sequence) {\n  var i = 0,\n    l = sequence.length;\n\n  return new Iterator(function () {\n    if (i >= l) return {done: true};\n\n    return {done: false, value: sequence[i++]};\n  });\n};\n\n/**\n * Returning whether the given value is an iterator.\n *\n * @param  {any} value - Value.\n * @return {boolean}\n */\nIterator.is = function (value) {\n  if (value instanceof Iterator) return true;\n\n  return (\n    typeof value === 'object' &&\n    value !== null &&\n    typeof value.next === 'function'\n  );\n};\n\n/**\n * Exporting.\n */\nmodule.exports = Iterator;\n","exports.ARRAY_BUFFER_SUPPORT = typeof ArrayBuffer !== 'undefined';\nexports.SYMBOL_SUPPORT = typeof Symbol !== 'undefined';\n","/**\n * Obliterator Iter Function\n * ==========================\n *\n * Function coercing values to an iterator. It can be quite useful when needing\n * to handle iterables and iterators the same way.\n */\nvar Iterator = require('./iterator.js');\nvar support = require('./support.js');\n\nvar ARRAY_BUFFER_SUPPORT = support.ARRAY_BUFFER_SUPPORT;\nvar SYMBOL_SUPPORT = support.SYMBOL_SUPPORT;\n\nfunction iterOrNull(target) {\n  // Indexed sequence\n  if (\n    typeof target === 'string' ||\n    Array.isArray(target) ||\n    (ARRAY_BUFFER_SUPPORT && ArrayBuffer.isView(target))\n  )\n    return Iterator.fromSequence(target);\n\n  // Invalid value\n  if (typeof target !== 'object' || target === null) return null;\n\n  // Iterable\n  if (SYMBOL_SUPPORT && typeof target[Symbol.iterator] === 'function')\n    return target[Symbol.iterator]();\n\n  // Iterator duck-typing\n  if (typeof target.next === 'function') return target;\n\n  // Invalid object\n  return null;\n}\n\nmodule.exports = function iter(target) {\n  var iterator = iterOrNull(target);\n\n  if (!iterator)\n    throw new Error(\n      'obliterator: target is not iterable nor a valid iterator.'\n    );\n\n  return iterator;\n};\n","/* eslint no-constant-condition: 0 */\n/**\n * Obliterator Take Function\n * ==========================\n *\n * Function taking n or every value of the given iterator and returns them\n * into an array.\n */\nvar iter = require('./iter.js');\n\n/**\n * Take.\n *\n * @param  {Iterable} iterable - Target iterable.\n * @param  {number}   [n]      - Optional number of items to take.\n * @return {array}\n */\nmodule.exports = function take(iterable, n) {\n  var l = arguments.length > 1 ? n : Infinity,\n    array = l !== Infinity ? new Array(l) : [],\n    step,\n    i = 0;\n\n  var iterator = iter(iterable);\n\n  while (true) {\n    if (i === l) return array;\n\n    step = iterator.next();\n\n    if (step.done) {\n      if (i !== n) array.length = i;\n\n      return array;\n    }\n\n    array[i++] = step.value;\n  }\n};\n","/**\n * Graphology Custom Errors\n * =========================\n *\n * Defining custom errors for ease of use & easy unit tests across\n * implementations (normalized typology rather than relying on error\n * messages to check whether the correct error was found).\n */\nexport class GraphError extends Error {\n  constructor(message) {\n    super();\n    this.name = 'GraphError';\n    this.message = message;\n  }\n}\n\nexport class InvalidArgumentsGraphError extends GraphError {\n  constructor(message) {\n    super(message);\n    this.name = 'InvalidArgumentsGraphError';\n\n    // This is V8 specific to enhance stack readability\n    if (typeof Error.captureStackTrace === 'function')\n      Error.captureStackTrace(\n        this,\n        InvalidArgumentsGraphError.prototype.constructor\n      );\n  }\n}\n\nexport class NotFoundGraphError extends GraphError {\n  constructor(message) {\n    super(message);\n    this.name = 'NotFoundGraphError';\n\n    // This is V8 specific to enhance stack readability\n    if (typeof Error.captureStackTrace === 'function')\n      Error.captureStackTrace(this, NotFoundGraphError.prototype.constructor);\n  }\n}\n\nexport class UsageGraphError extends GraphError {\n  constructor(message) {\n    super(message);\n    this.name = 'UsageGraphError';\n\n    // This is V8 specific to enhance stack readability\n    if (typeof Error.captureStackTrace === 'function')\n      Error.captureStackTrace(this, UsageGraphError.prototype.constructor);\n  }\n}\n","/**\n * Graphology Internal Data Classes\n * =================================\n *\n * Internal classes hopefully reduced to structs by engines & storing\n * necessary information for nodes & edges.\n *\n * Note that those classes don't rely on the `class` keyword to avoid some\n * cruft introduced by most of ES2015 transpilers.\n */\n\n/**\n * MixedNodeData class.\n *\n * @constructor\n * @param {string} string     - The node's key.\n * @param {object} attributes - Node's attributes.\n */\nexport function MixedNodeData(key, attributes) {\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n\n  this.clear();\n}\n\nMixedNodeData.prototype.clear = function () {\n  // Degrees\n  this.inDegree = 0;\n  this.outDegree = 0;\n  this.undirectedDegree = 0;\n  this.directedSelfLoops = 0;\n  this.undirectedSelfLoops = 0;\n\n  // Indices\n  this.in = {};\n  this.out = {};\n  this.undirected = {};\n};\n\n/**\n * DirectedNodeData class.\n *\n * @constructor\n * @param {string} string     - The node's key.\n * @param {object} attributes - Node's attributes.\n */\nexport function DirectedNodeData(key, attributes) {\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n\n  this.clear();\n}\n\nDirectedNodeData.prototype.clear = function () {\n  // Degrees\n  this.inDegree = 0;\n  this.outDegree = 0;\n  this.directedSelfLoops = 0;\n\n  // Indices\n  this.in = {};\n  this.out = {};\n};\n\nDirectedNodeData.prototype.upgradeToMixed = function () {\n  // Degrees\n  this.undirectedDegree = 0;\n  this.undirectedSelfLoops = 0;\n\n  // Indices\n  this.undirected = {};\n};\n\n/**\n * UndirectedNodeData class.\n *\n * @constructor\n * @param {string} string     - The node's key.\n * @param {object} attributes - Node's attributes.\n */\nexport function UndirectedNodeData(key, attributes) {\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n\n  this.clear();\n}\n\nUndirectedNodeData.prototype.clear = function () {\n  // Degrees\n  this.undirectedDegree = 0;\n  this.undirectedSelfLoops = 0;\n\n  // Indices\n  this.undirected = {};\n};\n\nUndirectedNodeData.prototype.upgradeToMixed = function () {\n  // Degrees\n  this.inDegree = 0;\n  this.outDegree = 0;\n  this.directedSelfLoops = 0;\n\n  // Indices\n  this.in = {};\n  this.out = {};\n};\n\n/**\n * EdgeData class.\n *\n * @constructor\n * @param {boolean} undirected   - Whether the edge is undirected.\n * @param {string}  string       - The edge's key.\n * @param {string}  source       - Source of the edge.\n * @param {string}  target       - Target of the edge.\n * @param {object}  attributes   - Edge's attributes.\n */\nexport function EdgeData(undirected, key, source, target, attributes) {\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n  this.undirected = undirected;\n\n  // Extremities\n  this.source = source;\n  this.target = target;\n}\n","/**\n * Graphology Indexes Functions\n * =============================\n *\n * Bunch of functions used to compute or clear indexes.\n */\n\n/**\n * Function updating the 'structure' index with the given edge's data.\n * Note that in the case of the multi graph, related edges are stored in a\n * set that is the same for A -> B & B <- A.\n *\n * @param {Graph}    graph      - Target Graph instance.\n * @param {EdgeData} edgeData   - Added edge's data.\n * @param {NodeData} sourceData - Source node's data.\n * @param {NodeData} targetData - Target node's data.\n */\nexport function updateStructureIndex(\n  graph,\n  undirected,\n  edgeData,\n  source,\n  target,\n  sourceData,\n  targetData\n) {\n  const multi = graph.multi;\n\n  let outKey = 'out';\n  let inKey = 'in';\n\n  if (undirected) outKey = inKey = 'undirected';\n\n  let adj, container;\n\n  if (multi) {\n    // Handling source\n    adj = sourceData[outKey];\n    container = adj[target];\n\n    if (typeof container === 'undefined') {\n      container = new Set();\n      adj[target] = container;\n    }\n\n    container.add(edgeData);\n\n    // If selfLoop, we break here\n    if (source === target && undirected) return;\n\n    // Handling target (we won't add the edge because it was already taken\n    // care of with source above)\n    adj = targetData[inKey];\n    if (typeof adj[source] === 'undefined') adj[source] = container;\n  } else {\n    // Handling source\n    sourceData[outKey][target] = edgeData;\n\n    // If selfLoop, we break here\n    if (source === target && undirected) return;\n\n    // Handling target\n    targetData[inKey][source] = edgeData;\n  }\n}\n\n/**\n * Function clearing the 'structure' index data related to the given edge.\n *\n * @param {Graph}    graph    - Target Graph instance.\n * @param {EdgeData} edgeData - Dropped edge's data.\n */\nexport function clearEdgeFromStructureIndex(graph, undirected, edgeData) {\n  const multi = graph.multi;\n\n  const {source: sourceData, target: targetData} = edgeData;\n\n  const source = sourceData.key,\n    target = targetData.key;\n\n  // NOTE: since the edge set is the same for source & target, we can only\n  // affect source\n  const outKey = undirected ? 'undirected' : 'out',\n    sourceIndex = sourceData[outKey];\n\n  const inKey = undirected ? 'undirected' : 'in';\n\n  if (target in sourceIndex) {\n    if (multi) {\n      const set = sourceIndex[target];\n\n      if (set.size === 1) {\n        delete sourceIndex[target];\n        delete targetData[inKey][source];\n      } else {\n        set.delete(edgeData);\n      }\n    } else delete sourceIndex[target];\n  }\n\n  if (multi) return;\n\n  const targetIndex = targetData[inKey];\n\n  delete targetIndex[source];\n}\n\n/**\n * Function clearing the whole 'structure' index.\n *\n * @param {Graph} graph - Target Graph instance.\n */\nexport function clearStructureIndex(graph) {\n  const iterator = graph._nodes.values();\n\n  let step;\n\n  while (((step = iterator.next()), step.done !== true)) {\n    step.value.clear();\n  }\n}\n\n/**\n * Function used to upgrade a simple `structure` index to a multi on.\n *\n * @param {Graph}  graph - Target Graph instance.\n */\nexport function upgradeStructureIndexToMulti(graph) {\n  graph._nodes.forEach((data, node) => {\n    // Directed\n    if (data.out) {\n      for (const neighbor in data.out) {\n        const edges = new Set();\n        edges.add(data.out[neighbor]);\n        data.out[neighbor] = edges;\n        graph._nodes.get(neighbor).in[node] = edges;\n      }\n    }\n\n    // Undirected\n    if (data.undirected) {\n      for (const neighbor in data.undirected) {\n        if (neighbor > node) continue;\n\n        const edges = new Set();\n        edges.add(data.undirected[neighbor]);\n        data.undirected[neighbor] = edges;\n        graph._nodes.get(neighbor).undirected[node] = edges;\n      }\n    }\n  });\n}\n","/**\n * Graphology Attributes methods\n * ==============================\n *\n * Attributes-related methods being exactly the same for nodes & edges,\n * we abstract them here for factorization reasons.\n */\nimport {assign, isPlainObject, getMatchingEdge} from './utils';\n\nimport {\n  InvalidArgumentsGraphError,\n  NotFoundGraphError,\n  UsageGraphError\n} from './errors';\n\n/**\n * Attach an attribute getter method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachAttributeGetter(Class, method, type) {\n  /**\n   * Get the desired attribute for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   *\n   * @return {mixed}          - The attribute's value.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + name;\n\n      name = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (type !== 'mixed' && data.undirected !== (type === 'undirected'))\n      throw new NotFoundGraphError(\n        `Graph.${method}: could not find the \"${element}\" ${type} edge in the graph.`\n      );\n\n    return data.attributes[name];\n  };\n}\n\n/**\n * Attach an attributes getter method onto the provided class.\n *\n * @param {function} Class       - Target class.\n * @param {string}   method      - Method name.\n * @param {string}   type        - Type of the edge to find.\n */\nfunction attachAttributesGetter(Class, method, type) {\n  /**\n   * Retrieves all the target element's attributes.\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   *\n   * @return {object}          - The element's attributes.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 1) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + arguments[1];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (type !== 'mixed' && data.undirected !== (type === 'undirected'))\n      throw new NotFoundGraphError(\n        `Graph.${method}: could not find the \"${element}\" ${type} edge in the graph.`\n      );\n\n    return data.attributes;\n  };\n}\n\n/**\n * Attach an attribute checker method onto the provided class.\n *\n * @param {function} Class       - Target class.\n * @param {string}   method      - Method name.\n * @param {string}   type        - Type of the edge to find.\n */\nfunction attachAttributeChecker(Class, method, type) {\n  /**\n   * Checks whether the desired attribute is set for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + name;\n\n      name = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (type !== 'mixed' && data.undirected !== (type === 'undirected'))\n      throw new NotFoundGraphError(\n        `Graph.${method}: could not find the \"${element}\" ${type} edge in the graph.`\n      );\n\n    return data.attributes.hasOwnProperty(name);\n  };\n}\n\n/**\n * Attach an attribute setter method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachAttributeSetter(Class, method, type) {\n  /**\n   * Set the desired attribute for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   * @param  {mixed}  value   - New attribute value.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   * @param  {mixed}  value   - New attribute value.\n   *\n   * @return {Graph}          - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name, value) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 3) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + name;\n\n      name = arguments[2];\n      value = arguments[3];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (type !== 'mixed' && data.undirected !== (type === 'undirected'))\n      throw new NotFoundGraphError(\n        `Graph.${method}: could not find the \"${element}\" ${type} edge in the graph.`\n      );\n\n    data.attributes[name] = value;\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute updater method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachAttributeUpdater(Class, method, type) {\n  /**\n   * Update the desired attribute for the given element (node or edge) using\n   * the provided function.\n   *\n   * Arity 2:\n   * @param  {any}      element - Target element.\n   * @param  {string}   name    - Attribute's name.\n   * @param  {function} updater - Updater function.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}      source  - Source element.\n   * @param  {any}      target  - Target element.\n   * @param  {string}   name    - Attribute's name.\n   * @param  {function} updater - Updater function.\n   *\n   * @return {Graph}            - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name, updater) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 3) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + name;\n\n      name = arguments[2];\n      updater = arguments[3];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: updater should be a function.`\n      );\n\n    if (type !== 'mixed' && data.undirected !== (type === 'undirected'))\n      throw new NotFoundGraphError(\n        `Graph.${method}: could not find the \"${element}\" ${type} edge in the graph.`\n      );\n\n    data.attributes[name] = updater(data.attributes[name]);\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute remover method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachAttributeRemover(Class, method, type) {\n  /**\n   * Remove the desired attribute for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   *\n   * @return {Graph}          - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + name;\n\n      name = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (type !== 'mixed' && data.undirected !== (type === 'undirected'))\n      throw new NotFoundGraphError(\n        `Graph.${method}: could not find the \"${element}\" ${type} edge in the graph.`\n      );\n\n    delete data.attributes[name];\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'remove',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute replacer method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachAttributesReplacer(Class, method, type) {\n  /**\n   * Replace the attributes for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element    - Target element.\n   * @param  {object} attributes - New attributes.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source     - Source element.\n   * @param  {any}     target     - Target element.\n   * @param  {object}  attributes - New attributes.\n   *\n   * @return {Graph}              - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, attributes) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + attributes;\n\n      attributes = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided attributes are not a plain object.`\n      );\n\n    if (type !== 'mixed' && data.undirected !== (type === 'undirected'))\n      throw new NotFoundGraphError(\n        `Graph.${method}: could not find the \"${element}\" ${type} edge in the graph.`\n      );\n\n    data.attributes = attributes;\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'replace',\n      attributes: data.attributes\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute merger method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachAttributesMerger(Class, method, type) {\n  /**\n   * Replace the attributes for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element    - Target element.\n   * @param  {object} attributes - Attributes to merge.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source     - Source element.\n   * @param  {any}     target     - Target element.\n   * @param  {object}  attributes - Attributes to merge.\n   *\n   * @return {Graph}              - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, attributes) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + attributes;\n\n      attributes = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided attributes are not a plain object.`\n      );\n\n    if (type !== 'mixed' && data.undirected !== (type === 'undirected'))\n      throw new NotFoundGraphError(\n        `Graph.${method}: could not find the \"${element}\" ${type} edge in the graph.`\n      );\n\n    assign(data.attributes, attributes);\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'merge',\n      attributes: data.attributes,\n      data: attributes\n    });\n\n    return this;\n  };\n}\n\n/**\n * List of methods to attach.\n */\nconst ATTRIBUTES_METHODS = [\n  {\n    name: element => `get${element}Attribute`,\n    attacher: attachAttributeGetter\n  },\n  {\n    name: element => `get${element}Attributes`,\n    attacher: attachAttributesGetter\n  },\n  {\n    name: element => `has${element}Attribute`,\n    attacher: attachAttributeChecker\n  },\n  {\n    name: element => `set${element}Attribute`,\n    attacher: attachAttributeSetter\n  },\n  {\n    name: element => `update${element}Attribute`,\n    attacher: attachAttributeUpdater\n  },\n  {\n    name: element => `remove${element}Attribute`,\n    attacher: attachAttributeRemover\n  },\n  {\n    name: element => `replace${element}Attributes`,\n    attacher: attachAttributesReplacer\n  },\n  {\n    name: element => `merge${element}Attributes`,\n    attacher: attachAttributesMerger\n  }\n];\n\n/**\n * Attach every attributes-related methods to a Graph class.\n *\n * @param {function} Graph - Target class.\n */\nexport function attachAttributesMethods(Graph) {\n  ATTRIBUTES_METHODS.forEach(function ({name, attacher}) {\n    // For edges\n    attacher(Graph, name('Edge'), 'mixed');\n\n    // For directed edges\n    attacher(Graph, name('DirectedEdge'), 'directed');\n\n    // For undirected edges\n    attacher(Graph, name('UndirectedEdge'), 'undirected');\n  });\n}\n","/**\n * Obliterator Chain Function\n * ===========================\n *\n * Variadic function combining the given iterables.\n */\nvar Iterator = require('./iterator.js'),\n  iter = require('./iter.js');\n\n/**\n * Chain.\n *\n * @param  {...Iterator} iterables - Target iterables.\n * @return {Iterator}\n */\nmodule.exports = function chain() {\n  var iterables = arguments,\n    current,\n    i = -1;\n\n  return new Iterator(function iterate() {\n    if (!current) {\n      i++;\n\n      if (i >= iterables.length) return {done: true};\n\n      current = iter(iterables[i]);\n    }\n\n    var step = current.next();\n\n    if (step.done) {\n      current = null;\n      return iterate();\n    }\n\n    return step;\n  });\n};\n","/**\n * Graphology Edge Iteration\n * ==========================\n *\n * Attaching some methods to the Graph class to be able to iterate over a\n * graph's edges.\n */\nimport Iterator from 'obliterator/iterator';\nimport chain from 'obliterator/chain';\nimport take from 'obliterator/take';\n\nimport {InvalidArgumentsGraphError, NotFoundGraphError} from '../errors';\n\n/**\n * Definitions.\n */\nconst EDGES_ITERATION = [\n  {\n    name: 'edges',\n    type: 'mixed'\n  },\n  {\n    name: 'inEdges',\n    type: 'directed',\n    direction: 'in'\n  },\n  {\n    name: 'outEdges',\n    type: 'directed',\n    direction: 'out'\n  },\n  {\n    name: 'inboundEdges',\n    type: 'mixed',\n    direction: 'in'\n  },\n  {\n    name: 'outboundEdges',\n    type: 'mixed',\n    direction: 'out'\n  },\n  {\n    name: 'directedEdges',\n    type: 'directed'\n  },\n  {\n    name: 'undirectedEdges',\n    type: 'undirected'\n  }\n];\n\n/**\n * Function collecting edges from the given object.\n *\n * @param  {array}  edges  - Edges array to populate.\n * @param  {object} object - Target object.\n * @return {array}         - The found edges.\n */\nfunction collectSimple(edges, object) {\n  for (const k in object) edges.push(object[k].key);\n}\n\nfunction collectMulti(edges, object) {\n  for (const k in object)\n    object[k].forEach(edgeData => edges.push(edgeData.key));\n}\n\n/**\n * Function iterating over edges from the given object using a callback.\n *\n * @param {object}   object   - Target object.\n * @param {function} callback - Function to call.\n */\nfunction forEachSimple(object, callback, avoid) {\n  for (const k in object) {\n    if (k === avoid) continue;\n\n    const edgeData = object[k];\n\n    callback(\n      edgeData.key,\n      edgeData.attributes,\n      edgeData.source.key,\n      edgeData.target.key,\n      edgeData.source.attributes,\n      edgeData.target.attributes,\n      edgeData.undirected\n    );\n  }\n}\n\nfunction forEachMulti(object, callback, avoid) {\n  for (const k in object) {\n    if (k === avoid) continue;\n\n    object[k].forEach(edgeData =>\n      callback(\n        edgeData.key,\n        edgeData.attributes,\n        edgeData.source.key,\n        edgeData.target.key,\n        edgeData.source.attributes,\n        edgeData.target.attributes,\n        edgeData.undirected\n      )\n    );\n  }\n}\n\n/**\n * Function iterating over edges from the given object to match one of them.\n *\n * @param {object}   object   - Target object.\n * @param {function} callback - Function to call.\n */\nfunction findSimple(object, callback, avoid) {\n  let shouldBreak = false;\n\n  for (const k in object) {\n    if (k === avoid) continue;\n\n    const edgeData = object[k];\n\n    shouldBreak = callback(\n      edgeData.key,\n      edgeData.attributes,\n      edgeData.source.key,\n      edgeData.target.key,\n      edgeData.source.attributes,\n      edgeData.target.attributes,\n      edgeData.undirected\n    );\n\n    if (shouldBreak) return edgeData.key;\n  }\n\n  return;\n}\n\nfunction findMulti(object, callback, avoid) {\n  let iterator, step, edgeData, source, target;\n\n  let shouldBreak = false;\n\n  for (const k in object) {\n    if (k === avoid) continue;\n\n    iterator = object[k].values();\n\n    while (((step = iterator.next()), step.done !== true)) {\n      edgeData = step.value;\n      source = edgeData.source;\n      target = edgeData.target;\n\n      shouldBreak = callback(\n        edgeData.key,\n        edgeData.attributes,\n        source.key,\n        target.key,\n        source.attributes,\n        target.attributes,\n        edgeData.undirected\n      );\n\n      if (shouldBreak) return edgeData.key;\n    }\n  }\n\n  return;\n}\n\n/**\n * Function returning an iterator over edges from the given object.\n *\n * @param  {object}   object - Target object.\n * @return {Iterator}\n */\nfunction createIterator(object, avoid) {\n  const keys = Object.keys(object),\n    l = keys.length;\n\n  let inner = null,\n    i = 0;\n\n  return new Iterator(function next() {\n    let edgeData;\n\n    if (inner) {\n      const step = inner.next();\n\n      if (step.done) {\n        inner = null;\n        i++;\n        return next();\n      }\n\n      edgeData = step.value;\n    } else {\n      if (i >= l) return {done: true};\n\n      const k = keys[i];\n\n      if (k === avoid) {\n        i++;\n        return next();\n      }\n\n      edgeData = object[k];\n\n      if (edgeData instanceof Set) {\n        inner = edgeData.values();\n        return next();\n      }\n\n      i++;\n    }\n\n    return {\n      done: false,\n      value: {\n        edge: edgeData.key,\n        attributes: edgeData.attributes,\n        source: edgeData.source.key,\n        target: edgeData.target.key,\n        sourceAttributes: edgeData.source.attributes,\n        targetAttributes: edgeData.target.attributes,\n        undirected: edgeData.undirected\n      }\n    };\n  });\n}\n\n/**\n * Function collecting edges from the given object at given key.\n *\n * @param  {array}  edges  - Edges array to populate.\n * @param  {object} object - Target object.\n * @param  {mixed}  k      - Neighbor key.\n * @return {array}         - The found edges.\n */\nfunction collectForKeySimple(edges, object, k) {\n  const edgeData = object[k];\n\n  if (!edgeData) return;\n\n  edges.push(edgeData.key);\n}\n\nfunction collectForKeyMulti(edges, object, k) {\n  const edgesData = object[k];\n\n  if (!edgesData) return;\n\n  edgesData.forEach(edgeData => edges.push(edgeData.key));\n}\n\n/**\n * Function iterating over the egdes from the object at given key using\n * a callback.\n *\n * @param {object}   object   - Target object.\n * @param {mixed}    k        - Neighbor key.\n * @param {function} callback - Callback to use.\n */\nfunction forEachForKeySimple(object, k, callback) {\n  const edgeData = object[k];\n\n  if (!edgeData) return;\n\n  const sourceData = edgeData.source;\n  const targetData = edgeData.target;\n\n  callback(\n    edgeData.key,\n    edgeData.attributes,\n    sourceData.key,\n    targetData.key,\n    sourceData.attributes,\n    targetData.attributes,\n    edgeData.undirected\n  );\n}\n\nfunction forEachForKeyMulti(object, k, callback) {\n  const edgesData = object[k];\n\n  if (!edgesData) return;\n\n  edgesData.forEach(edgeData =>\n    callback(\n      edgeData.key,\n      edgeData.attributes,\n      edgeData.source.key,\n      edgeData.target.key,\n      edgeData.source.attributes,\n      edgeData.target.attributes,\n      edgeData.undirected\n    )\n  );\n}\n\n/**\n * Function iterating over the egdes from the object at given key to match\n * one of them.\n *\n * @param {object}   object   - Target object.\n * @param {mixed}    k        - Neighbor key.\n * @param {function} callback - Callback to use.\n */\nfunction findForKeySimple(object, k, callback) {\n  const edgeData = object[k];\n\n  if (!edgeData) return;\n\n  const sourceData = edgeData.source;\n  const targetData = edgeData.target;\n\n  if (\n    callback(\n      edgeData.key,\n      edgeData.attributes,\n      sourceData.key,\n      targetData.key,\n      sourceData.attributes,\n      targetData.attributes,\n      edgeData.undirected\n    )\n  )\n    return edgeData.key;\n}\n\nfunction findForKeyMulti(object, k, callback) {\n  const edgesData = object[k];\n\n  if (!edgesData) return;\n\n  let shouldBreak = false;\n\n  const iterator = edgesData.values();\n  let step, edgeData;\n\n  while (((step = iterator.next()), step.done !== true)) {\n    edgeData = step.value;\n\n    shouldBreak = callback(\n      edgeData.key,\n      edgeData.attributes,\n      edgeData.source.key,\n      edgeData.target.key,\n      edgeData.source.attributes,\n      edgeData.target.attributes,\n      edgeData.undirected\n    );\n\n    if (shouldBreak) return edgeData.key;\n  }\n\n  return;\n}\n\n/**\n * Function returning an iterator over the egdes from the object at given key.\n *\n * @param  {object}   object   - Target object.\n * @param  {mixed}    k        - Neighbor key.\n * @return {Iterator}\n */\nfunction createIteratorForKey(object, k) {\n  const v = object[k];\n\n  if (v instanceof Set) {\n    const iterator = v.values();\n\n    return new Iterator(function () {\n      const step = iterator.next();\n\n      if (step.done) return step;\n\n      const edgeData = step.value;\n\n      return {\n        done: false,\n        value: {\n          edge: edgeData.key,\n          attributes: edgeData.attributes,\n          source: edgeData.source.key,\n          target: edgeData.target.key,\n          sourceAttributes: edgeData.source.attributes,\n          targetAttributes: edgeData.target.attributes,\n          undirected: edgeData.undirected\n        }\n      };\n    });\n  }\n\n  return Iterator.of([\n    v.key,\n    v.attributes,\n    v.source.key,\n    v.target.key,\n    v.source.attributes,\n    v.target.attributes\n  ]);\n}\n\n/**\n * Function creating an array of edges for the given type.\n *\n * @param  {Graph}   graph - Target Graph instance.\n * @param  {string}  type  - Type of edges to retrieve.\n * @return {array}         - Array of edges.\n */\nfunction createEdgeArray(graph, type) {\n  if (graph.size === 0) return [];\n\n  if (type === 'mixed' || type === graph.type) {\n    if (typeof Array.from === 'function')\n      return Array.from(graph._edges.keys());\n\n    return take(graph._edges.keys(), graph._edges.size);\n  }\n\n  const size =\n    type === 'undirected' ? graph.undirectedSize : graph.directedSize;\n\n  const list = new Array(size),\n    mask = type === 'undirected';\n\n  const iterator = graph._edges.values();\n\n  let i = 0;\n  let step, data;\n\n  while (((step = iterator.next()), step.done !== true)) {\n    data = step.value;\n\n    if (data.undirected === mask) list[i++] = data.key;\n  }\n\n  return list;\n}\n\n/**\n * Function iterating over a graph's edges using a callback.\n *\n * @param  {Graph}    graph    - Target Graph instance.\n * @param  {string}   type     - Type of edges to retrieve.\n * @param  {function} callback - Function to call.\n */\nfunction forEachEdge(graph, type, callback) {\n  if (graph.size === 0) return;\n\n  const shouldFilter = type !== 'mixed' && type !== graph.type;\n  const mask = type === 'undirected';\n\n  let step, data;\n  const iterator = graph._edges.values();\n\n  while (((step = iterator.next()), step.done !== true)) {\n    data = step.value;\n\n    if (shouldFilter && data.undirected !== mask) continue;\n\n    const {key, attributes, source, target} = data;\n\n    callback(\n      key,\n      attributes,\n      source.key,\n      target.key,\n      source.attributes,\n      target.attributes,\n      data.undirected\n    );\n  }\n}\n\n/**\n * Function iterating over a graph's edges using a callback to match one of\n * them.\n *\n * @param  {Graph}    graph    - Target Graph instance.\n * @param  {string}   type     - Type of edges to retrieve.\n * @param  {function} callback - Function to call.\n */\nfunction findEdge(graph, type, callback) {\n  if (graph.size === 0) return;\n\n  const shouldFilter = type !== 'mixed' && type !== graph.type;\n  const mask = type === 'undirected';\n\n  let step, data;\n  let shouldBreak = false;\n  const iterator = graph._edges.values();\n\n  while (((step = iterator.next()), step.done !== true)) {\n    data = step.value;\n\n    if (shouldFilter && data.undirected !== mask) continue;\n\n    const {key, attributes, source, target} = data;\n\n    shouldBreak = callback(\n      key,\n      attributes,\n      source.key,\n      target.key,\n      source.attributes,\n      target.attributes,\n      data.undirected\n    );\n\n    if (shouldBreak) return key;\n  }\n\n  return;\n}\n\n/**\n * Function creating an iterator of edges for the given type.\n *\n * @param  {Graph}    graph - Target Graph instance.\n * @param  {string}   type  - Type of edges to retrieve.\n * @return {Iterator}\n */\nfunction createEdgeIterator(graph, type) {\n  if (graph.size === 0) return Iterator.empty();\n\n  const shouldFilter = type !== 'mixed' && type !== graph.type;\n  const mask = type === 'undirected';\n\n  const iterator = graph._edges.values();\n\n  return new Iterator(function next() {\n    let step, data;\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      step = iterator.next();\n\n      if (step.done) return step;\n\n      data = step.value;\n\n      if (shouldFilter && data.undirected !== mask) continue;\n\n      break;\n    }\n\n    const value = {\n      edge: data.key,\n      attributes: data.attributes,\n      source: data.source.key,\n      target: data.target.key,\n      sourceAttributes: data.source.attributes,\n      targetAttributes: data.target.attributes,\n      undirected: data.undirected\n    };\n\n    return {value, done: false};\n  });\n}\n\n/**\n * Function creating an array of edges for the given type & the given node.\n *\n * @param  {boolean} multi     - Whether the graph is multi or not.\n * @param  {string}  type      - Type of edges to retrieve.\n * @param  {string}  direction - In or out?\n * @param  {any}     nodeData  - Target node's data.\n * @return {array}             - Array of edges.\n */\nfunction createEdgeArrayForNode(multi, type, direction, nodeData) {\n  const edges = [];\n\n  const fn = multi ? collectMulti : collectSimple;\n\n  if (type !== 'undirected') {\n    if (direction !== 'out') fn(edges, nodeData.in);\n    if (direction !== 'in') fn(edges, nodeData.out);\n\n    // Handling self loop edge case\n    if (!direction && nodeData.directedSelfLoops > 0)\n      edges.splice(edges.lastIndexOf(nodeData.key), 1);\n  }\n\n  if (type !== 'directed') {\n    fn(edges, nodeData.undirected);\n  }\n\n  return edges;\n}\n\n/**\n * Function iterating over a node's edges using a callback.\n *\n * @param  {boolean}  multi     - Whether the graph is multi or not.\n * @param  {string}   type      - Type of edges to retrieve.\n * @param  {string}   direction - In or out?\n * @param  {any}      nodeData  - Target node's data.\n * @param  {function} callback  - Function to call.\n */\nfunction forEachEdgeForNode(multi, type, direction, nodeData, callback) {\n  const fn = multi ? forEachMulti : forEachSimple;\n\n  if (type !== 'undirected') {\n    if (direction !== 'out') fn(nodeData.in, callback);\n    if (direction !== 'in')\n      fn(nodeData.out, callback, !direction ? nodeData.key : null);\n  }\n\n  if (type !== 'directed') {\n    fn(nodeData.undirected, callback);\n  }\n}\n\n/**\n * Function iterating over a node's edges using a callback to match one of them.\n *\n * @param  {boolean}  multi     - Whether the graph is multi or not.\n * @param  {string}   type      - Type of edges to retrieve.\n * @param  {string}   direction - In or out?\n * @param  {any}      nodeData  - Target node's data.\n * @param  {function} callback  - Function to call.\n */\nfunction findEdgeForNode(multi, type, direction, nodeData, callback) {\n  const fn = multi ? findMulti : findSimple;\n\n  let found;\n\n  if (type !== 'undirected') {\n    if (direction !== 'out') {\n      found = fn(nodeData.in, callback);\n\n      if (found) return found;\n    }\n    if (direction !== 'in') {\n      found = fn(nodeData.out, callback, !direction ? nodeData.key : null);\n\n      if (found) return found;\n    }\n  }\n\n  if (type !== 'directed') {\n    found = fn(nodeData.undirected, callback);\n\n    if (found) return found;\n  }\n\n  return;\n}\n\n/**\n * Function iterating over a node's edges using a callback.\n *\n * @param  {string}   type      - Type of edges to retrieve.\n * @param  {string}   direction - In or out?\n * @param  {any}      nodeData  - Target node's data.\n * @return {Iterator}\n */\nfunction createEdgeIteratorForNode(type, direction, nodeData) {\n  let iterator = Iterator.empty();\n\n  if (type !== 'undirected') {\n    if (direction !== 'out' && typeof nodeData.in !== 'undefined')\n      iterator = chain(iterator, createIterator(nodeData.in));\n    if (direction !== 'in' && typeof nodeData.out !== 'undefined')\n      iterator = chain(\n        iterator,\n        createIterator(nodeData.out, !direction ? nodeData.key : null)\n      );\n  }\n\n  if (type !== 'directed' && typeof nodeData.undirected !== 'undefined') {\n    iterator = chain(iterator, createIterator(nodeData.undirected));\n  }\n\n  return iterator;\n}\n\n/**\n * Function creating an array of edges for the given path.\n *\n * @param  {string}   type       - Type of edges to retrieve.\n * @param  {boolean}  multi      - Whether the graph is multi.\n * @param  {string}   direction  - In or out?\n * @param  {NodeData} sourceData - Source node's data.\n * @param  {any}      target     - Target node.\n * @return {array}               - Array of edges.\n */\nfunction createEdgeArrayForPath(type, multi, direction, sourceData, target) {\n  const fn = multi ? collectForKeyMulti : collectForKeySimple;\n\n  const edges = [];\n\n  if (type !== 'undirected') {\n    if (typeof sourceData.in !== 'undefined' && direction !== 'out')\n      fn(edges, sourceData.in, target);\n\n    if (typeof sourceData.out !== 'undefined' && direction !== 'in')\n      fn(edges, sourceData.out, target);\n\n    // Handling self loop edge case\n    if (!direction && sourceData.directedSelfLoops > 0)\n      edges.splice(edges.lastIndexOf(sourceData.key), 1);\n  }\n\n  if (type !== 'directed') {\n    if (typeof sourceData.undirected !== 'undefined')\n      fn(edges, sourceData.undirected, target);\n  }\n\n  return edges;\n}\n\n/**\n * Function iterating over edges for the given path using a callback.\n *\n * @param  {string}   type       - Type of edges to retrieve.\n * @param  {boolean}  multi      - Whether the graph is multi.\n * @param  {string}   direction  - In or out?\n * @param  {NodeData} sourceData - Source node's data.\n * @param  {string}   target     - Target node.\n * @param  {function} callback   - Function to call.\n */\nfunction forEachEdgeForPath(\n  type,\n  multi,\n  direction,\n  sourceData,\n  target,\n  callback\n) {\n  const fn = multi ? forEachForKeyMulti : forEachForKeySimple;\n\n  if (type !== 'undirected') {\n    if (typeof sourceData.in !== 'undefined' && direction !== 'out')\n      fn(sourceData.in, target, callback);\n\n    if (sourceData.key !== target)\n      if (typeof sourceData.out !== 'undefined' && direction !== 'in')\n        fn(sourceData.out, target, callback);\n  }\n\n  if (type !== 'directed') {\n    if (typeof sourceData.undirected !== 'undefined')\n      fn(sourceData.undirected, target, callback);\n  }\n}\n\n/**\n * Function iterating over edges for the given path using a callback to match\n * one of them.\n *\n * @param  {string}   type       - Type of edges to retrieve.\n * @param  {boolean}  multi      - Whether the graph is multi.\n * @param  {string}   direction  - In or out?\n * @param  {NodeData} sourceData - Source node's data.\n * @param  {string}   target     - Target node.\n * @param  {function} callback   - Function to call.\n */\nfunction findEdgeForPath(type, multi, direction, sourceData, target, callback) {\n  const fn = multi ? findForKeyMulti : findForKeySimple;\n\n  let found;\n\n  if (type !== 'undirected') {\n    if (typeof sourceData.in !== 'undefined' && direction !== 'out') {\n      found = fn(sourceData.in, target, callback);\n\n      if (found) return found;\n    }\n\n    if (sourceData.key !== target)\n      if (typeof sourceData.out !== 'undefined' && direction !== 'in') {\n        found = fn(\n          sourceData.out,\n          target,\n          callback,\n          !direction ? sourceData.key : null\n        );\n\n        if (found) return found;\n      }\n  }\n\n  if (type !== 'directed') {\n    if (typeof sourceData.undirected !== 'undefined') {\n      found = fn(sourceData.undirected, target, callback);\n\n      if (found) return found;\n    }\n  }\n\n  return;\n}\n\n/**\n * Function returning an iterator over edges for the given path.\n *\n * @param  {string}   type       - Type of edges to retrieve.\n * @param  {string}   direction  - In or out?\n * @param  {NodeData} sourceData - Source node's data.\n * @param  {string}   target     - Target node.\n * @param  {function} callback   - Function to call.\n */\nfunction createEdgeIteratorForPath(type, direction, sourceData, target) {\n  let iterator = Iterator.empty();\n\n  if (type !== 'undirected') {\n    if (\n      typeof sourceData.in !== 'undefined' &&\n      direction !== 'out' &&\n      target in sourceData.in\n    )\n      iterator = chain(iterator, createIteratorForKey(sourceData.in, target));\n\n    if (\n      typeof sourceData.out !== 'undefined' &&\n      direction !== 'in' &&\n      target in sourceData.out\n    )\n      iterator = chain(iterator, createIteratorForKey(sourceData.out, target));\n  }\n\n  if (type !== 'directed') {\n    if (\n      typeof sourceData.undirected !== 'undefined' &&\n      target in sourceData.undirected\n    )\n      iterator = chain(\n        iterator,\n        createIteratorForKey(sourceData.undirected, target)\n      );\n  }\n\n  return iterator;\n}\n\n/**\n * Function attaching an edge array creator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachEdgeArrayCreator(Class, description) {\n  const {name, type, direction} = description;\n\n  /**\n   * Function returning an array of certain edges.\n   *\n   * Arity 0: Return all the relevant edges.\n   *\n   * Arity 1: Return all of a node's relevant edges.\n   * @param  {any}   node   - Target node.\n   *\n   * Arity 2: Return the relevant edges across the given path.\n   * @param  {any}   source - Source node.\n   * @param  {any}   target - Target node.\n   *\n   * @return {array|number} - The edges or the number of edges.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[name] = function (source, target) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return [];\n\n    if (!arguments.length) return createEdgeArray(this, type);\n\n    if (arguments.length === 1) {\n      source = '' + source;\n\n      const nodeData = this._nodes.get(source);\n\n      if (typeof nodeData === 'undefined')\n        throw new NotFoundGraphError(\n          `Graph.${name}: could not find the \"${source}\" node in the graph.`\n        );\n\n      // Iterating over a node's edges\n      return createEdgeArrayForNode(\n        this.multi,\n        type === 'mixed' ? this.type : type,\n        direction,\n        nodeData\n      );\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${name}:  could not find the \"${source}\" source node in the graph.`\n        );\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(\n          `Graph.${name}:  could not find the \"${target}\" target node in the graph.`\n        );\n\n      // Iterating over the edges between source & target\n      return createEdgeArrayForPath(\n        type,\n        this.multi,\n        direction,\n        sourceData,\n        target\n      );\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.${name}: too many arguments (expecting 0, 1 or 2 and got ${arguments.length}).`\n    );\n  };\n}\n\n/**\n * Function attaching a edge callback iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachForEachEdge(Class, description) {\n  const {name, type, direction} = description;\n\n  const forEachName = 'forEach' + name[0].toUpperCase() + name.slice(1, -1);\n\n  /**\n   * Function iterating over the graph's relevant edges by applying the given\n   * callback.\n   *\n   * Arity 1: Iterate over all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Iterate over all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Iterate over the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[forEachName] = function (source, target, callback) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type) return;\n\n    if (arguments.length === 1) {\n      callback = source;\n      return forEachEdge(this, type, callback);\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      callback = target;\n\n      const nodeData = this._nodes.get(source);\n\n      if (typeof nodeData === 'undefined')\n        throw new NotFoundGraphError(\n          `Graph.${forEachName}: could not find the \"${source}\" node in the graph.`\n        );\n\n      // Iterating over a node's edges\n      // TODO: maybe attach the sub method to the instance dynamically?\n      return forEachEdgeForNode(\n        this.multi,\n        type === 'mixed' ? this.type : type,\n        direction,\n        nodeData,\n        callback\n      );\n    }\n\n    if (arguments.length === 3) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${forEachName}:  could not find the \"${source}\" source node in the graph.`\n        );\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(\n          `Graph.${forEachName}:  could not find the \"${target}\" target node in the graph.`\n        );\n\n      // Iterating over the edges between source & target\n      return forEachEdgeForPath(\n        type,\n        this.multi,\n        direction,\n        sourceData,\n        target,\n        callback\n      );\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.${forEachName}: too many arguments (expecting 1, 2 or 3 and got ${arguments.length}).`\n    );\n  };\n\n  /**\n   * Function mapping the graph's relevant edges by applying the given\n   * callback.\n   *\n   * Arity 1: Map all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Map all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Map the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const mapName = 'map' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[mapName] = function () {\n    const args = Array.prototype.slice.call(arguments);\n    const callback = args.pop();\n\n    let result;\n\n    // We know the result length beforehand\n    if (args.length === 0) {\n      let length = 0;\n\n      if (type !== 'directed') length += this.undirectedSize;\n      if (type !== 'undirected') length += this.directedSize;\n\n      result = new Array(length);\n\n      let i = 0;\n\n      args.push((e, ea, s, t, sa, ta, u) => {\n        result[i++] = callback(e, ea, s, t, sa, ta, u);\n      });\n    }\n\n    // We don't know the result length beforehand\n    // TODO: we can in some instances of simple graphs, knowing degree\n    else {\n      result = [];\n\n      args.push((e, ea, s, t, sa, ta, u) => {\n        result.push(callback(e, ea, s, t, sa, ta, u));\n      });\n    }\n\n    this[forEachName].apply(this, args);\n\n    return result;\n  };\n\n  /**\n   * Function filtering the graph's relevant edges using the provided predicate\n   * function.\n   *\n   * Arity 1: Filter all the relevant edges.\n   * @param  {function} predicate - Predicate to use.\n   *\n   * Arity 2: Filter all of a node's relevant edges.\n   * @param  {any}      node      - Target node.\n   * @param  {function} predicate - Predicate to use.\n   *\n   * Arity 3: Filter the relevant edges across the given path.\n   * @param  {any}      source    - Source node.\n   * @param  {any}      target    - Target node.\n   * @param  {function} predicate - Predicate to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const filterName = 'filter' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[filterName] = function () {\n    const args = Array.prototype.slice.call(arguments);\n    const callback = args.pop();\n\n    const result = [];\n\n    args.push((e, ea, s, t, sa, ta, u) => {\n      if (callback(e, ea, s, t, sa, ta, u)) result.push(e);\n    });\n\n    this[forEachName].apply(this, args);\n\n    return result;\n  };\n\n  /**\n   * Function reducing the graph's relevant edges using the provided accumulator\n   * function.\n   *\n   * Arity 1: Reduce all the relevant edges.\n   * @param  {function} accumulator  - Accumulator to use.\n   * @param  {any}      initialValue - Initial value.\n   *\n   * Arity 2: Reduce all of a node's relevant edges.\n   * @param  {any}      node         - Target node.\n   * @param  {function} accumulator  - Accumulator to use.\n   * @param  {any}      initialValue - Initial value.\n   *\n   * Arity 3: Reduce the relevant edges across the given path.\n   * @param  {any}      source       - Source node.\n   * @param  {any}      target       - Target node.\n   * @param  {function} accumulator  - Accumulator to use.\n   * @param  {any}      initialValue - Initial value.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const reduceName = 'reduce' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[reduceName] = function () {\n    let args = Array.prototype.slice.call(arguments);\n\n    if (args.length < 2 || args.length > 4) {\n      throw new InvalidArgumentsGraphError(\n        `Graph.${reduceName}: invalid number of arguments (expecting 2, 3 or 4 and got ${args.length}).`\n      );\n    }\n\n    if (\n      typeof args[args.length - 1] === 'function' &&\n      typeof args[args.length - 2] !== 'function'\n    ) {\n      throw new InvalidArgumentsGraphError(\n        `Graph.${reduceName}: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.`\n      );\n    }\n\n    let callback;\n    let initialValue;\n\n    if (args.length === 2) {\n      callback = args[0];\n      initialValue = args[1];\n      args = [];\n    } else if (args.length === 3) {\n      callback = args[1];\n      initialValue = args[2];\n      args = [args[0]];\n    } else if (args.length === 4) {\n      callback = args[2];\n      initialValue = args[3];\n      args = [args[0], args[1]];\n    }\n\n    let accumulator = initialValue;\n\n    args.push((e, ea, s, t, sa, ta, u) => {\n      accumulator = callback(accumulator, e, ea, s, t, sa, ta, u);\n    });\n\n    this[forEachName].apply(this, args);\n\n    return accumulator;\n  };\n}\n\n/**\n * Function attaching a breakable edge callback iterator method to the Graph\n * prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachFindEdge(Class, description) {\n  const {name, type, direction} = description;\n\n  const findEdgeName = 'find' + name[0].toUpperCase() + name.slice(1, -1);\n\n  /**\n   * Function iterating over the graph's relevant edges in order to match\n   * one of them using the provided predicate function.\n   *\n   * Arity 1: Iterate over all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Iterate over all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Iterate over the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[findEdgeName] = function (source, target, callback) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return false;\n\n    if (arguments.length === 1) {\n      callback = source;\n      return findEdge(this, type, callback);\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      callback = target;\n\n      const nodeData = this._nodes.get(source);\n\n      if (typeof nodeData === 'undefined')\n        throw new NotFoundGraphError(\n          `Graph.${findEdgeName}: could not find the \"${source}\" node in the graph.`\n        );\n\n      // Iterating over a node's edges\n      // TODO: maybe attach the sub method to the instance dynamically?\n      return findEdgeForNode(\n        this.multi,\n        type === 'mixed' ? this.type : type,\n        direction,\n        nodeData,\n        callback\n      );\n    }\n\n    if (arguments.length === 3) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${findEdgeName}:  could not find the \"${source}\" source node in the graph.`\n        );\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(\n          `Graph.${findEdgeName}:  could not find the \"${target}\" target node in the graph.`\n        );\n\n      // Iterating over the edges between source & target\n      return findEdgeForPath(\n        type,\n        this.multi,\n        direction,\n        sourceData,\n        target,\n        callback\n      );\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.${findEdgeName}: too many arguments (expecting 1, 2 or 3 and got ${arguments.length}).`\n    );\n  };\n\n  /**\n   * Function iterating over the graph's relevant edges in order to assert\n   * whether any one of them matches the provided predicate function.\n   *\n   * Arity 1: Iterate over all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Iterate over all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Iterate over the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const someName = 'some' + name[0].toUpperCase() + name.slice(1, -1);\n\n  Class.prototype[someName] = function () {\n    const args = Array.prototype.slice.call(arguments);\n    const callback = args.pop();\n\n    args.push((e, ea, s, t, sa, ta, u) => {\n      return callback(e, ea, s, t, sa, ta, u);\n    });\n\n    const found = this[findEdgeName].apply(this, args);\n\n    if (found) return true;\n\n    return false;\n  };\n\n  /**\n   * Function iterating over the graph's relevant edges in order to assert\n   * whether all of them matche the provided predicate function.\n   *\n   * Arity 1: Iterate over all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Iterate over all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Iterate over the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const everyName = 'every' + name[0].toUpperCase() + name.slice(1, -1);\n\n  Class.prototype[everyName] = function () {\n    const args = Array.prototype.slice.call(arguments);\n    const callback = args.pop();\n\n    args.push((e, ea, s, t, sa, ta, u) => {\n      return !callback(e, ea, s, t, sa, ta, u);\n    });\n\n    const found = this[findEdgeName].apply(this, args);\n\n    if (found) return false;\n\n    return true;\n  };\n}\n\n/**\n * Function attaching an edge iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachEdgeIteratorCreator(Class, description) {\n  const {name: originalName, type, direction} = description;\n\n  const name = originalName.slice(0, -1) + 'Entries';\n\n  /**\n   * Function returning an iterator over the graph's edges.\n   *\n   * Arity 0: Iterate over all the relevant edges.\n   *\n   * Arity 1: Iterate over all of a node's relevant edges.\n   * @param  {any}   node   - Target node.\n   *\n   * Arity 2: Iterate over the relevant edges across the given path.\n   * @param  {any}   source - Source node.\n   * @param  {any}   target - Target node.\n   *\n   * @return {array|number} - The edges or the number of edges.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[name] = function (source, target) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return Iterator.empty();\n\n    if (!arguments.length) return createEdgeIterator(this, type);\n\n    if (arguments.length === 1) {\n      source = '' + source;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${name}: could not find the \"${source}\" node in the graph.`\n        );\n\n      // Iterating over a node's edges\n      return createEdgeIteratorForNode(type, direction, sourceData);\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${name}:  could not find the \"${source}\" source node in the graph.`\n        );\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(\n          `Graph.${name}:  could not find the \"${target}\" target node in the graph.`\n        );\n\n      // Iterating over the edges between source & target\n      return createEdgeIteratorForPath(type, direction, sourceData, target);\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.${name}: too many arguments (expecting 0, 1 or 2 and got ${arguments.length}).`\n    );\n  };\n}\n\n/**\n * Function attaching every edge iteration method to the Graph class.\n *\n * @param {function} Graph - Graph class.\n */\nexport function attachEdgeIterationMethods(Graph) {\n  EDGES_ITERATION.forEach(description => {\n    attachEdgeArrayCreator(Graph, description);\n    attachForEachEdge(Graph, description);\n    attachFindEdge(Graph, description);\n    attachEdgeIteratorCreator(Graph, description);\n  });\n}\n","/**\n * Graphology Neighbor Iteration\n * ==============================\n *\n * Attaching some methods to the Graph class to be able to iterate over\n * neighbors.\n */\nimport Iterator from 'obliterator/iterator';\nimport chain from 'obliterator/chain';\nimport take from 'obliterator/take';\n\nimport {NotFoundGraphError, InvalidArgumentsGraphError} from '../errors';\n\n/**\n * Definitions.\n */\nconst NEIGHBORS_ITERATION = [\n  {\n    name: 'neighbors',\n    type: 'mixed'\n  },\n  {\n    name: 'inNeighbors',\n    type: 'directed',\n    direction: 'in'\n  },\n  {\n    name: 'outNeighbors',\n    type: 'directed',\n    direction: 'out'\n  },\n  {\n    name: 'inboundNeighbors',\n    type: 'mixed',\n    direction: 'in'\n  },\n  {\n    name: 'outboundNeighbors',\n    type: 'mixed',\n    direction: 'out'\n  },\n  {\n    name: 'directedNeighbors',\n    type: 'directed'\n  },\n  {\n    name: 'undirectedNeighbors',\n    type: 'undirected'\n  }\n];\n\n/**\n * Function merging neighbors into the given set iterating over the given object.\n *\n * @param {BasicSet} neighbors - Neighbors set.\n * @param {object}   object    - Target object.\n */\nfunction merge(neighbors, object) {\n  if (typeof object === 'undefined') return;\n\n  for (const neighbor in object) neighbors.add(neighbor);\n}\n\n/**\n * Function creating an array of relevant neighbors for the given node.\n *\n * @param  {string}       type      - Type of neighbors.\n * @param  {string}       direction - Direction.\n * @param  {any}          nodeData  - Target node's data.\n * @return {Array}                  - The list of neighbors.\n */\nfunction createNeighborArrayForNode(type, direction, nodeData) {\n  // If we want only undirected or in or out, we can roll some optimizations\n  if (type !== 'mixed') {\n    if (type === 'undirected') return Object.keys(nodeData.undirected);\n\n    if (typeof direction === 'string') return Object.keys(nodeData[direction]);\n  }\n\n  // Else we need to keep a set of neighbors not to return duplicates\n  const neighbors = new Set();\n\n  if (type !== 'undirected') {\n    if (direction !== 'out') {\n      merge(neighbors, nodeData.in);\n    }\n    if (direction !== 'in') {\n      merge(neighbors, nodeData.out);\n    }\n  }\n\n  if (type !== 'directed') {\n    merge(neighbors, nodeData.undirected);\n  }\n\n  return take(neighbors.values(), neighbors.size);\n}\n\n/**\n * Function iterating over the given node's relevant neighbors using a\n * callback.\n *\n * @param  {string}   type      - Type of neighbors.\n * @param  {string}   direction - Direction.\n * @param  {any}      nodeData  - Target node's data.\n * @param  {function} callback  - Callback to use.\n */\nfunction forEachInObject(nodeData, object, callback) {\n  for (const k in object) {\n    let edgeData = object[k];\n\n    if (edgeData instanceof Set) edgeData = edgeData.values().next().value;\n\n    const sourceData = edgeData.source,\n      targetData = edgeData.target;\n\n    const neighborData = sourceData === nodeData ? targetData : sourceData;\n\n    callback(neighborData.key, neighborData.attributes);\n  }\n}\n\nfunction forEachInObjectOnce(visited, nodeData, object, callback) {\n  for (const k in object) {\n    let edgeData = object[k];\n\n    if (edgeData instanceof Set) edgeData = edgeData.values().next().value;\n\n    const sourceData = edgeData.source,\n      targetData = edgeData.target;\n\n    const neighborData = sourceData === nodeData ? targetData : sourceData;\n\n    if (visited.has(neighborData.key)) continue;\n\n    visited.add(neighborData.key);\n\n    callback(neighborData.key, neighborData.attributes);\n  }\n}\n\n/**\n * Function iterating over the given node's relevant neighbors to match\n * one of them using a predicated function.\n *\n * @param  {string}   type      - Type of neighbors.\n * @param  {string}   direction - Direction.\n * @param  {any}      nodeData  - Target node's data.\n * @param  {function} callback  - Callback to use.\n */\nfunction findInObject(nodeData, object, callback) {\n  for (const k in object) {\n    let edgeData = object[k];\n\n    if (edgeData instanceof Set) edgeData = edgeData.values().next().value;\n\n    const sourceData = edgeData.source;\n    const targetData = edgeData.target;\n\n    const neighborData = sourceData === nodeData ? targetData : sourceData;\n\n    const shouldBreak = callback(neighborData.key, neighborData.attributes);\n\n    if (shouldBreak) return neighborData.key;\n  }\n\n  return;\n}\n\nfunction findInObjectOnce(visited, nodeData, object, callback) {\n  for (const k in object) {\n    let edgeData = object[k];\n\n    if (edgeData instanceof Set) edgeData = edgeData.values().next().value;\n\n    const sourceData = edgeData.source;\n    const targetData = edgeData.target;\n\n    const neighborData = sourceData === nodeData ? targetData : sourceData;\n\n    if (visited.has(neighborData.key)) continue;\n\n    visited.add(neighborData.key);\n\n    const shouldBreak = callback(neighborData.key, neighborData.attributes);\n\n    if (shouldBreak) return neighborData.key;\n  }\n\n  return;\n}\n\nfunction forEachNeighborForNode(type, direction, nodeData, callback) {\n  // If we want only undirected or in or out, we can roll some optimizations\n  if (type !== 'mixed') {\n    if (type === 'undirected')\n      return forEachInObject(nodeData, nodeData.undirected, callback);\n\n    if (typeof direction === 'string')\n      return forEachInObject(nodeData, nodeData[direction], callback);\n  }\n\n  // Else we need to keep a set of neighbors not to return duplicates\n  const visited = new Set();\n\n  if (type !== 'undirected') {\n    if (direction !== 'out') {\n      forEachInObjectOnce(visited, nodeData, nodeData.in, callback);\n    }\n    if (direction !== 'in') {\n      forEachInObjectOnce(visited, nodeData, nodeData.out, callback);\n    }\n  }\n\n  if (type !== 'directed') {\n    forEachInObjectOnce(visited, nodeData, nodeData.undirected, callback);\n  }\n}\n\nfunction findNeighbor(type, direction, nodeData, callback) {\n  // If we want only undirected or in or out, we can roll some optimizations\n  if (type !== 'mixed') {\n    if (type === 'undirected')\n      return findInObject(nodeData, nodeData.undirected, callback);\n\n    if (typeof direction === 'string')\n      return findInObject(nodeData, nodeData[direction], callback);\n  }\n\n  // Else we need to keep a set of neighbors not to return duplicates\n  const visited = new Set();\n\n  let found;\n\n  if (type !== 'undirected') {\n    if (direction !== 'out') {\n      found = findInObjectOnce(visited, nodeData, nodeData.in, callback);\n\n      if (found) return found;\n    }\n    if (direction !== 'in') {\n      found = findInObjectOnce(visited, nodeData, nodeData.out, callback);\n\n      if (found) return found;\n    }\n  }\n\n  if (type !== 'directed') {\n    found = findInObjectOnce(visited, nodeData, nodeData.undirected, callback);\n\n    if (found) return found;\n  }\n\n  return;\n}\n\n/**\n * Function returning an iterator over the given node's relevant neighbors.\n *\n * @param  {string}   type      - Type of neighbors.\n * @param  {string}   direction - Direction.\n * @param  {any}      nodeData  - Target node's data.\n * @return {Iterator}\n */\nfunction createObjectIterator(nodeData, object) {\n  const keys = Object.keys(object),\n    l = keys.length;\n\n  let i = 0;\n\n  return new Iterator(function () {\n    if (i >= l) return {done: true};\n\n    let edgeData = object[keys[i++]];\n\n    if (edgeData instanceof Set) edgeData = edgeData.values().next().value;\n\n    const sourceData = edgeData.source,\n      targetData = edgeData.target;\n\n    const neighborData = sourceData === nodeData ? targetData : sourceData;\n\n    return {\n      done: false,\n      value: {neighbor: neighborData.key, attributes: neighborData.attributes}\n    };\n  });\n}\n\nfunction createDedupedObjectIterator(visited, nodeData, object) {\n  const keys = Object.keys(object),\n    l = keys.length;\n\n  let i = 0;\n\n  return new Iterator(function next() {\n    if (i >= l) return {done: true};\n\n    let edgeData = object[keys[i++]];\n\n    if (edgeData instanceof Set) edgeData = edgeData.values().next().value;\n\n    const sourceData = edgeData.source,\n      targetData = edgeData.target;\n\n    const neighborData = sourceData === nodeData ? targetData : sourceData;\n\n    if (visited.has(neighborData.key)) return next();\n\n    visited.add(neighborData.key);\n\n    return {\n      done: false,\n      value: {neighbor: neighborData.key, attributes: neighborData.attributes}\n    };\n  });\n}\n\nfunction createNeighborIterator(type, direction, nodeData) {\n  // If we want only undirected or in or out, we can roll some optimizations\n  if (type !== 'mixed') {\n    if (type === 'undirected')\n      return createObjectIterator(nodeData, nodeData.undirected);\n\n    if (typeof direction === 'string')\n      return createObjectIterator(nodeData, nodeData[direction]);\n  }\n\n  let iterator = Iterator.empty();\n\n  // Else we need to keep a set of neighbors not to return duplicates\n  const visited = new Set();\n\n  if (type !== 'undirected') {\n    if (direction !== 'out') {\n      iterator = chain(\n        iterator,\n        createDedupedObjectIterator(visited, nodeData, nodeData.in)\n      );\n    }\n    if (direction !== 'in') {\n      iterator = chain(\n        iterator,\n        createDedupedObjectIterator(visited, nodeData, nodeData.out)\n      );\n    }\n  }\n\n  if (type !== 'directed') {\n    iterator = chain(\n      iterator,\n      createDedupedObjectIterator(visited, nodeData, nodeData.undirected)\n    );\n  }\n\n  return iterator;\n}\n\n/**\n * Function attaching a neighbors array creator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachNeighborArrayCreator(Class, description) {\n  const {name, type, direction} = description;\n\n  /**\n   * Function returning an array of certain neighbors.\n   *\n   * @param  {any}   node   - Target node.\n   * @return {array} - The neighbors of neighbors.\n   *\n   * @throws {Error} - Will throw if node is not found in the graph.\n   */\n  Class.prototype[name] = function (node) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return [];\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (typeof nodeData === 'undefined')\n      throw new NotFoundGraphError(\n        `Graph.${name}: could not find the \"${node}\" node in the graph.`\n      );\n\n    // Here, we want to iterate over a node's relevant neighbors\n    return createNeighborArrayForNode(\n      type === 'mixed' ? this.type : type,\n      direction,\n      nodeData\n    );\n  };\n}\n\n/**\n * Function attaching a neighbors callback iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachForEachNeighbor(Class, description) {\n  const {name, type, direction} = description;\n\n  const forEachName = 'forEach' + name[0].toUpperCase() + name.slice(1, -1);\n\n  /**\n   * Function iterating over all the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[forEachName] = function (node, callback) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type) return;\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (typeof nodeData === 'undefined')\n      throw new NotFoundGraphError(\n        `Graph.${forEachName}: could not find the \"${node}\" node in the graph.`\n      );\n\n    // Here, we want to iterate over a node's relevant neighbors\n    forEachNeighborForNode(\n      type === 'mixed' ? this.type : type,\n      direction,\n      nodeData,\n      callback\n    );\n  };\n\n  /**\n   * Function mapping the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const mapName = 'map' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[mapName] = function (node, callback) {\n    // TODO: optimize when size is known beforehand\n    const result = [];\n\n    this[forEachName](node, (n, a) => {\n      result.push(callback(n, a));\n    });\n\n    return result;\n  };\n\n  /**\n   * Function filtering the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const filterName = 'filter' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[filterName] = function (node, callback) {\n    const result = [];\n\n    this[forEachName](node, (n, a) => {\n      if (callback(n, a)) result.push(n);\n    });\n\n    return result;\n  };\n\n  /**\n   * Function reducing the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const reduceName = 'reduce' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[reduceName] = function (node, callback, initialValue) {\n    if (arguments.length < 3)\n      throw new InvalidArgumentsGraphError(\n        `Graph.${reduceName}: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.`\n      );\n\n    let accumulator = initialValue;\n\n    this[forEachName](node, (n, a) => {\n      accumulator = callback(accumulator, n, a);\n    });\n\n    return accumulator;\n  };\n}\n\n/**\n * Function attaching a breakable neighbors callback iterator method to the\n * Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachFindNeighbor(Class, description) {\n  const {name, type, direction} = description;\n\n  const capitalizedSingular = name[0].toUpperCase() + name.slice(1, -1);\n\n  const findName = 'find' + capitalizedSingular;\n\n  /**\n   * Function iterating over all the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[findName] = function (node, callback) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type) return;\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (typeof nodeData === 'undefined')\n      throw new NotFoundGraphError(\n        `Graph.${findName}: could not find the \"${node}\" node in the graph.`\n      );\n\n    // Here, we want to iterate over a node's relevant neighbors\n    return findNeighbor(\n      type === 'mixed' ? this.type : type,\n      direction,\n      nodeData,\n      callback\n    );\n  };\n\n  /**\n   * Function iterating over all the relevant neighbors to find if any of them\n   * matches the given predicate.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const someName = 'some' + capitalizedSingular;\n\n  Class.prototype[someName] = function (node, callback) {\n    const found = this[findName](node, callback);\n\n    if (found) return true;\n\n    return false;\n  };\n\n  /**\n   * Function iterating over all the relevant neighbors to find if all of them\n   * matche the given predicate.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const everyName = 'every' + capitalizedSingular;\n\n  Class.prototype[everyName] = function (node, callback) {\n    const found = this[findName](node, (n, a) => {\n      return !callback(n, a);\n    });\n\n    if (found) return false;\n\n    return true;\n  };\n}\n\n/**\n * Function attaching a neighbors callback iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachNeighborIteratorCreator(Class, description) {\n  const {name, type, direction} = description;\n\n  const iteratorName = name.slice(0, -1) + 'Entries';\n\n  /**\n   * Function returning an iterator over all the relevant neighbors.\n   *\n   * @param  {any}      node     - Target node.\n   * @return {Iterator}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[iteratorName] = function (node) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return Iterator.empty();\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (typeof nodeData === 'undefined')\n      throw new NotFoundGraphError(\n        `Graph.${iteratorName}: could not find the \"${node}\" node in the graph.`\n      );\n\n    // Here, we want to iterate over a node's relevant neighbors\n    return createNeighborIterator(\n      type === 'mixed' ? this.type : type,\n      direction,\n      nodeData\n    );\n  };\n}\n\n/**\n * Function attaching every neighbor iteration method to the Graph class.\n *\n * @param {function} Graph - Graph class.\n */\nexport function attachNeighborIterationMethods(Graph) {\n  NEIGHBORS_ITERATION.forEach(description => {\n    attachNeighborArrayCreator(Graph, description);\n    attachForEachNeighbor(Graph, description);\n    attachFindNeighbor(Graph, description);\n    attachNeighborIteratorCreator(Graph, description);\n  });\n}\n","/**\n * Graphology Adjacency Iteration\n * ================================\n *\n * Attaching some methods to the Graph class to be able to iterate over a\n * graph's adjacency.\n */\nimport Iterator from 'obliterator/iterator';\n\n/**\n * Function iterating over a simple graph's adjacency using a callback.\n *\n * @param {boolean}  breakable - Can we break?\n * @param {Graph}    graph     - Target Graph instance.\n * @param {callback} function  - Iteration callback.\n */\nexport function forEachAdjacencySimple(breakable, graph, callback) {\n  const iterator = graph._nodes.values();\n\n  const type = graph.type;\n\n  let step, sourceData, neighbor, adj, edgeData, targetData, shouldBreak;\n\n  while (((step = iterator.next()), step.done !== true)) {\n    sourceData = step.value;\n\n    if (type !== 'undirected') {\n      adj = sourceData.out;\n\n      for (neighbor in adj) {\n        edgeData = adj[neighbor];\n        targetData = edgeData.target;\n\n        shouldBreak = callback(\n          sourceData.key,\n          targetData.key,\n          sourceData.attributes,\n          targetData.attributes,\n          edgeData.key,\n          edgeData.attributes,\n          edgeData.undirected\n        );\n\n        if (breakable && shouldBreak) return edgeData.key;\n      }\n    }\n\n    if (type !== 'directed') {\n      adj = sourceData.undirected;\n\n      for (neighbor in adj) {\n        edgeData = adj[neighbor];\n        targetData = edgeData.target;\n\n        if (targetData.key !== neighbor) targetData = edgeData.source;\n\n        shouldBreak = callback(\n          sourceData.key,\n          targetData.key,\n          sourceData.attributes,\n          targetData.attributes,\n          edgeData.key,\n          edgeData.attributes,\n          edgeData.undirected\n        );\n\n        if (breakable && shouldBreak) return edgeData.key;\n      }\n    }\n  }\n\n  return;\n}\n\n/**\n * Function iterating over a multi graph's adjacency using a callback.\n *\n * @param {boolean}  breakable - Can we break?\n * @param {Graph}    graph    - Target Graph instance.\n * @param {callback} function - Iteration callback.\n */\nexport function forEachAdjacencyMulti(breakable, graph, callback) {\n  const iterator = graph._nodes.values();\n\n  const type = graph.type;\n\n  let step,\n    sourceData,\n    neighbor,\n    container,\n    containerStep,\n    adj,\n    edgeData,\n    targetData,\n    shouldBreak;\n\n  while (((step = iterator.next()), step.done !== true)) {\n    sourceData = step.value;\n\n    if (type !== 'undirected') {\n      adj = sourceData.out;\n\n      for (neighbor in adj) {\n        container = adj[neighbor].values();\n\n        while (\n          ((containerStep = container.next()), containerStep.done !== true)\n        ) {\n          edgeData = containerStep.value;\n          targetData = edgeData.target;\n\n          shouldBreak = callback(\n            sourceData.key,\n            targetData.key,\n            sourceData.attributes,\n            targetData.attributes,\n            edgeData.key,\n            edgeData.attributes,\n            edgeData.undirected\n          );\n\n          if (breakable && shouldBreak) return edgeData.key;\n        }\n      }\n    }\n\n    if (type !== 'directed') {\n      adj = sourceData.undirected;\n\n      for (neighbor in adj) {\n        container = adj[neighbor].values();\n\n        while (\n          ((containerStep = container.next()), containerStep.done !== true)\n        ) {\n          edgeData = containerStep.value;\n          targetData = edgeData.target;\n\n          if (targetData.key !== neighbor) targetData = edgeData.source;\n\n          shouldBreak = callback(\n            sourceData.key,\n            targetData.key,\n            sourceData.attributes,\n            targetData.attributes,\n            edgeData.key,\n            edgeData.attributes,\n            edgeData.undirected\n          );\n\n          if (breakable && shouldBreak) return edgeData.key;\n        }\n      }\n    }\n  }\n\n  return;\n}\n\nexport function createAdjacencyIteratorSimple(graph) {\n  const iterator = graph._nodes.values();\n\n  const type = graph.type;\n\n  let state = 'outer',\n    sourceData,\n    neighbors,\n    adj,\n    offset;\n\n  return new Iterator(function next() {\n    let step;\n\n    if (state === 'outer') {\n      step = iterator.next();\n\n      if (step.done === true) return step;\n\n      sourceData = step.value;\n\n      state = 'directed';\n      return next();\n    }\n\n    if (state === 'directed') {\n      if (type === 'undirected') {\n        state = 'undirected';\n        return next();\n      }\n\n      adj = sourceData.out;\n      neighbors = Object.keys(sourceData.out);\n      offset = 0;\n      state = 'inner-directed';\n\n      return next();\n    }\n\n    if (state === 'undirected') {\n      if (type === 'directed') {\n        state = 'outer';\n        return next();\n      }\n\n      adj = sourceData.undirected;\n      neighbors = Object.keys(sourceData.undirected);\n      offset = 0;\n      state = 'inner-undirected';\n    }\n\n    // Inner\n    if (offset >= neighbors.length) {\n      if (state === 'inner-undirected') state = 'outer';\n      else state = 'undirected';\n\n      return next();\n    }\n\n    const neighbor = neighbors[offset++];\n    const edgeData = adj[neighbor];\n    let targetData = edgeData.target;\n\n    if (state === 'inner-undirected' && targetData.key === sourceData.key)\n      targetData = edgeData.source;\n\n    return {\n      done: false,\n      value: {\n        source: sourceData.key,\n        target: targetData.key,\n        sourceAttributes: sourceData.attributes,\n        targetAttributes: targetData.attributes,\n        edgeKey: edgeData.key,\n        edgeAttributes: edgeData.attributes,\n        undirected: edgeData.undirected\n      }\n    };\n  });\n}\n\nexport function createAdjacencyIteratorMulti(graph) {\n  const iterator = graph._nodes.values();\n\n  const type = graph.type;\n\n  let state = 'outer',\n    sourceData,\n    neighbors,\n    container = null,\n    adj,\n    offset;\n\n  return new Iterator(function next() {\n    let step;\n\n    if (state === 'outer') {\n      step = iterator.next();\n\n      if (step.done === true) return step;\n\n      sourceData = step.value;\n\n      state = 'directed';\n      return next();\n    }\n\n    if (state === 'directed') {\n      if (type === 'undirected') {\n        state = 'undirected';\n        return next();\n      }\n\n      adj = sourceData.out;\n      neighbors = Object.keys(sourceData.out);\n      offset = 0;\n      state = 'inner-directed';\n\n      return next();\n    }\n\n    if (state === 'undirected') {\n      if (type === 'directed') {\n        state = 'outer';\n        return next();\n      }\n\n      adj = sourceData.undirected;\n      neighbors = Object.keys(sourceData.undirected);\n      offset = 0;\n      state = 'inner-undirected';\n    }\n\n    // Inner\n    if (!container && offset >= neighbors.length) {\n      if (state === 'inner-undirected') state = 'outer';\n      else state = 'undirected';\n\n      return next();\n    }\n\n    if (!container) {\n      const neighbor = neighbors[offset++];\n      container = adj[neighbor].values();\n      return next();\n    }\n\n    step = container.next();\n\n    if (step.done) {\n      container = null;\n      return next();\n    }\n\n    const edgeData = step.value;\n    let targetData = edgeData.target;\n\n    if (state === 'inner-undirected' && targetData.key === sourceData.key)\n      targetData = edgeData.source;\n\n    return {\n      done: false,\n      value: {\n        source: sourceData.key,\n        target: targetData.key,\n        sourceAttributes: sourceData.attributes,\n        targetAttributes: targetData.attributes,\n        edge: edgeData.key,\n        edgeAttributes: edgeData.attributes,\n        undirected: edgeData.undirected\n      }\n    };\n  });\n}\n","/**\n * Graphology Serialization Utilities\n * ===================================\n *\n * Collection of functions used to validate import-export formats & to ouput\n * them from internal graph data.\n *\n * Serialized Node:\n * {key, ?attributes}\n *\n * Serialized Edge:\n * {key?, source, target, attributes?, undirected?}\n *\n * Serialized Graph:\n * {nodes[], edges?[]}\n */\nimport {assign, isPlainObject, isEmpty} from './utils';\n\n/**\n * Formats internal node data into a serialized node.\n *\n * @param  {any}    key  - The node's key.\n * @param  {object} data - Internal node's data.\n * @return {array}       - The serialized node.\n */\nexport function serializeNode(key, data) {\n  const serialized = {key};\n\n  if (!isEmpty(data.attributes))\n    serialized.attributes = assign({}, data.attributes);\n\n  return serialized;\n}\n\n/**\n * Formats internal edge data into a serialized edge.\n *\n * @param  {any}    key  - The edge's key.\n * @param  {object} data - Internal edge's data.\n * @return {array}       - The serialized edge.\n */\nexport function serializeEdge(key, data) {\n  const serialized = {\n    key,\n    source: data.source.key,\n    target: data.target.key\n  };\n\n  if (!isEmpty(data.attributes))\n    serialized.attributes = assign({}, data.attributes);\n\n  if (data.undirected) serialized.undirected = true;\n\n  return serialized;\n}\n\n/**\n * Checks whether the given value is a serialized node.\n *\n * @param  {mixed} value - Target value.\n * @return {string|null}\n */\nexport function validateSerializedNode(value) {\n  if (!isPlainObject(value)) return 'not-object';\n\n  if (!('key' in value)) return 'no-key';\n\n  if (\n    'attributes' in value &&\n    (!isPlainObject(value.attributes) || value.attributes === null)\n  )\n    return 'invalid-attributes';\n\n  return null;\n}\n\n/**\n * Checks whether the given value is a serialized edge.\n *\n * @param  {mixed} value - Target value.\n * @return {string|null}\n */\nexport function validateSerializedEdge(value) {\n  if (!isPlainObject(value)) return 'not-object';\n\n  if (!('source' in value)) return 'no-source';\n\n  if (!('target' in value)) return 'no-target';\n\n  if (\n    'attributes' in value &&\n    (!isPlainObject(value.attributes) || value.attributes === null)\n  )\n    return 'invalid-attributes';\n\n  if ('undirected' in value && typeof value.undirected !== 'boolean')\n    return 'invalid-undirected';\n\n  return null;\n}\n","/* eslint no-nested-ternary: 0 */\n/**\n * Graphology Reference Implementation\n * ====================================\n *\n * Reference implementation of the graphology specs.\n */\nimport {EventEmitter} from 'events';\nimport Iterator from 'obliterator/iterator';\nimport take from 'obliterator/take';\n\nimport {\n  InvalidArgumentsGraphError,\n  NotFoundGraphError,\n  UsageGraphError\n} from './errors';\n\nimport {\n  MixedNodeData,\n  DirectedNodeData,\n  UndirectedNodeData,\n  EdgeData\n} from './data';\n\nimport {\n  updateStructureIndex,\n  clearEdgeFromStructureIndex,\n  clearStructureIndex,\n  upgradeStructureIndexToMulti\n} from './indices';\n\nimport {attachAttributesMethods} from './attributes';\nimport {attachEdgeIterationMethods} from './iteration/edges';\nimport {attachNeighborIterationMethods} from './iteration/neighbors';\nimport {\n  forEachAdjacencySimple,\n  forEachAdjacencyMulti,\n  createAdjacencyIteratorSimple,\n  createAdjacencyIteratorMulti\n} from './iteration/adjacency';\n\nimport {\n  serializeNode,\n  serializeEdge,\n  validateSerializedNode,\n  validateSerializedEdge\n} from './serialization';\n\nimport {\n  assign,\n  getMatchingEdge,\n  isGraph,\n  isPlainObject,\n  privateProperty,\n  readOnlyProperty,\n  incrementalIdStartingFromRandomByte,\n  validateHints\n} from './utils';\n\n/**\n * Constants.\n */\nconst INSTANCE_ID = incrementalIdStartingFromRandomByte();\n\n/**\n * Enums.\n */\nconst TYPES = new Set(['directed', 'undirected', 'mixed']);\n\nconst EMITTER_PROPS = new Set([\n  'domain',\n  '_events',\n  '_eventsCount',\n  '_maxListeners'\n]);\n\nconst EDGE_ADD_METHODS = [\n  {\n    name: verb => `${verb}Edge`,\n    generateKey: true\n  },\n  {\n    name: verb => `${verb}DirectedEdge`,\n    generateKey: true,\n    type: 'directed'\n  },\n  {\n    name: verb => `${verb}UndirectedEdge`,\n    generateKey: true,\n    type: 'undirected'\n  },\n  {\n    name: verb => `${verb}EdgeWithKey`\n  },\n  {\n    name: verb => `${verb}DirectedEdgeWithKey`,\n    type: 'directed'\n  },\n  {\n    name: verb => `${verb}UndirectedEdgeWithKey`,\n    type: 'undirected'\n  }\n];\n\n/**\n * Default options.\n */\nconst DEFAULTS = {\n  allowSelfLoops: true,\n  multi: false,\n  type: 'mixed'\n};\n\n/**\n * Abstract functions used by the Graph class for various methods.\n */\n\n/**\n * Internal method used to add a node to the given graph\n *\n * @param  {Graph}   graph           - Target graph.\n * @param  {any}     node            - The node's key.\n * @param  {object}  [attributes]    - Optional attributes.\n * @return {NodeData}                - Created node data.\n */\nfunction addNode(graph, node, attributes) {\n  if (attributes && !isPlainObject(attributes))\n    throw new InvalidArgumentsGraphError(\n      `Graph.addNode: invalid attributes. Expecting an object but got \"${attributes}\"`\n    );\n\n  // String coercion\n  node = '' + node;\n  attributes = attributes || {};\n\n  if (graph._nodes.has(node))\n    throw new UsageGraphError(\n      `Graph.addNode: the \"${node}\" node already exist in the graph.`\n    );\n\n  const data = new graph.NodeDataClass(node, attributes);\n\n  // Adding the node to internal register\n  graph._nodes.set(node, data);\n\n  // Emitting\n  graph.emit('nodeAdded', {\n    key: node,\n    attributes\n  });\n\n  return data;\n}\n\n/**\n * Same as the above but without sanity checks because we call this in contexts\n * where necessary checks were already done.\n */\nfunction unsafeAddNode(graph, node, attributes) {\n  const data = new graph.NodeDataClass(node, attributes);\n\n  graph._nodes.set(node, data);\n\n  graph.emit('nodeAdded', {\n    key: node,\n    attributes\n  });\n\n  return data;\n}\n\n/**\n * Internal method used to add an arbitrary edge to the given graph.\n *\n * @param  {Graph}   graph           - Target graph.\n * @param  {string}  name            - Name of the child method for errors.\n * @param  {boolean} mustGenerateKey - Should the graph generate an id?\n * @param  {boolean} undirected      - Whether the edge is undirected.\n * @param  {any}     edge            - The edge's key.\n * @param  {any}     source          - The source node.\n * @param  {any}     target          - The target node.\n * @param  {object}  [attributes]    - Optional attributes.\n * @return {any}                     - The edge.\n *\n * @throws {Error} - Will throw if the graph is of the wrong type.\n * @throws {Error} - Will throw if the given attributes are not an object.\n * @throws {Error} - Will throw if source or target doesn't exist.\n * @throws {Error} - Will throw if the edge already exist.\n */\nfunction addEdge(\n  graph,\n  name,\n  mustGenerateKey,\n  undirected,\n  edge,\n  source,\n  target,\n  attributes\n) {\n  // Checking validity of operation\n  if (!undirected && graph.type === 'undirected')\n    throw new UsageGraphError(\n      `Graph.${name}: you cannot add a directed edge to an undirected graph. Use the #.addEdge or #.addUndirectedEdge instead.`\n    );\n\n  if (undirected && graph.type === 'directed')\n    throw new UsageGraphError(\n      `Graph.${name}: you cannot add an undirected edge to a directed graph. Use the #.addEdge or #.addDirectedEdge instead.`\n    );\n\n  if (attributes && !isPlainObject(attributes))\n    throw new InvalidArgumentsGraphError(\n      `Graph.${name}: invalid attributes. Expecting an object but got \"${attributes}\"`\n    );\n\n  // Coercion of source & target:\n  source = '' + source;\n  target = '' + target;\n  attributes = attributes || {};\n\n  if (!graph.allowSelfLoops && source === target)\n    throw new UsageGraphError(\n      `Graph.${name}: source & target are the same (\"${source}\"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false.`\n    );\n\n  const sourceData = graph._nodes.get(source),\n    targetData = graph._nodes.get(target);\n\n  if (!sourceData)\n    throw new NotFoundGraphError(\n      `Graph.${name}: source node \"${source}\" not found.`\n    );\n\n  if (!targetData)\n    throw new NotFoundGraphError(\n      `Graph.${name}: target node \"${target}\" not found.`\n    );\n\n  // Must the graph generate an id for this edge?\n  const eventData = {\n    key: null,\n    undirected,\n    source,\n    target,\n    attributes\n  };\n\n  if (mustGenerateKey) {\n    // NOTE: in this case we can guarantee that the key does not already\n    // exist and is already correctly casted as a string\n    edge = graph._edgeKeyGenerator();\n  } else {\n    // Coercion of edge key\n    edge = '' + edge;\n\n    // Here, we have a key collision\n    if (graph._edges.has(edge))\n      throw new UsageGraphError(\n        `Graph.${name}: the \"${edge}\" edge already exists in the graph.`\n      );\n  }\n\n  // Here, we might have a source / target collision\n  if (\n    !graph.multi &&\n    (undirected\n      ? typeof sourceData.undirected[target] !== 'undefined'\n      : typeof sourceData.out[target] !== 'undefined')\n  ) {\n    throw new UsageGraphError(\n      `Graph.${name}: an edge linking \"${source}\" to \"${target}\" already exists. If you really want to add multiple edges linking those nodes, you should create a multi graph by using the 'multi' option.`\n    );\n  }\n\n  // Storing some data\n  const edgeData = new EdgeData(\n    undirected,\n    edge,\n    sourceData,\n    targetData,\n    attributes\n  );\n\n  // Adding the edge to the internal register\n  graph._edges.set(edge, edgeData);\n\n  // Incrementing node degree counters\n  if (source === target) {\n    if (undirected) {\n      sourceData.undirectedSelfLoops++;\n      graph._undirectedSelfLoopCount++;\n    } else {\n      sourceData.directedSelfLoops++;\n      graph._directedSelfLoopCount++;\n    }\n  } else {\n    if (undirected) {\n      sourceData.undirectedDegree++;\n      targetData.undirectedDegree++;\n    } else {\n      sourceData.outDegree++;\n      targetData.inDegree++;\n    }\n  }\n\n  // Updating relevant index\n  updateStructureIndex(\n    graph,\n    undirected,\n    edgeData,\n    source,\n    target,\n    sourceData,\n    targetData\n  );\n\n  if (undirected) graph._undirectedSize++;\n  else graph._directedSize++;\n\n  // Emitting\n  eventData.key = edge;\n\n  graph.emit('edgeAdded', eventData);\n\n  return edge;\n}\n\n/**\n * Internal method used to add an arbitrary edge to the given graph.\n *\n * @param  {Graph}   graph           - Target graph.\n * @param  {string}  name            - Name of the child method for errors.\n * @param  {boolean} mustGenerateKey - Should the graph generate an id?\n * @param  {boolean} undirected      - Whether the edge is undirected.\n * @param  {any}     edge            - The edge's key.\n * @param  {any}     source          - The source node.\n * @param  {any}     target          - The target node.\n * @param  {object}  [attributes]    - Optional attributes.\n * @param  {boolean} [asUpdater]       - Are we updating or merging?\n * @return {any}                     - The edge.\n *\n * @throws {Error} - Will throw if the graph is of the wrong type.\n * @throws {Error} - Will throw if the given attributes are not an object.\n * @throws {Error} - Will throw if source or target doesn't exist.\n * @throws {Error} - Will throw if the edge already exist.\n */\nfunction mergeEdge(\n  graph,\n  name,\n  mustGenerateKey,\n  undirected,\n  edge,\n  source,\n  target,\n  attributes,\n  asUpdater\n) {\n  // Checking validity of operation\n  if (!undirected && graph.type === 'undirected')\n    throw new UsageGraphError(\n      `Graph.${name}: you cannot merge/update a directed edge to an undirected graph. Use the #.mergeEdge/#.updateEdge or #.addUndirectedEdge instead.`\n    );\n\n  if (undirected && graph.type === 'directed')\n    throw new UsageGraphError(\n      `Graph.${name}: you cannot merge/update an undirected edge to a directed graph. Use the #.mergeEdge/#.updateEdge or #.addDirectedEdge instead.`\n    );\n\n  if (attributes) {\n    if (asUpdater) {\n      if (typeof attributes !== 'function')\n        throw new InvalidArgumentsGraphError(\n          `Graph.${name}: invalid updater function. Expecting a function but got \"${attributes}\"`\n        );\n    } else {\n      if (!isPlainObject(attributes))\n        throw new InvalidArgumentsGraphError(\n          `Graph.${name}: invalid attributes. Expecting an object but got \"${attributes}\"`\n        );\n    }\n  }\n\n  // Coercion of source & target:\n  source = '' + source;\n  target = '' + target;\n\n  let updater;\n\n  if (asUpdater) {\n    updater = attributes;\n    attributes = undefined;\n  }\n\n  if (!graph.allowSelfLoops && source === target)\n    throw new UsageGraphError(\n      `Graph.${name}: source & target are the same (\"${source}\"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false.`\n    );\n\n  let sourceData = graph._nodes.get(source),\n    targetData = graph._nodes.get(target),\n    edgeData;\n\n  // Do we need to handle duplicate?\n  let alreadyExistingEdgeData;\n\n  if (!mustGenerateKey) {\n    edgeData = graph._edges.get(edge);\n\n    if (edgeData) {\n      // Here, we need to ensure, if the user gave a key, that source & target\n      // are coherent\n      if (\n        edgeData.source.key !== source ||\n        edgeData.target.key !== target ||\n        (undirected &&\n          (edgeData.source.key !== target || edgeData.target.key !== source))\n      ) {\n        throw new UsageGraphError(\n          `Graph.${name}: inconsistency detected when attempting to merge the \"${edge}\" edge with \"${source}\" source & \"${target}\" target vs. (\"${edgeData.source.key}\", \"${edgeData.target.key}\").`\n        );\n      }\n\n      alreadyExistingEdgeData = edgeData;\n    }\n  }\n\n  // Here, we might have a source / target collision\n  if (!alreadyExistingEdgeData && !graph.multi && sourceData) {\n    alreadyExistingEdgeData = undirected\n      ? sourceData.undirected[target]\n      : sourceData.out[target];\n  }\n\n  // Handling duplicates\n  if (alreadyExistingEdgeData) {\n    // We can skip the attribute merging part if the user did not provide them\n    if (asUpdater ? !updater : !attributes) return alreadyExistingEdgeData.key;\n\n    // Updating the attributes\n    if (asUpdater) {\n      const oldAttributes = alreadyExistingEdgeData.attributes;\n      alreadyExistingEdgeData.attributes = updater(oldAttributes);\n\n      graph.emit('edgeAttributesUpdated', {\n        type: 'replace',\n        key: alreadyExistingEdgeData.key,\n        attributes: alreadyExistingEdgeData.attributes\n      });\n    }\n\n    // Merging the attributes\n    else {\n      assign(alreadyExistingEdgeData.attributes, attributes);\n\n      graph.emit('edgeAttributesUpdated', {\n        type: 'merge',\n        key: alreadyExistingEdgeData.key,\n        attributes: alreadyExistingEdgeData.attributes,\n        data: attributes\n      });\n    }\n\n    return alreadyExistingEdgeData.key;\n  }\n\n  attributes = attributes || {};\n\n  if (asUpdater && updater) attributes = updater(attributes);\n\n  // Must the graph generate an id for this edge?\n  const eventData = {\n    key: null,\n    undirected,\n    source,\n    target,\n    attributes\n  };\n\n  if (mustGenerateKey) {\n    // NOTE: in this case we can guarantee that the key does not already\n    // exist and is already correctly casted as a string\n    edge = graph._edgeKeyGenerator();\n  } else {\n    // Coercion of edge key\n    edge = '' + edge;\n\n    // Here, we have a key collision\n    if (graph._edges.has(edge))\n      throw new UsageGraphError(\n        `Graph.${name}: the \"${edge}\" edge already exists in the graph.`\n      );\n  }\n\n  if (!sourceData) {\n    sourceData = unsafeAddNode(graph, source, {});\n\n    if (source === target) targetData = sourceData;\n  }\n  if (!targetData) {\n    targetData = unsafeAddNode(graph, target, {});\n  }\n\n  // Storing some data\n  edgeData = new EdgeData(undirected, edge, sourceData, targetData, attributes);\n\n  // Adding the edge to the internal register\n  graph._edges.set(edge, edgeData);\n\n  // Incrementing node degree counters\n  if (source === target) {\n    if (undirected) {\n      sourceData.undirectedSelfLoops++;\n      graph._undirectedSelfLoopCount++;\n    } else {\n      sourceData.directedSelfLoops++;\n      graph._directedSelfLoopCount++;\n    }\n  } else {\n    if (undirected) {\n      sourceData.undirectedDegree++;\n      targetData.undirectedDegree++;\n    } else {\n      sourceData.outDegree++;\n      targetData.inDegree++;\n    }\n  }\n\n  // Updating relevant index\n  updateStructureIndex(\n    graph,\n    undirected,\n    edgeData,\n    source,\n    target,\n    sourceData,\n    targetData\n  );\n\n  if (undirected) graph._undirectedSize++;\n  else graph._directedSize++;\n\n  // Emitting\n  eventData.key = edge;\n\n  graph.emit('edgeAdded', eventData);\n\n  return edge;\n}\n\n/**\n * Graph class\n *\n * @constructor\n * @param  {object}  [options] - Options:\n * @param  {boolean}   [allowSelfLoops] - Allow self loops?\n * @param  {string}    [type]           - Type of the graph.\n * @param  {boolean}   [map]            - Allow references as keys?\n * @param  {boolean}   [multi]          - Allow parallel edges?\n *\n * @throws {Error} - Will throw if the arguments are not valid.\n */\nexport default class Graph extends EventEmitter {\n  constructor(options) {\n    super();\n\n    //-- Solving options\n    options = assign({}, DEFAULTS, options);\n\n    // Enforcing options validity\n    if (typeof options.multi !== 'boolean')\n      throw new InvalidArgumentsGraphError(\n        `Graph.constructor: invalid 'multi' option. Expecting a boolean but got \"${options.multi}\".`\n      );\n\n    if (!TYPES.has(options.type))\n      throw new InvalidArgumentsGraphError(\n        `Graph.constructor: invalid 'type' option. Should be one of \"mixed\", \"directed\" or \"undirected\" but got \"${options.type}\".`\n      );\n\n    if (typeof options.allowSelfLoops !== 'boolean')\n      throw new InvalidArgumentsGraphError(\n        `Graph.constructor: invalid 'allowSelfLoops' option. Expecting a boolean but got \"${options.allowSelfLoops}\".`\n      );\n\n    //-- Private properties\n\n    // Utilities\n    const NodeDataClass =\n      options.type === 'mixed'\n        ? MixedNodeData\n        : options.type === 'directed'\n        ? DirectedNodeData\n        : UndirectedNodeData;\n\n    privateProperty(this, 'NodeDataClass', NodeDataClass);\n\n    // Internal edge key generator\n\n    // NOTE: this internal generator produce keys that are strings\n    // composed of a weird prefix, an incremental instance id starting from\n    // a random byte and finally an internal instance incremental id.\n    // All this to avoid intra-frame and cross-frame adversarial inputs\n    // that can force a single #.addEdge call to degenerate into a O(n)\n    // available key search loop.\n\n    // It also ensures that automatically generated edge keys are unlikely\n    // to produce collisions with arbitrary keys given by users.\n    const instanceId = INSTANCE_ID();\n    let edgeId = 0;\n\n    const edgeKeyGenerator = () => {\n      let availableEdgeKey;\n\n      do {\n        availableEdgeKey = 'geid_' + instanceId + '_' + edgeId++;\n      } while (this._edges.has(availableEdgeKey));\n\n      return availableEdgeKey;\n    };\n\n    // Indexes\n    privateProperty(this, '_attributes', {});\n    privateProperty(this, '_nodes', new Map());\n    privateProperty(this, '_edges', new Map());\n    privateProperty(this, '_directedSize', 0);\n    privateProperty(this, '_undirectedSize', 0);\n    privateProperty(this, '_directedSelfLoopCount', 0);\n    privateProperty(this, '_undirectedSelfLoopCount', 0);\n    privateProperty(this, '_edgeKeyGenerator', edgeKeyGenerator);\n\n    // Options\n    privateProperty(this, '_options', options);\n\n    // Emitter properties\n    EMITTER_PROPS.forEach(prop => privateProperty(this, prop, this[prop]));\n\n    //-- Properties readers\n    readOnlyProperty(this, 'order', () => this._nodes.size);\n    readOnlyProperty(this, 'size', () => this._edges.size);\n    readOnlyProperty(this, 'directedSize', () => this._directedSize);\n    readOnlyProperty(this, 'undirectedSize', () => this._undirectedSize);\n    readOnlyProperty(\n      this,\n      'selfLoopCount',\n      () => this._directedSelfLoopCount + this._undirectedSelfLoopCount\n    );\n    readOnlyProperty(\n      this,\n      'directedSelfLoopCount',\n      () => this._directedSelfLoopCount\n    );\n    readOnlyProperty(\n      this,\n      'undirectedSelfLoopCount',\n      () => this._undirectedSelfLoopCount\n    );\n    readOnlyProperty(this, 'multi', this._options.multi);\n    readOnlyProperty(this, 'type', this._options.type);\n    readOnlyProperty(this, 'allowSelfLoops', this._options.allowSelfLoops);\n    readOnlyProperty(this, 'implementation', () => 'graphology');\n  }\n\n  _resetInstanceCounters() {\n    this._directedSize = 0;\n    this._undirectedSize = 0;\n    this._directedSelfLoopCount = 0;\n    this._undirectedSelfLoopCount = 0;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Read\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method returning whether the given node is found in the graph.\n   *\n   * @param  {any}     node - The node.\n   * @return {boolean}\n   */\n  hasNode(node) {\n    return this._nodes.has('' + node);\n  }\n\n  /**\n   * Method returning whether the given directed edge is found in the graph.\n   *\n   * Arity 1:\n   * @param  {any}     edge - The edge's key.\n   *\n   * Arity 2:\n   * @param  {any}     source - The edge's source.\n   * @param  {any}     target - The edge's target.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the arguments are invalid.\n   */\n  hasDirectedEdge(source, target) {\n    // Early termination\n    if (this.type === 'undirected') return false;\n\n    if (arguments.length === 1) {\n      const edge = '' + source;\n\n      const edgeData = this._edges.get(edge);\n\n      return !!edgeData && !edgeData.undirected;\n    } else if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      // If the node source or the target is not in the graph we break\n      const nodeData = this._nodes.get(source);\n\n      if (!nodeData) return false;\n\n      // Is there a directed edge pointing toward target?\n      const edges = nodeData.out[target];\n\n      if (!edges) return false;\n\n      return this.multi ? !!edges.size : true;\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.hasDirectedEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`\n    );\n  }\n\n  /**\n   * Method returning whether the given undirected edge is found in the graph.\n   *\n   * Arity 1:\n   * @param  {any}     edge - The edge's key.\n   *\n   * Arity 2:\n   * @param  {any}     source - The edge's source.\n   * @param  {any}     target - The edge's target.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the arguments are invalid.\n   */\n  hasUndirectedEdge(source, target) {\n    // Early termination\n    if (this.type === 'directed') return false;\n\n    if (arguments.length === 1) {\n      const edge = '' + source;\n\n      const edgeData = this._edges.get(edge);\n\n      return !!edgeData && edgeData.undirected;\n    } else if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      // If the node source or the target is not in the graph we break\n      const nodeData = this._nodes.get(source);\n\n      if (!nodeData) return false;\n\n      // Is there a directed edge pointing toward target?\n      const edges = nodeData.undirected[target];\n\n      if (!edges) return false;\n\n      return this.multi ? !!edges.size : true;\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.hasDirectedEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`\n    );\n  }\n\n  /**\n   * Method returning whether the given edge is found in the graph.\n   *\n   * Arity 1:\n   * @param  {any}     edge - The edge's key.\n   *\n   * Arity 2:\n   * @param  {any}     source - The edge's source.\n   * @param  {any}     target - The edge's target.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the arguments are invalid.\n   */\n  hasEdge(source, target) {\n    if (arguments.length === 1) {\n      const edge = '' + source;\n\n      return this._edges.has(edge);\n    } else if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      // If the node source or the target is not in the graph we break\n      const nodeData = this._nodes.get(source);\n\n      if (!nodeData) return false;\n\n      // Is there a directed edge pointing toward target?\n      let edges = typeof nodeData.out !== 'undefined' && nodeData.out[target];\n\n      if (!edges)\n        edges =\n          typeof nodeData.undirected !== 'undefined' &&\n          nodeData.undirected[target];\n\n      if (!edges) return false;\n\n      return this.multi ? !!edges.size : true;\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.hasEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`\n    );\n  }\n\n  /**\n   * Method returning the edge matching source & target in a directed fashion.\n   *\n   * @param  {any} source - The edge's source.\n   * @param  {any} target - The edge's target.\n   *\n   * @return {any|undefined}\n   *\n   * @throws {Error} - Will throw if the graph is multi.\n   * @throws {Error} - Will throw if source or target doesn't exist.\n   */\n  directedEdge(source, target) {\n    if (this.type === 'undirected') return;\n\n    source = '' + source;\n    target = '' + target;\n\n    if (this.multi)\n      throw new UsageGraphError(\n        'Graph.directedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.directedEdges instead.'\n      );\n\n    const sourceData = this._nodes.get(source);\n\n    if (!sourceData)\n      throw new NotFoundGraphError(\n        `Graph.directedEdge: could not find the \"${source}\" source node in the graph.`\n      );\n\n    if (!this._nodes.has(target))\n      throw new NotFoundGraphError(\n        `Graph.directedEdge: could not find the \"${target}\" target node in the graph.`\n      );\n\n    const edgeData = (sourceData.out && sourceData.out[target]) || undefined;\n\n    if (edgeData) return edgeData.key;\n  }\n\n  /**\n   * Method returning the edge matching source & target in a undirected fashion.\n   *\n   * @param  {any} source - The edge's source.\n   * @param  {any} target - The edge's target.\n   *\n   * @return {any|undefined}\n   *\n   * @throws {Error} - Will throw if the graph is multi.\n   * @throws {Error} - Will throw if source or target doesn't exist.\n   */\n  undirectedEdge(source, target) {\n    if (this.type === 'directed') return;\n\n    source = '' + source;\n    target = '' + target;\n\n    if (this.multi)\n      throw new UsageGraphError(\n        'Graph.undirectedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.undirectedEdges instead.'\n      );\n\n    const sourceData = this._nodes.get(source);\n\n    if (!sourceData)\n      throw new NotFoundGraphError(\n        `Graph.undirectedEdge: could not find the \"${source}\" source node in the graph.`\n      );\n\n    if (!this._nodes.has(target))\n      throw new NotFoundGraphError(\n        `Graph.undirectedEdge: could not find the \"${target}\" target node in the graph.`\n      );\n\n    const edgeData =\n      (sourceData.undirected && sourceData.undirected[target]) || undefined;\n\n    if (edgeData) return edgeData.key;\n  }\n\n  /**\n   * Method returning the edge matching source & target in a mixed fashion.\n   *\n   * @param  {any} source - The edge's source.\n   * @param  {any} target - The edge's target.\n   *\n   * @return {any|undefined}\n   *\n   * @throws {Error} - Will throw if the graph is multi.\n   * @throws {Error} - Will throw if source or target doesn't exist.\n   */\n  edge(source, target) {\n    if (this.multi)\n      throw new UsageGraphError(\n        'Graph.edge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.edges instead.'\n      );\n\n    source = '' + source;\n    target = '' + target;\n\n    const sourceData = this._nodes.get(source);\n\n    if (!sourceData)\n      throw new NotFoundGraphError(\n        `Graph.edge: could not find the \"${source}\" source node in the graph.`\n      );\n\n    if (!this._nodes.has(target))\n      throw new NotFoundGraphError(\n        `Graph.edge: could not find the \"${target}\" target node in the graph.`\n      );\n\n    const edgeData =\n      (sourceData.out && sourceData.out[target]) ||\n      (sourceData.undirected && sourceData.undirected[target]) ||\n      undefined;\n\n    if (edgeData) return edgeData.key;\n  }\n\n  /**\n   * Method returning whether two nodes are directed neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areDirectedNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areDirectedNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return false;\n\n    return neighbor in nodeData.in || neighbor in nodeData.out;\n  }\n\n  /**\n   * Method returning whether two nodes are out neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areOutNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areOutNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return false;\n\n    return neighbor in nodeData.out;\n  }\n\n  /**\n   * Method returning whether two nodes are in neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areInNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areInNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return false;\n\n    return neighbor in nodeData.in;\n  }\n\n  /**\n   * Method returning whether two nodes are undirected neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areUndirectedNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areUndirectedNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'directed') return false;\n\n    return neighbor in nodeData.undirected;\n  }\n\n  /**\n   * Method returning whether two nodes are neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type !== 'undirected') {\n      if (neighbor in nodeData.in || neighbor in nodeData.out) return true;\n    }\n\n    if (this.type !== 'directed') {\n      if (neighbor in nodeData.undirected) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Method returning whether two nodes are inbound neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areInboundNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areInboundNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type !== 'undirected') {\n      if (neighbor in nodeData.in) return true;\n    }\n\n    if (this.type !== 'directed') {\n      if (neighbor in nodeData.undirected) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Method returning whether two nodes are outbound neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areOutboundNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areOutboundNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type !== 'undirected') {\n      if (neighbor in nodeData.out) return true;\n    }\n\n    if (this.type !== 'directed') {\n      if (neighbor in nodeData.undirected) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Method returning the given node's in degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  inDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.inDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.inDegree + nodeData.directedSelfLoops;\n  }\n\n  /**\n   * Method returning the given node's out degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  outDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.outDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.outDegree + nodeData.directedSelfLoops;\n  }\n\n  /**\n   * Method returning the given node's directed degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  directedDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.directedDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    const loops = nodeData.directedSelfLoops;\n\n    const inDegree = nodeData.inDegree + loops;\n    const outDegree = nodeData.outDegree + loops;\n\n    return inDegree + outDegree;\n  }\n\n  /**\n   * Method returning the given node's undirected degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  undirectedDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.undirectedDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'directed') return 0;\n\n    const loops = nodeData.undirectedSelfLoops;\n\n    return nodeData.undirectedDegree + loops * 2;\n  }\n\n  /**\n   * Method returning the given node's directed degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  degree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.degree: could not find the \"${node}\" node in the graph.`\n      );\n\n    let degree = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree + nodeData.undirectedSelfLoops * 2;\n    }\n\n    if (this.type !== 'undirected') {\n      degree +=\n        nodeData.inDegree + nodeData.outDegree + nodeData.directedSelfLoops * 2;\n    }\n\n    return degree;\n  }\n\n  /**\n   * Method returning the given node's in degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  inDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.inDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.inDegree;\n  }\n\n  /**\n   * Method returning the given node's out degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  outDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.outDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.outDegree;\n  }\n\n  /**\n   * Method returning the given node's directed degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  directedDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.directedDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.inDegree + nodeData.outDegree;\n  }\n\n  /**\n   * Method returning the given node's undirected degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  undirectedDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.undirectedDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'directed') return 0;\n\n    return nodeData.undirectedDegree;\n  }\n\n  /**\n   * Method returning the given node's directed degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  degreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.degreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    let degree = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree;\n    }\n\n    if (this.type !== 'undirected') {\n      degree += nodeData.inDegree + nodeData.outDegree;\n    }\n\n    return degree;\n  }\n\n  /**\n   * Method returning the given edge's source.\n   *\n   * @param  {any} edge - The edge's key.\n   * @return {any}      - The edge's source.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  source(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.source: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.source.key;\n  }\n\n  /**\n   * Method returning the given edge's target.\n   *\n   * @param  {any} edge - The edge's key.\n   * @return {any}      - The edge's target.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  target(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.target: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.target.key;\n  }\n\n  /**\n   * Method returning the given edge's extremities.\n   *\n   * @param  {any}   edge - The edge's key.\n   * @return {array}      - The edge's extremities.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  extremities(edge) {\n    edge = '' + edge;\n\n    const edgeData = this._edges.get(edge);\n\n    if (!edgeData)\n      throw new NotFoundGraphError(\n        `Graph.extremities: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return [edgeData.source.key, edgeData.target.key];\n  }\n\n  /**\n   * Given a node & an edge, returns the other extremity of the edge.\n   *\n   * @param  {any}   node - The node's key.\n   * @param  {any}   edge - The edge's key.\n   * @return {any}        - The related node.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph or if the\n   *                   edge & node are not related.\n   */\n  opposite(node, edge) {\n    node = '' + node;\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.opposite: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    const source = data.source.key,\n      target = data.target.key;\n\n    if (node !== source && node !== target)\n      throw new NotFoundGraphError(\n        `Graph.opposite: the \"${node}\" node is not attached to the \"${edge}\" edge (${source}, ${target}).`\n      );\n\n    return node === source ? target : source;\n  }\n\n  /**\n   * Returns whether the given edge has the given node as extremity.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @param  {any}     node - The node's key.\n   * @return {boolean}      - The related node.\n   *\n   * @throws {Error} - Will throw if either the node or the edge isn't in the graph.\n   */\n  hasExtremity(edge, node) {\n    edge = '' + edge;\n    node = '' + node;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.hasExtremity: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.source.key === node || data.target.key === node;\n  }\n\n  /**\n   * Method returning whether the given edge is undirected.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  isUndirected(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.isUndirected: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.undirected;\n  }\n\n  /**\n   * Method returning whether the given edge is directed.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  isDirected(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.isDirected: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return !data.undirected;\n  }\n\n  /**\n   * Method returning whether the given edge is a self loop.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  isSelfLoop(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.isSelfLoop: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.source === data.target;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Mutation\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method used to add a node to the graph.\n   *\n   * @param  {any}    node         - The node.\n   * @param  {object} [attributes] - Optional attributes.\n   * @return {any}                 - The node.\n   *\n   * @throws {Error} - Will throw if the given node already exist.\n   * @throws {Error} - Will throw if the given attributes are not an object.\n   */\n  addNode(node, attributes) {\n    const nodeData = addNode(this, node, attributes);\n\n    return nodeData.key;\n  }\n\n  /**\n   * Method used to merge a node into the graph.\n   *\n   * @param  {any}    node         - The node.\n   * @param  {object} [attributes] - Optional attributes.\n   * @return {any}                 - The node.\n   */\n  mergeNode(node, attributes) {\n    if (attributes && !isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        `Graph.mergeNode: invalid attributes. Expecting an object but got \"${attributes}\"`\n      );\n\n    // String coercion\n    node = '' + node;\n    attributes = attributes || {};\n\n    // If the node already exists, we merge the attributes\n    let data = this._nodes.get(node);\n\n    if (data) {\n      if (attributes) {\n        assign(data.attributes, attributes);\n\n        this.emit('nodeAttributesUpdated', {\n          type: 'merge',\n          key: node,\n          attributes: data.attributes,\n          data: attributes\n        });\n      }\n      return node;\n    }\n\n    data = new this.NodeDataClass(node, attributes);\n\n    // Adding the node to internal register\n    this._nodes.set(node, data);\n\n    // Emitting\n    this.emit('nodeAdded', {\n      key: node,\n      attributes\n    });\n\n    return node;\n  }\n\n  /**\n   * Method used to add a node if it does not exist in the graph or else to\n   * update its attributes using a function.\n   *\n   * @param  {any}      node      - The node.\n   * @param  {function} [updater] - Optional updater function.\n   * @return {any}                - The node.\n   */\n  updateNode(node, updater) {\n    if (updater && typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        `Graph.updateNode: invalid updater function. Expecting a function but got \"${updater}\"`\n      );\n\n    // String coercion\n    node = '' + node;\n\n    // If the node already exists, we update the attributes\n    let data = this._nodes.get(node);\n\n    if (data) {\n      if (updater) {\n        const oldAttributes = data.attributes;\n        data.attributes = updater(oldAttributes);\n\n        this.emit('nodeAttributesUpdated', {\n          type: 'replace',\n          key: node,\n          attributes: data.attributes\n        });\n      }\n      return node;\n    }\n\n    const attributes = updater ? updater({}) : {};\n\n    data = new this.NodeDataClass(node, attributes);\n\n    // Adding the node to internal register\n    this._nodes.set(node, data);\n\n    // Emitting\n    this.emit('nodeAdded', {\n      key: node,\n      attributes\n    });\n\n    return node;\n  }\n\n  /**\n   * Method used to drop a single node & all its attached edges from the graph.\n   *\n   * @param  {any}    node - The node.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the node doesn't exist.\n   */\n  dropNode(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.dropNode: could not find the \"${node}\" node in the graph.`\n      );\n\n    // Removing attached edges\n    // TODO: we could do faster\n    this.forEachEdge(node, edge => {\n      this.dropEdge(edge);\n    });\n\n    // Dropping the node from the register\n    this._nodes.delete(node);\n\n    // Emitting\n    this.emit('nodeDropped', {\n      key: node,\n      attributes: nodeData.attributes\n    });\n  }\n\n  /**\n   * Method used to drop a single edge from the graph.\n   *\n   * Arity 1:\n   * @param  {any}    edge - The edge.\n   *\n   * Arity 2:\n   * @param  {any}    source - Source node.\n   * @param  {any}    target - Target node.\n   *\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the edge doesn't exist.\n   */\n  dropEdge(edge) {\n    let edgeData;\n\n    if (arguments.length > 1) {\n      const source = '' + arguments[0],\n        target = '' + arguments[1];\n\n      edgeData = getMatchingEdge(this, source, target, this.type);\n\n      if (!edgeData)\n        throw new NotFoundGraphError(\n          `Graph.dropEdge: could not find the \"${source}\" -> \"${target}\" edge in the graph.`\n        );\n    } else {\n      edge = '' + edge;\n\n      edgeData = this._edges.get(edge);\n\n      if (!edgeData)\n        throw new NotFoundGraphError(\n          `Graph.dropEdge: could not find the \"${edge}\" edge in the graph.`\n        );\n    }\n\n    // Dropping the edge from the register\n    this._edges.delete(edgeData.key);\n\n    // Updating related degrees\n    const {source: sourceData, target: targetData, attributes} = edgeData;\n\n    const undirected = edgeData.undirected;\n\n    if (sourceData === targetData) {\n      if (undirected) {\n        sourceData.undirectedSelfLoops--;\n        this._undirectedSelfLoopCount--;\n      } else {\n        sourceData.directedSelfLoops--;\n        this._directedSelfLoopCount--;\n      }\n    } else {\n      if (undirected) {\n        sourceData.undirectedDegree--;\n        targetData.undirectedDegree--;\n      } else {\n        sourceData.outDegree--;\n        targetData.inDegree--;\n      }\n    }\n\n    // Clearing index\n    clearEdgeFromStructureIndex(this, undirected, edgeData);\n\n    if (undirected) this._undirectedSize--;\n    else this._directedSize--;\n\n    // Emitting\n    this.emit('edgeDropped', {\n      key: edge,\n      attributes,\n      source: sourceData.key,\n      target: targetData.key,\n      undirected\n    });\n\n    return this;\n  }\n\n  /**\n   * Method used to remove every edge & every node from the graph.\n   *\n   * @return {Graph}\n   */\n  clear() {\n    // Clearing edges\n    this._edges.clear();\n\n    // Clearing nodes\n    this._nodes.clear();\n\n    // Reset counters\n    this._resetInstanceCounters();\n\n    // Emitting\n    this.emit('cleared');\n  }\n\n  /**\n   * Method used to remove every edge from the graph.\n   *\n   * @return {Graph}\n   */\n  clearEdges() {\n    clearStructureIndex(this);\n\n    // Clearing edges\n    this._edges.clear();\n\n    // Reset counters\n    this._resetInstanceCounters();\n\n    // Emitting\n    this.emit('edgesCleared');\n  }\n\n  /**---------------------------------------------------------------------------\n   * Attributes-related methods\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method returning the desired graph's attribute.\n   *\n   * @param  {string} name - Name of the attribute.\n   * @return {any}\n   */\n  getAttribute(name) {\n    return this._attributes[name];\n  }\n\n  /**\n   * Method returning the graph's attributes.\n   *\n   * @return {object}\n   */\n  getAttributes() {\n    return this._attributes;\n  }\n\n  /**\n   * Method returning whether the graph has the desired attribute.\n   *\n   * @param  {string}  name - Name of the attribute.\n   * @return {boolean}\n   */\n  hasAttribute(name) {\n    return this._attributes.hasOwnProperty(name);\n  }\n\n  /**\n   * Method setting a value for the desired graph's attribute.\n   *\n   * @param  {string}  name  - Name of the attribute.\n   * @param  {any}     value - Value for the attribute.\n   * @return {Graph}\n   */\n  setAttribute(name, value) {\n    this._attributes[name] = value;\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'set',\n      attributes: this._attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method using a function to update the desired graph's attribute's value.\n   *\n   * @param  {string}   name    - Name of the attribute.\n   * @param  {function} updater - Function use to update the attribute's value.\n   * @return {Graph}\n   */\n  updateAttribute(name, updater) {\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateAttribute: updater should be a function.'\n      );\n\n    const value = this._attributes[name];\n\n    this._attributes[name] = updater(value);\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'set',\n      attributes: this._attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method removing the desired graph's attribute.\n   *\n   * @param  {string} name  - Name of the attribute.\n   * @return {Graph}\n   */\n  removeAttribute(name) {\n    delete this._attributes[name];\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'remove',\n      attributes: this._attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method replacing the graph's attributes.\n   *\n   * @param  {object} attributes - New attributes.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if given attributes are not a plain object.\n   */\n  replaceAttributes(attributes) {\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        'Graph.replaceAttributes: provided attributes are not a plain object.'\n      );\n\n    this._attributes = attributes;\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'replace',\n      attributes: this._attributes\n    });\n\n    return this;\n  }\n\n  /**\n   * Method merging the graph's attributes.\n   *\n   * @param  {object} attributes - Attributes to merge.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if given attributes are not a plain object.\n   */\n  mergeAttributes(attributes) {\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        'Graph.mergeAttributes: provided attributes are not a plain object.'\n      );\n\n    assign(this._attributes, attributes);\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'merge',\n      attributes: this._attributes,\n      data: attributes\n    });\n\n    return this;\n  }\n\n  /**\n   * Method returning the desired attribute for the given node.\n   *\n   * @param  {any}    node - Target node.\n   * @param  {string} name - Name of the attribute to get.\n   * @return {any}\n   *\n   * @throws {Error} - Will throw if the node is not found.\n   */\n  getNodeAttribute(node, name) {\n    node = '' + node;\n\n    const data = this._nodes.get(node);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.getNodeAttribute: could not find the \"${node}\" node in the graph.`\n      );\n\n    return data.attributes[name];\n  }\n\n  /**\n   * Method returning the attributes for the given node.\n   *\n   * @param  {any}    node - Target node.\n   * @return {object}\n   *\n   * @throws {Error} - Will throw if the node is not found.\n   */\n  getNodeAttributes(node) {\n    node = '' + node;\n\n    const data = this._nodes.get(node);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.getNodeAttributes: could not find the \"${node}\" node in the graph.`\n      );\n\n    return data.attributes;\n  }\n\n  /**\n   * Method checking whether the given attribute exists for the given node.\n   *\n   * @param  {any}    node - Target node.\n   * @param  {string} name - Name of the attribute to check.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node is not found.\n   */\n  hasNodeAttribute(node, name) {\n    node = '' + node;\n\n    const data = this._nodes.get(node);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.hasNodeAttribute: could not find the \"${node}\" node in the graph.`\n      );\n\n    return data.attributes.hasOwnProperty(name);\n  }\n\n  /**\n   * Method checking setting the desired attribute for the given node.\n   *\n   * @param  {any}    node  - Target node.\n   * @param  {string} name  - Name of the attribute to set.\n   * @param  {any}    value - Value for the attribute.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if less than 3 arguments are passed.\n   * @throws {Error} - Will throw if the node is not found.\n   */\n  setNodeAttribute(node, name, value) {\n    node = '' + node;\n\n    const data = this._nodes.get(node);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.setNodeAttribute: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (arguments.length < 3)\n      throw new InvalidArgumentsGraphError(\n        \"Graph.setNodeAttribute: not enough arguments. Either you forgot to pass the attribute's name or value, or you meant to use #.replaceNodeAttributes / #.mergeNodeAttributes instead.\"\n      );\n\n    data.attributes[name] = value;\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: node,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method checking setting the desired attribute for the given node.\n   *\n   * @param  {any}      node    - Target node.\n   * @param  {string}   name    - Name of the attribute to set.\n   * @param  {function} updater - Function that will update the attribute.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if less than 3 arguments are passed.\n   * @throws {Error} - Will throw if updater is not a function.\n   * @throws {Error} - Will throw if the node is not found.\n   */\n  updateNodeAttribute(node, name, updater) {\n    node = '' + node;\n\n    const data = this._nodes.get(node);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.updateNodeAttribute: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (arguments.length < 3)\n      throw new InvalidArgumentsGraphError(\n        \"Graph.updateNodeAttribute: not enough arguments. Either you forgot to pass the attribute's name or updater, or you meant to use #.replaceNodeAttributes / #.mergeNodeAttributes instead.\"\n      );\n\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateAttribute: updater should be a function.'\n      );\n\n    const attributes = data.attributes;\n    const value = updater(attributes[name]);\n\n    attributes[name] = value;\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: node,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method removing the desired attribute for the given node.\n   *\n   * @param  {any}    node  - Target node.\n   * @param  {string} name  - Name of the attribute to remove.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the node is not found.\n   */\n  removeNodeAttribute(node, name) {\n    node = '' + node;\n\n    const data = this._nodes.get(node);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.removeNodeAttribute: could not find the \"${node}\" node in the graph.`\n      );\n\n    delete data.attributes[name];\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: node,\n      type: 'remove',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method completely replacing the attributes of the given node.\n   *\n   * @param  {any}    node       - Target node.\n   * @param  {object} attributes - New attributes.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the node is not found.\n   * @throws {Error} - Will throw if the given attributes is not a plain object.\n   */\n  replaceNodeAttributes(node, attributes) {\n    node = '' + node;\n\n    const data = this._nodes.get(node);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.replaceNodeAttributes: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        'Graph.replaceNodeAttributes: provided attributes are not a plain object.'\n      );\n\n    data.attributes = attributes;\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: node,\n      type: 'replace',\n      attributes: data.attributes\n    });\n\n    return this;\n  }\n\n  /**\n   * Method merging the attributes of the given node with the provided ones.\n   *\n   * @param  {any}    node       - Target node.\n   * @param  {object} attributes - Attributes to merge.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the node is not found.\n   * @throws {Error} - Will throw if the given attributes is not a plain object.\n   */\n  mergeNodeAttributes(node, attributes) {\n    node = '' + node;\n\n    const data = this._nodes.get(node);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.mergeNodeAttributes: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        'Graph.mergeNodeAttributes: provided attributes are not a plain object.'\n      );\n\n    assign(data.attributes, attributes);\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: node,\n      type: 'merge',\n      attributes: data.attributes,\n      data: attributes\n    });\n\n    return this;\n  }\n\n  /**\n   * Method used to update each node's attributes using the given function.\n   *\n   * @param {function}  updater - Updater function to use.\n   * @param {object}    [hints] - Optional hints.\n   */\n  updateEachNodeAttributes(updater, hints) {\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateEachNodeAttributes: expecting an updater function.'\n      );\n\n    if (hints && !validateHints(hints))\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateEachNodeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n      nodeData.attributes = updater(nodeData.key, nodeData.attributes);\n    }\n\n    this.emit('eachNodeAttributesUpdated', {\n      hints: hints ? hints : null\n    });\n  }\n\n  /**\n   * Method used to update each edge's attributes using the given function.\n   *\n   * @param {function}  updater - Updater function to use.\n   * @param {object}    [hints] - Optional hints.\n   */\n  updateEachEdgeAttributes(updater, hints) {\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateEachEdgeAttributes: expecting an updater function.'\n      );\n\n    if (hints && !validateHints(hints))\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateEachEdgeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}'\n      );\n\n    const iterator = this._edges.values();\n\n    let step, edgeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      edgeData = step.value;\n      edgeData.attributes = updater(edgeData.key, edgeData.attributes);\n    }\n\n    this.emit('eachEdgeAttributesUpdated', {\n      hints: hints ? hints : null\n    });\n  }\n\n  /**---------------------------------------------------------------------------\n   * Iteration-related methods\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method iterating over the graph's adjacency using the given callback.\n   *\n   * @param  {function}  callback - Callback to use.\n   */\n  forEach(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.forEach: expecting a callback.'\n      );\n\n    if (this.multi) forEachAdjacencyMulti(false, this, callback);\n    else forEachAdjacencySimple(false, this, callback);\n  }\n\n  /**\n   * Method returning whether a matching edge can be found using given\n   * predicate function.\n   *\n   * @param  {function}  callback - Callback to use.\n   */\n  find(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError('Graph.find: expecting a callback.');\n\n    if (this.multi) return forEachAdjacencyMulti(true, this, callback);\n\n    return forEachAdjacencySimple(true, this, callback);\n  }\n\n  /**\n   * Method returning an iterator over the graph's adjacency.\n   *\n   * @return {Iterator}\n   */\n  adjacency() {\n    if (this.multi) return createAdjacencyIteratorMulti(this);\n\n    return createAdjacencyIteratorSimple(this);\n  }\n\n  /**\n   * Method returning the list of the graph's nodes.\n   *\n   * @return {array} - The nodes.\n   */\n  nodes() {\n    if (typeof Array.from === 'function') return Array.from(this._nodes.keys());\n\n    return take(this._nodes.keys(), this._nodes.size);\n  }\n\n  /**\n   * Method iterating over the graph's nodes using the given callback.\n   *\n   * @param  {function}  callback - Callback (key, attributes, index).\n   */\n  forEachNode(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.forEachNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n      callback(nodeData.key, nodeData.attributes);\n    }\n  }\n\n  /**\n   * Method iterating attempting to find a node matching the given predicate\n   * function.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  findNode(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.findNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n\n      if (callback(nodeData.key, nodeData.attributes)) return nodeData.key;\n    }\n\n    return;\n  }\n\n  /**\n   * Method mapping nodes.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  mapNodes(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.mapNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    const result = new Array(this.order);\n    let i = 0;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n      result[i++] = callback(nodeData.key, nodeData.attributes);\n    }\n\n    return result;\n  }\n\n  /**\n   * Method returning whether some node verify the given predicate.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  someNode(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.someNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n\n      if (callback(nodeData.key, nodeData.attributes)) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Method returning whether all node verify the given predicate.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  everyNode(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.everyNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n\n      if (!callback(nodeData.key, nodeData.attributes)) return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Method filtering nodes.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  filterNodes(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.filterNodes: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    const result = [];\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n\n      if (callback(nodeData.key, nodeData.attributes))\n        result.push(nodeData.key);\n    }\n\n    return result;\n  }\n\n  /**\n   * Method reducing nodes.\n   *\n   * @param  {function}  callback - Callback (accumulator, key, attributes).\n   */\n  reduceNodes(callback, initialValue) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.reduceNodes: expecting a callback.'\n      );\n\n    if (arguments.length < 2)\n      throw new InvalidArgumentsGraphError(\n        'Graph.reduceNodes: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.'\n      );\n\n    let accumulator = initialValue;\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n      accumulator = callback(accumulator, nodeData.key, nodeData.attributes);\n    }\n\n    return accumulator;\n  }\n\n  /**\n   * Method returning an iterator over the graph's node entries.\n   *\n   * @return {Iterator}\n   */\n  nodeEntries() {\n    const iterator = this._nodes.values();\n\n    return new Iterator(() => {\n      const step = iterator.next();\n\n      if (step.done) return step;\n\n      const data = step.value;\n\n      return {\n        value: {node: data.key, attributes: data.attributes},\n        done: false\n      };\n    });\n  }\n\n  /**---------------------------------------------------------------------------\n   * Serialization\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method exporting the target node.\n   *\n   * @param  {any}   node - Target node.\n   * @return {array}      - The serialized node.\n   *\n   * @throws {Error} - Will throw if the node is not found.\n   */\n  exportNode(node) {\n    node = '' + node;\n\n    const data = this._nodes.get(node);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.exportNode: could not find the \"${node}\" node in the graph.`\n      );\n\n    return serializeNode(node, data);\n  }\n\n  /**\n   * Method exporting the target edge.\n   *\n   * @param  {any}   edge - Target edge.\n   * @return {array}      - The serialized edge.\n   *\n   * @throws {Error} - Will throw if the edge is not found.\n   */\n  exportEdge(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.exportEdge: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return serializeEdge(edge, data);\n  }\n\n  /**\n   * Method used to export the whole graph.\n   *\n   * @return {object} - The serialized graph.\n   */\n  export() {\n    const nodes = new Array(this._nodes.size);\n\n    let i = 0;\n\n    this._nodes.forEach((data, key) => {\n      nodes[i++] = serializeNode(key, data);\n    });\n\n    const edges = new Array(this._edges.size);\n\n    i = 0;\n\n    this._edges.forEach((data, key) => {\n      edges[i++] = serializeEdge(key, data);\n    });\n\n    return {\n      attributes: this.getAttributes(),\n      nodes,\n      edges,\n      options: {\n        type: this.type,\n        multi: this.multi,\n        allowSelfLoops: this.allowSelfLoops\n      }\n    };\n  }\n\n  /**\n   * Method used to import a serialized node.\n   *\n   * @param  {object} data   - The serialized node.\n   * @param  {boolean} merge - Whether to merge the given node.\n   * @return {Graph}         - Returns itself for chaining.\n   */\n  importNode(data, merge = false) {\n    // Validating\n    const error = validateSerializedNode(data);\n\n    if (error) {\n      if (error === 'not-object')\n        throw new InvalidArgumentsGraphError(\n          'Graph.importNode: invalid serialized node. A serialized node should be a plain object with at least a \"key\" property.'\n        );\n      if (error === 'no-key')\n        throw new InvalidArgumentsGraphError(\n          'Graph.importNode: no key provided.'\n        );\n      if (error === 'invalid-attributes')\n        throw new InvalidArgumentsGraphError(\n          'Graph.importNode: invalid attributes. Attributes should be a plain object, null or omitted.'\n        );\n    }\n\n    // Adding the node\n    const {key, attributes = {}} = data;\n\n    if (merge) this.mergeNode(key, attributes);\n    else this.addNode(key, attributes);\n\n    return this;\n  }\n\n  /**\n   * Method used to import a serialized edge.\n   *\n   * @param  {object}  data  - The serialized edge.\n   * @param  {boolean} merge - Whether to merge the given edge.\n   * @return {Graph}         - Returns itself for chaining.\n   */\n  importEdge(data, merge = false) {\n    // Validating\n    const error = validateSerializedEdge(data);\n\n    if (error) {\n      if (error === 'not-object')\n        throw new InvalidArgumentsGraphError(\n          'Graph.importEdge: invalid serialized edge. A serialized edge should be a plain object with at least a \"source\" & \"target\" property.'\n        );\n      if (error === 'no-source')\n        throw new InvalidArgumentsGraphError(\n          'Graph.importEdge: missing souce.'\n        );\n      if (error === 'no-target')\n        throw new InvalidArgumentsGraphError(\n          'Graph.importEdge: missing target.'\n        );\n      if (error === 'invalid-attributes')\n        throw new InvalidArgumentsGraphError(\n          'Graph.importEdge: invalid attributes. Attributes should be a plain object, null or omitted.'\n        );\n      if (error === 'invalid-undirected')\n        throw new InvalidArgumentsGraphError(\n          'Graph.importEdge: invalid undirected. Undirected should be boolean or omitted.'\n        );\n    }\n\n    // Adding the edge\n    const {source, target, attributes = {}, undirected = false} = data;\n\n    let method;\n\n    if ('key' in data) {\n      method = merge\n        ? undirected\n          ? this.mergeUndirectedEdgeWithKey\n          : this.mergeDirectedEdgeWithKey\n        : undirected\n        ? this.addUndirectedEdgeWithKey\n        : this.addDirectedEdgeWithKey;\n\n      method.call(this, data.key, source, target, attributes);\n    } else {\n      method = merge\n        ? undirected\n          ? this.mergeUndirectedEdge\n          : this.mergeDirectedEdge\n        : undirected\n        ? this.addUndirectedEdge\n        : this.addDirectedEdge;\n\n      method.call(this, source, target, attributes);\n    }\n\n    return this;\n  }\n\n  /**\n   * Method used to import a serialized graph.\n   *\n   * @param  {object|Graph} data  - The serialized graph.\n   * @param  {boolean}      merge - Whether to merge data.\n   * @return {Graph}              - Returns itself for chaining.\n   */\n  import(data, merge = false) {\n    // Importing a Graph instance\n    if (isGraph(data)) {\n      this.import(data.export(), merge);\n      return this;\n    }\n\n    // Importing a serialized graph\n    if (!isPlainObject(data))\n      throw new InvalidArgumentsGraphError(\n        'Graph.import: invalid argument. Expecting a serialized graph or, alternatively, a Graph instance.'\n      );\n\n    if (data.attributes) {\n      if (!isPlainObject(data.attributes))\n        throw new InvalidArgumentsGraphError(\n          'Graph.import: invalid attributes. Expecting a plain object.'\n        );\n\n      if (merge) this.mergeAttributes(data.attributes);\n      else this.replaceAttributes(data.attributes);\n    }\n\n    let i, l, list;\n\n    if (data.nodes) {\n      list = data.nodes;\n\n      if (!Array.isArray(list))\n        throw new InvalidArgumentsGraphError(\n          'Graph.import: invalid nodes. Expecting an array.'\n        );\n\n      for (i = 0, l = list.length; i < l; i++) this.importNode(list[i], merge);\n    }\n\n    if (data.edges) {\n      list = data.edges;\n\n      if (!Array.isArray(list))\n        throw new InvalidArgumentsGraphError(\n          'Graph.import: invalid edges. Expecting an array.'\n        );\n\n      for (i = 0, l = list.length; i < l; i++) this.importEdge(list[i], merge);\n    }\n\n    return this;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Utils\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method returning a null copy of the graph, i.e. a graph without nodes\n   * & edges but with the exact same options.\n   *\n   * @param  {object} options - Options to merge with the current ones.\n   * @return {Graph}          - The null copy.\n   */\n  nullCopy(options) {\n    return new Graph(assign({}, this._options, options));\n  }\n\n  /**\n   * Method returning an empty copy of the graph, i.e. a graph without edges but\n   * with the exact same options.\n   *\n   * @param  {object} options - Options to merge with the current ones.\n   * @return {Graph}          - The empty copy.\n   */\n  emptyCopy(options) {\n    const graph = this.nullCopy(options);\n\n    this._nodes.forEach((nodeData, key) => {\n      const attributes = assign({}, nodeData.attributes);\n\n      // NOTE: no need to emit events since user cannot access the instance yet\n      nodeData = new graph.NodeDataClass(key, attributes);\n      graph._nodes.set(key, nodeData);\n    });\n\n    return graph;\n  }\n\n  /**\n   * Method returning an exact copy of the graph.\n   *\n   * @return {Graph} - The copy.\n   */\n  copy() {\n    const graph = this.emptyCopy();\n\n    this.forEachEdge((edge, attr, source, target, _sa, _ta, undirected) => {\n      addEdge(\n        graph,\n        'copy',\n        false,\n        undirected,\n        edge,\n        source,\n        target,\n        assign({}, attr)\n      );\n    });\n\n    return graph;\n  }\n\n  /**\n   * Method upgrading the graph to a mixed one.\n   *\n   * @return {Graph} - The copy.\n   */\n  upgradeToMixed() {\n    if (this.type === 'mixed') return this;\n\n    // Upgrading node data:\n    // NOTE: maybe this could lead to some de-optimization by usual\n    // JavaScript engines but I cannot be sure of it. Another solution\n    // would be to reinstantiate the classes but this surely has a performance\n    // and memory impact.\n    this._nodes.forEach(data => data.upgradeToMixed());\n\n    // Mutating the options & the instance\n    this._options.type = 'mixed';\n    readOnlyProperty(this, 'type', this._options.type);\n    privateProperty(this, 'NodeDataClass', MixedNodeData);\n\n    return this;\n  }\n\n  /**\n   * Method upgrading the graph to a multi one.\n   *\n   * @return {Graph} - The copy.\n   */\n  upgradeToMulti() {\n    if (this.multi) return this;\n\n    // Mutating the options & the instance\n    this._options.multi = true;\n    readOnlyProperty(this, 'multi', true);\n\n    // Upgrading indices\n    upgradeStructureIndexToMulti(this);\n\n    return this;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Known methods\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method used by JavaScript to perform JSON serialization.\n   *\n   * @return {object} - The serialized graph.\n   */\n  toJSON() {\n    return this.export();\n  }\n\n  /**\n   * Method returning [object Graph].\n   */\n  toString() {\n    return '[object Graph]';\n  }\n\n  /**\n   * Method used internally by node's console to display a custom object.\n   *\n   * @return {object} - Formatted object representation of the graph.\n   */\n  inspect() {\n    const nodes = {};\n    this._nodes.forEach((data, key) => {\n      nodes[key] = data.attributes;\n    });\n\n    const edges = {},\n      multiIndex = {};\n\n    this._edges.forEach((data, key) => {\n      const direction = data.undirected ? '--' : '->';\n\n      let label = '';\n\n      let source = data.source.key;\n      let target = data.target.key;\n      let tmp;\n\n      if (data.undirected && source > target) {\n        tmp = source;\n        source = target;\n        target = tmp;\n      }\n\n      const desc = `(${source})${direction}(${target})`;\n\n      if (!key.startsWith('geid_')) {\n        label += `[${key}]: `;\n      } else if (this.multi) {\n        if (typeof multiIndex[desc] === 'undefined') {\n          multiIndex[desc] = 0;\n        } else {\n          multiIndex[desc]++;\n        }\n\n        label += `${multiIndex[desc]}. `;\n      }\n\n      label += desc;\n\n      edges[label] = data.attributes;\n    });\n\n    const dummy = {};\n\n    for (const k in this) {\n      if (\n        this.hasOwnProperty(k) &&\n        !EMITTER_PROPS.has(k) &&\n        typeof this[k] !== 'function'\n      )\n        dummy[k] = this[k];\n    }\n\n    dummy.attributes = this._attributes;\n    dummy.nodes = nodes;\n    dummy.edges = edges;\n\n    privateProperty(dummy, 'constructor', this.constructor);\n\n    return dummy;\n  }\n}\n\n/**\n * Attaching custom inspect method for node >= 10.\n */\nif (typeof Symbol !== 'undefined')\n  Graph.prototype[Symbol.for('nodejs.util.inspect.custom')] =\n    Graph.prototype.inspect;\n\n/**\n * Attaching methods to the prototype.\n *\n * Here, we are attaching a wide variety of methods to the Graph class'\n * prototype when those are very numerous and when their creation is\n * abstracted.\n */\n\n/**\n * Related to edge addition.\n */\nEDGE_ADD_METHODS.forEach(method => {\n  ['add', 'merge', 'update'].forEach(verb => {\n    const name = method.name(verb);\n    const fn = verb === 'add' ? addEdge : mergeEdge;\n\n    if (method.generateKey) {\n      Graph.prototype[name] = function (source, target, attributes) {\n        return fn(\n          this,\n          name,\n          true,\n          (method.type || this.type) === 'undirected',\n          null,\n          source,\n          target,\n          attributes,\n          verb === 'update'\n        );\n      };\n    } else {\n      Graph.prototype[name] = function (edge, source, target, attributes) {\n        return fn(\n          this,\n          name,\n          false,\n          (method.type || this.type) === 'undirected',\n          edge,\n          source,\n          target,\n          attributes,\n          verb === 'update'\n        );\n      };\n    }\n  });\n});\n\n/**\n * Self iterator.\n */\nif (typeof Symbol !== 'undefined')\n  Graph.prototype[Symbol.iterator] = Graph.prototype.adjacency;\n\n/**\n * Attributes-related.\n */\nattachAttributesMethods(Graph);\n\n/**\n * Edge iteration-related.\n */\nattachEdgeIterationMethods(Graph);\n\n/**\n * Neighbor iteration-related.\n */\nattachNeighborIterationMethods(Graph);\n","/**\n * Graphology Helper Classes\n * ==========================\n *\n * Building some higher-order classes instantiating the graph with\n * predefinite options.\n */\nimport {assign} from './utils';\nimport Graph from './graph';\n\nimport {\n  InvalidArgumentsGraphError,\n  NotFoundGraphError,\n  UsageGraphError\n} from './errors';\n\n/**\n * Alternative constructors.\n */\nclass DirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'directed'}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== false)\n      throw new InvalidArgumentsGraphError(\n        'DirectedGraph.from: inconsistent indication that the graph should be multi in given options!'\n      );\n\n    if (finalOptions.type !== 'directed')\n      throw new InvalidArgumentsGraphError(\n        'DirectedGraph.from: inconsistent \"' +\n          finalOptions.type +\n          '\" type in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\nclass UndirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'undirected'}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== false)\n      throw new InvalidArgumentsGraphError(\n        'UndirectedGraph.from: inconsistent indication that the graph should be multi in given options!'\n      );\n\n    if (finalOptions.type !== 'undirected')\n      throw new InvalidArgumentsGraphError(\n        'UndirectedGraph.from: inconsistent \"' +\n          finalOptions.type +\n          '\" type in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\nclass MultiGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({multi: true}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== true)\n      throw new InvalidArgumentsGraphError(\n        'MultiGraph.from: inconsistent indication that the graph should be simple in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\nclass MultiDirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'directed', multi: true}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== true)\n      throw new InvalidArgumentsGraphError(\n        'MultiDirectedGraph.from: inconsistent indication that the graph should be simple in given options!'\n      );\n\n    if (finalOptions.type !== 'directed')\n      throw new InvalidArgumentsGraphError(\n        'MultiDirectedGraph.from: inconsistent \"' +\n          finalOptions.type +\n          '\" type in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\nclass MultiUndirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'undirected', multi: true}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== true)\n      throw new InvalidArgumentsGraphError(\n        'MultiUndirectedGraph.from: inconsistent indication that the graph should be simple in given options!'\n      );\n\n    if (finalOptions.type !== 'undirected')\n      throw new InvalidArgumentsGraphError(\n        'MultiUndirectedGraph.from: inconsistent \"' +\n          finalOptions.type +\n          '\" type in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\n\n/**\n * Attaching static #.from method to each of the constructors.\n */\nfunction attachStaticFromMethod(Class) {\n  /**\n   * Builds a graph from serialized data or another graph's data.\n   *\n   * @param  {Graph|SerializedGraph} data      - Hydratation data.\n   * @param  {object}                [options] - Options.\n   * @return {Class}\n   */\n  Class.from = function (data, options) {\n    // Merging given options with serialized ones\n    const finalOptions = assign({}, data.options, options);\n\n    const instance = new Class(finalOptions);\n    instance.import(data);\n\n    return instance;\n  };\n}\n\nattachStaticFromMethod(Graph);\nattachStaticFromMethod(DirectedGraph);\nattachStaticFromMethod(UndirectedGraph);\nattachStaticFromMethod(MultiGraph);\nattachStaticFromMethod(MultiDirectedGraph);\nattachStaticFromMethod(MultiUndirectedGraph);\n\nGraph.Graph = Graph;\nGraph.DirectedGraph = DirectedGraph;\nGraph.UndirectedGraph = UndirectedGraph;\nGraph.MultiGraph = MultiGraph;\nGraph.MultiDirectedGraph = MultiDirectedGraph;\nGraph.MultiUndirectedGraph = MultiUndirectedGraph;\n\nGraph.InvalidArgumentsGraphError = InvalidArgumentsGraphError;\nGraph.NotFoundGraphError = NotFoundGraphError;\nGraph.UsageGraphError = UsageGraphError;\n\nexport {\n  Graph,\n  DirectedGraph,\n  UndirectedGraph,\n  MultiGraph,\n  MultiDirectedGraph,\n  MultiUndirectedGraph\n};\n"],"names":["assign","target","arguments","i","l","length","k","getMatchingEdge","graph","source","type","sourceData","_nodes","get","edge","out","undirected","isGraph","value","_typeof","addUndirectedEdgeWithKey","dropNode","isPlainObject","constructor","Object","isEmpty","o","privateProperty","name","defineProperty","enumerable","configurable","writable","readOnlyProperty","descriptor","validateHints","hints","attributes","Array","isArray","ReflectOwnKeys","R","Reflect","ReflectApply","apply","receiver","args","Function","prototype","call","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","concat","NumberIsNaN","Number","isNaN","EventEmitter","init","this","emitter","Promise","resolve","reject","errorListener","err","removeListener","resolver","slice","eventTargetAgnosticAddListener","once","handler","flags","on","addErrorHandlerIfEventEmitter","_events","undefined","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","listener","TypeError","_getMaxListeners","that","_addListener","prepend","m","events","existing","warning","create","newListener","emit","unshift","push","warned","w","Error","String","count","console","warn","onceWrapper","fired","wrapFn","_onceWrap","state","wrapped","bind","_listeners","unwrap","evlistener","arr","ret","unwrapListeners","arrayClone","listenerCount","n","copy","addEventListener","wrapListener","arg","removeEventListener","Iterator","next","set","RangeError","getPrototypeOf","setMaxListeners","getMaxListeners","doError","error","er","message","context","len","listeners","addListener","prependListener","prependOnceListener","list","position","originalListener","shift","index","pop","spliceOne","off","removeAllListeners","key","keys","rawListeners","eventNames","Symbol","iterator","of","done","empty","fromSequence","sequence","is","ArrayBuffer","require$$0","support","require$$1","ARRAY_BUFFER_SUPPORT","SYMBOL_SUPPORT","iter","isView","iterOrNull","take","iterable","step","Infinity","array","GraphError","InvalidArgumentsGraphError","captureStackTrace","NotFoundGraphError","UsageGraphError","MixedNodeData","clear","DirectedNodeData","UndirectedNodeData","EdgeData","updateStructureIndex","edgeData","targetData","adj","container","outKey","inKey","multi","Set","add","clearEdgeFromStructureIndex","sourceIndex","size","inDegree","outDegree","undirectedDegree","directedSelfLoops","undirectedSelfLoops","upgradeToMixed","ATTRIBUTES_METHODS","element","attacher","Class","method","data","_edges","hasOwnProperty","updater","chain","current","iterables","iterate","EDGES_ITERATION","direction","collectSimple","edges","object","collectMulti","forEach","forEachSimple","callback","avoid","forEachMulti","findSimple","findMulti","values","createIterator","inner","sourceAttributes","targetAttributes","collectForKeySimple","collectForKeyMulti","edgesData","forEachForKeySimple","forEachForKeyMulti","findForKeySimple","findForKeyMulti","createIteratorForKey","v","createEdgeArray","from","undirectedSize","directedSize","mask","forEachEdge","shouldFilter","findEdge","createEdgeIterator","createEdgeArrayForNode","nodeData","fn","splice","lastIndexOf","forEachEdgeForNode","findEdgeForNode","found","createEdgeIteratorForNode","createEdgeArrayForPath","forEachEdgeForPath","findEdgeForPath","createEdgeIteratorForPath","NEIGHBORS_ITERATION","merge","neighbors","neighbor","forEachInObject","neighborData","forEachInObjectOnce","visited","has","findInObject","findInObjectOnce","createObjectIterator","createDedupedObjectIterator","attachNeighborArrayCreator","description","node","createNeighborArrayForNode","attachForEachNeighbor","forEachName","toUpperCase","forEachNeighborForNode","mapName","result","a","filterName","reduceName","initialValue","accumulator","attachFindNeighbor","capitalizedSingular","findName","findNeighbor","someName","everyName","attachNeighborIteratorCreator","iteratorName","createNeighborIterator","forEachAdjacencySimple","breakable","shouldBreak","forEachAdjacencyMulti","containerStep","serializeNode","serialized","serializeEdge","validateSerializedNode","validateSerializedEdge","INSTANCE_ID","Math","floor","random","TYPES","EMITTER_PROPS","DEFAULTS","allowSelfLoops","unsafeAddNode","NodeDataClass","addEdge","mustGenerateKey","eventData","_edgeKeyGenerator","_undirectedSelfLoopCount","_directedSelfLoopCount","_undirectedSize","_directedSize","mergeEdge","asUpdater","alreadyExistingEdgeData","oldAttributes","Graph","options","instanceId","edgeId","Map","availableEdgeKey","_this","prop","_options","_resetInstanceCounters","hasNode","hasDirectedEdge","hasUndirectedEdge","hasEdge","directedEdge","undirectedEdge","areDirectedNeighbors","areOutNeighbors","areInNeighbors","areUndirectedNeighbors","areNeighbors","areInboundNeighbors","areOutboundNeighbors","directedDegree","loops","degree","inDegreeWithoutSelfLoops","outDegreeWithoutSelfLoops","directedDegreeWithoutSelfLoops","undirectedDegreeWithoutSelfLoops","degreeWithoutSelfLoops","extremities","opposite","hasExtremity","isUndirected","isDirected","isSelfLoop","addNode","mergeNode","updateNode","_this2","dropEdge","clearEdges","clearStructureIndex","getAttribute","_attributes","getAttributes","hasAttribute","setAttribute","updateAttribute","removeAttribute","replaceAttributes","mergeAttributes","getNodeAttribute","getNodeAttributes","hasNodeAttribute","setNodeAttribute","updateNodeAttribute","removeNodeAttribute","replaceNodeAttributes","mergeNodeAttributes","updateEachNodeAttributes","updateEachEdgeAttributes","find","adjacency","offset","edgeAttributes","edgeKey","createAdjacencyIteratorSimple","nodes","forEachNode","findNode","mapNodes","order","someNode","everyNode","filterNodes","reduceNodes","nodeEntries","exportNode","exportEdge","importNode","importEdge","mergeUndirectedEdgeWithKey","mergeDirectedEdgeWithKey","addDirectedEdgeWithKey","mergeUndirectedEdge","mergeDirectedEdge","addUndirectedEdge","addDirectedEdge","nullCopy","emptyCopy","attr","_sa","_ta","upgradeToMulti","toJSON","toString","inspect","multiIndex","tmp","label","desc","startsWith","_this3","dummy","verb","generateKey","attachAttributesMethods","attachEdgeArrayCreator","e","ea","s","t","sa","ta","u","attachForEachEdge","findEdgeName","attachFindEdge","originalName","attachEdgeIteratorCreator","attachEdgeIterationMethods","attachNeighborIterationMethods","DirectedGraph","finalOptions","_Graph","UndirectedGraph","_Graph2","MultiGraph","_Graph3","MultiDirectedGraph","_Graph4","MultiUndirectedGraph","_Graph5","attachStaticFromMethod","instance"],"mappings":"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"}