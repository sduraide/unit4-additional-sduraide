{"version":3,"file":"graphology.umd.js","sources":["../src/utils.js","../../../node_modules/events/events.js","../../../node_modules/obliterator/iterator.js","../../../node_modules/obliterator/support.js","../../../node_modules/obliterator/iter.js","../../../node_modules/obliterator/take.js","../src/errors.js","../src/data.js","../src/indices.js","../src/attributes.js","../../../node_modules/obliterator/chain.js","../src/iteration/edges.js","../src/iteration/neighbors.js","../src/iteration/adjacency.js","../src/serialization.js","../src/graph.js","../src/classes.js","../src/endpoint.cjs.js"],"sourcesContent":["/**\n * Graphology Utilities\n * =====================\n *\n * Collection of helpful functions used by the implementation.\n */\n\n/**\n * Object.assign-like polyfill.\n *\n * @param  {object} target       - First object.\n * @param  {object} [...objects] - Objects to merge.\n * @return {object}\n */\nfunction assignPolyfill() {\n  const target = arguments[0];\n\n  for (let i = 1, l = arguments.length; i < l; i++) {\n    if (!arguments[i]) continue;\n\n    for (const k in arguments[i]) target[k] = arguments[i][k];\n  }\n\n  return target;\n}\n\nlet assign = assignPolyfill;\n\nif (typeof Object.assign === 'function') assign = Object.assign;\n\nexport {assign};\n\n/**\n * Function returning the first matching edge for given path.\n * Note: this function does not check the existence of source & target. This\n * must be performed by the caller.\n *\n * @param  {Graph}  graph  - Target graph.\n * @param  {any}    source - Source node.\n * @param  {any}    target - Target node.\n * @param  {string} type   - Type of the edge (mixed, directed or undirected).\n * @return {string|null}\n */\nexport function getMatchingEdge(graph, source, target, type) {\n  const sourceData = graph._nodes.get(source);\n\n  let edge = null;\n\n  if (!sourceData) return edge;\n\n  if (type === 'mixed') {\n    edge =\n      (sourceData.out && sourceData.out[target]) ||\n      (sourceData.undirected && sourceData.undirected[target]);\n  } else if (type === 'directed') {\n    edge = sourceData.out && sourceData.out[target];\n  } else {\n    edge = sourceData.undirected && sourceData.undirected[target];\n  }\n\n  return edge;\n}\n\n/**\n * Checks whether the given value is a Graph implementation instance.\n *\n * @param  {mixed}   value - Target value.\n * @return {boolean}\n */\nexport function isGraph(value) {\n  return (\n    value !== null &&\n    typeof value === 'object' &&\n    typeof value.addUndirectedEdgeWithKey === 'function' &&\n    typeof value.dropNode === 'function'\n  );\n}\n\n/**\n * Checks whether the given value is a plain object.\n *\n * @param  {mixed}   value - Target value.\n * @return {boolean}\n */\nexport function isPlainObject(value) {\n  return (\n    typeof value === 'object' && value !== null && value.constructor === Object\n  );\n}\n\n/**\n * Checks whether the given object is empty.\n *\n * @param  {object}  o - Target Object.\n * @return {boolean}\n */\nexport function isEmpty(o) {\n  let k;\n\n  for (k in o) return false;\n\n  return true;\n}\n\n/**\n * Creates a \"private\" property for the given member name by concealing it\n * using the `enumerable` option.\n *\n * @param {object} target - Target object.\n * @param {string} name   - Member name.\n */\nexport function privateProperty(target, name, value) {\n  Object.defineProperty(target, name, {\n    enumerable: false,\n    configurable: false,\n    writable: true,\n    value\n  });\n}\n\n/**\n * Creates a read-only property for the given member name & the given getter.\n *\n * @param {object}   target - Target object.\n * @param {string}   name   - Member name.\n * @param {mixed}    value  - The attached getter or fixed value.\n */\nexport function readOnlyProperty(target, name, value) {\n  const descriptor = {\n    enumerable: true,\n    configurable: true\n  };\n\n  if (typeof value === 'function') {\n    descriptor.get = value;\n  } else {\n    descriptor.value = value;\n    descriptor.writable = false;\n  }\n\n  Object.defineProperty(target, name, descriptor);\n}\n\n/**\n * Returns whether the given object constitute valid hints.\n *\n * @param {object} hints - Target object.\n */\nexport function validateHints(hints) {\n  if (!isPlainObject(hints)) return false;\n\n  if (hints.attributes && !Array.isArray(hints.attributes)) return false;\n\n  return true;\n}\n\n/**\n * Creates a function generating incremental ids for edges.\n *\n * @return {function}\n */\nexport function incrementalIdStartingFromRandomByte() {\n  let i = Math.floor(Math.random() * 256) & 0xff;\n\n  return () => {\n    return i++;\n  };\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","/**\n * Obliterator Iterator Class\n * ===========================\n *\n * Simple class representing the library's iterators.\n */\n\n/**\n * Iterator class.\n *\n * @constructor\n * @param {function} next - Next function.\n */\nfunction Iterator(next) {\n  if (typeof next !== 'function')\n    throw new Error('obliterator/iterator: expecting a function!');\n\n  this.next = next;\n}\n\n/**\n * If symbols are supported, we add `next` to `Symbol.iterator`.\n */\nif (typeof Symbol !== 'undefined')\n  Iterator.prototype[Symbol.iterator] = function () {\n    return this;\n  };\n\n/**\n * Returning an iterator of the given values.\n *\n * @param  {any...} values - Values.\n * @return {Iterator}\n */\nIterator.of = function () {\n  var args = arguments,\n    l = args.length,\n    i = 0;\n\n  return new Iterator(function () {\n    if (i >= l) return {done: true};\n\n    return {done: false, value: args[i++]};\n  });\n};\n\n/**\n * Returning an empty iterator.\n *\n * @return {Iterator}\n */\nIterator.empty = function () {\n  var iterator = new Iterator(function () {\n    return {done: true};\n  });\n\n  return iterator;\n};\n\n/**\n * Returning an iterator over the given indexed sequence.\n *\n * @param  {string|Array} sequence - Target sequence.\n * @return {Iterator}\n */\nIterator.fromSequence = function (sequence) {\n  var i = 0,\n    l = sequence.length;\n\n  return new Iterator(function () {\n    if (i >= l) return {done: true};\n\n    return {done: false, value: sequence[i++]};\n  });\n};\n\n/**\n * Returning whether the given value is an iterator.\n *\n * @param  {any} value - Value.\n * @return {boolean}\n */\nIterator.is = function (value) {\n  if (value instanceof Iterator) return true;\n\n  return (\n    typeof value === 'object' &&\n    value !== null &&\n    typeof value.next === 'function'\n  );\n};\n\n/**\n * Exporting.\n */\nmodule.exports = Iterator;\n","exports.ARRAY_BUFFER_SUPPORT = typeof ArrayBuffer !== 'undefined';\nexports.SYMBOL_SUPPORT = typeof Symbol !== 'undefined';\n","/**\n * Obliterator Iter Function\n * ==========================\n *\n * Function coercing values to an iterator. It can be quite useful when needing\n * to handle iterables and iterators the same way.\n */\nvar Iterator = require('./iterator.js');\nvar support = require('./support.js');\n\nvar ARRAY_BUFFER_SUPPORT = support.ARRAY_BUFFER_SUPPORT;\nvar SYMBOL_SUPPORT = support.SYMBOL_SUPPORT;\n\nfunction iterOrNull(target) {\n  // Indexed sequence\n  if (\n    typeof target === 'string' ||\n    Array.isArray(target) ||\n    (ARRAY_BUFFER_SUPPORT && ArrayBuffer.isView(target))\n  )\n    return Iterator.fromSequence(target);\n\n  // Invalid value\n  if (typeof target !== 'object' || target === null) return null;\n\n  // Iterable\n  if (SYMBOL_SUPPORT && typeof target[Symbol.iterator] === 'function')\n    return target[Symbol.iterator]();\n\n  // Iterator duck-typing\n  if (typeof target.next === 'function') return target;\n\n  // Invalid object\n  return null;\n}\n\nmodule.exports = function iter(target) {\n  var iterator = iterOrNull(target);\n\n  if (!iterator)\n    throw new Error(\n      'obliterator: target is not iterable nor a valid iterator.'\n    );\n\n  return iterator;\n};\n","/* eslint no-constant-condition: 0 */\n/**\n * Obliterator Take Function\n * ==========================\n *\n * Function taking n or every value of the given iterator and returns them\n * into an array.\n */\nvar iter = require('./iter.js');\n\n/**\n * Take.\n *\n * @param  {Iterable} iterable - Target iterable.\n * @param  {number}   [n]      - Optional number of items to take.\n * @return {array}\n */\nmodule.exports = function take(iterable, n) {\n  var l = arguments.length > 1 ? n : Infinity,\n    array = l !== Infinity ? new Array(l) : [],\n    step,\n    i = 0;\n\n  var iterator = iter(iterable);\n\n  while (true) {\n    if (i === l) return array;\n\n    step = iterator.next();\n\n    if (step.done) {\n      if (i !== n) array.length = i;\n\n      return array;\n    }\n\n    array[i++] = step.value;\n  }\n};\n","/**\n * Graphology Custom Errors\n * =========================\n *\n * Defining custom errors for ease of use & easy unit tests across\n * implementations (normalized typology rather than relying on error\n * messages to check whether the correct error was found).\n */\nexport class GraphError extends Error {\n  constructor(message) {\n    super();\n    this.name = 'GraphError';\n    this.message = message;\n  }\n}\n\nexport class InvalidArgumentsGraphError extends GraphError {\n  constructor(message) {\n    super(message);\n    this.name = 'InvalidArgumentsGraphError';\n\n    // This is V8 specific to enhance stack readability\n    if (typeof Error.captureStackTrace === 'function')\n      Error.captureStackTrace(\n        this,\n        InvalidArgumentsGraphError.prototype.constructor\n      );\n  }\n}\n\nexport class NotFoundGraphError extends GraphError {\n  constructor(message) {\n    super(message);\n    this.name = 'NotFoundGraphError';\n\n    // This is V8 specific to enhance stack readability\n    if (typeof Error.captureStackTrace === 'function')\n      Error.captureStackTrace(this, NotFoundGraphError.prototype.constructor);\n  }\n}\n\nexport class UsageGraphError extends GraphError {\n  constructor(message) {\n    super(message);\n    this.name = 'UsageGraphError';\n\n    // This is V8 specific to enhance stack readability\n    if (typeof Error.captureStackTrace === 'function')\n      Error.captureStackTrace(this, UsageGraphError.prototype.constructor);\n  }\n}\n","/**\n * Graphology Internal Data Classes\n * =================================\n *\n * Internal classes hopefully reduced to structs by engines & storing\n * necessary information for nodes & edges.\n *\n * Note that those classes don't rely on the `class` keyword to avoid some\n * cruft introduced by most of ES2015 transpilers.\n */\n\n/**\n * MixedNodeData class.\n *\n * @constructor\n * @param {string} string     - The node's key.\n * @param {object} attributes - Node's attributes.\n */\nexport function MixedNodeData(key, attributes) {\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n\n  this.clear();\n}\n\nMixedNodeData.prototype.clear = function () {\n  // Degrees\n  this.inDegree = 0;\n  this.outDegree = 0;\n  this.undirectedDegree = 0;\n  this.directedSelfLoops = 0;\n  this.undirectedSelfLoops = 0;\n\n  // Indices\n  this.in = {};\n  this.out = {};\n  this.undirected = {};\n};\n\n/**\n * DirectedNodeData class.\n *\n * @constructor\n * @param {string} string     - The node's key.\n * @param {object} attributes - Node's attributes.\n */\nexport function DirectedNodeData(key, attributes) {\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n\n  this.clear();\n}\n\nDirectedNodeData.prototype.clear = function () {\n  // Degrees\n  this.inDegree = 0;\n  this.outDegree = 0;\n  this.directedSelfLoops = 0;\n\n  // Indices\n  this.in = {};\n  this.out = {};\n};\n\nDirectedNodeData.prototype.upgradeToMixed = function () {\n  // Degrees\n  this.undirectedDegree = 0;\n  this.undirectedSelfLoops = 0;\n\n  // Indices\n  this.undirected = {};\n};\n\n/**\n * UndirectedNodeData class.\n *\n * @constructor\n * @param {string} string     - The node's key.\n * @param {object} attributes - Node's attributes.\n */\nexport function UndirectedNodeData(key, attributes) {\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n\n  this.clear();\n}\n\nUndirectedNodeData.prototype.clear = function () {\n  // Degrees\n  this.undirectedDegree = 0;\n  this.undirectedSelfLoops = 0;\n\n  // Indices\n  this.undirected = {};\n};\n\nUndirectedNodeData.prototype.upgradeToMixed = function () {\n  // Degrees\n  this.inDegree = 0;\n  this.outDegree = 0;\n  this.directedSelfLoops = 0;\n\n  // Indices\n  this.in = {};\n  this.out = {};\n};\n\n/**\n * EdgeData class.\n *\n * @constructor\n * @param {boolean} undirected   - Whether the edge is undirected.\n * @param {string}  string       - The edge's key.\n * @param {string}  source       - Source of the edge.\n * @param {string}  target       - Target of the edge.\n * @param {object}  attributes   - Edge's attributes.\n */\nexport function EdgeData(undirected, key, source, target, attributes) {\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n  this.undirected = undirected;\n\n  // Extremities\n  this.source = source;\n  this.target = target;\n}\n","/**\n * Graphology Indexes Functions\n * =============================\n *\n * Bunch of functions used to compute or clear indexes.\n */\n\n/**\n * Function updating the 'structure' index with the given edge's data.\n * Note that in the case of the multi graph, related edges are stored in a\n * set that is the same for A -> B & B <- A.\n *\n * @param {Graph}    graph      - Target Graph instance.\n * @param {EdgeData} edgeData   - Added edge's data.\n * @param {NodeData} sourceData - Source node's data.\n * @param {NodeData} targetData - Target node's data.\n */\nexport function updateStructureIndex(\n  graph,\n  undirected,\n  edgeData,\n  source,\n  target,\n  sourceData,\n  targetData\n) {\n  const multi = graph.multi;\n\n  let outKey = 'out';\n  let inKey = 'in';\n\n  if (undirected) outKey = inKey = 'undirected';\n\n  let adj, container;\n\n  if (multi) {\n    // Handling source\n    adj = sourceData[outKey];\n    container = adj[target];\n\n    if (typeof container === 'undefined') {\n      container = new Set();\n      adj[target] = container;\n    }\n\n    container.add(edgeData);\n\n    // If selfLoop, we break here\n    if (source === target && undirected) return;\n\n    // Handling target (we won't add the edge because it was already taken\n    // care of with source above)\n    adj = targetData[inKey];\n    if (typeof adj[source] === 'undefined') adj[source] = container;\n  } else {\n    // Handling source\n    sourceData[outKey][target] = edgeData;\n\n    // If selfLoop, we break here\n    if (source === target && undirected) return;\n\n    // Handling target\n    targetData[inKey][source] = edgeData;\n  }\n}\n\n/**\n * Function clearing the 'structure' index data related to the given edge.\n *\n * @param {Graph}    graph    - Target Graph instance.\n * @param {EdgeData} edgeData - Dropped edge's data.\n */\nexport function clearEdgeFromStructureIndex(graph, undirected, edgeData) {\n  const multi = graph.multi;\n\n  const {source: sourceData, target: targetData} = edgeData;\n\n  const source = sourceData.key,\n    target = targetData.key;\n\n  // NOTE: since the edge set is the same for source & target, we can only\n  // affect source\n  const outKey = undirected ? 'undirected' : 'out',\n    sourceIndex = sourceData[outKey];\n\n  const inKey = undirected ? 'undirected' : 'in';\n\n  if (target in sourceIndex) {\n    if (multi) {\n      const set = sourceIndex[target];\n\n      if (set.size === 1) {\n        delete sourceIndex[target];\n        delete targetData[inKey][source];\n      } else {\n        set.delete(edgeData);\n      }\n    } else delete sourceIndex[target];\n  }\n\n  if (multi) return;\n\n  const targetIndex = targetData[inKey];\n\n  delete targetIndex[source];\n}\n\n/**\n * Function clearing the whole 'structure' index.\n *\n * @param {Graph} graph - Target Graph instance.\n */\nexport function clearStructureIndex(graph) {\n  const iterator = graph._nodes.values();\n\n  let step;\n\n  while (((step = iterator.next()), step.done !== true)) {\n    step.value.clear();\n  }\n}\n\n/**\n * Function used to upgrade a simple `structure` index to a multi on.\n *\n * @param {Graph}  graph - Target Graph instance.\n */\nexport function upgradeStructureIndexToMulti(graph) {\n  graph._nodes.forEach((data, node) => {\n    // Directed\n    if (data.out) {\n      for (const neighbor in data.out) {\n        const edges = new Set();\n        edges.add(data.out[neighbor]);\n        data.out[neighbor] = edges;\n        graph._nodes.get(neighbor).in[node] = edges;\n      }\n    }\n\n    // Undirected\n    if (data.undirected) {\n      for (const neighbor in data.undirected) {\n        if (neighbor > node) continue;\n\n        const edges = new Set();\n        edges.add(data.undirected[neighbor]);\n        data.undirected[neighbor] = edges;\n        graph._nodes.get(neighbor).undirected[node] = edges;\n      }\n    }\n  });\n}\n","/**\n * Graphology Attributes methods\n * ==============================\n *\n * Attributes-related methods being exactly the same for nodes & edges,\n * we abstract them here for factorization reasons.\n */\nimport {assign, isPlainObject, getMatchingEdge} from './utils';\n\nimport {\n  InvalidArgumentsGraphError,\n  NotFoundGraphError,\n  UsageGraphError\n} from './errors';\n\n/**\n * Attach an attribute getter method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachAttributeGetter(Class, method, type) {\n  /**\n   * Get the desired attribute for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   *\n   * @return {mixed}          - The attribute's value.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + name;\n\n      name = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (type !== 'mixed' && data.undirected !== (type === 'undirected'))\n      throw new NotFoundGraphError(\n        `Graph.${method}: could not find the \"${element}\" ${type} edge in the graph.`\n      );\n\n    return data.attributes[name];\n  };\n}\n\n/**\n * Attach an attributes getter method onto the provided class.\n *\n * @param {function} Class       - Target class.\n * @param {string}   method      - Method name.\n * @param {string}   type        - Type of the edge to find.\n */\nfunction attachAttributesGetter(Class, method, type) {\n  /**\n   * Retrieves all the target element's attributes.\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   *\n   * @return {object}          - The element's attributes.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 1) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + arguments[1];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (type !== 'mixed' && data.undirected !== (type === 'undirected'))\n      throw new NotFoundGraphError(\n        `Graph.${method}: could not find the \"${element}\" ${type} edge in the graph.`\n      );\n\n    return data.attributes;\n  };\n}\n\n/**\n * Attach an attribute checker method onto the provided class.\n *\n * @param {function} Class       - Target class.\n * @param {string}   method      - Method name.\n * @param {string}   type        - Type of the edge to find.\n */\nfunction attachAttributeChecker(Class, method, type) {\n  /**\n   * Checks whether the desired attribute is set for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + name;\n\n      name = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (type !== 'mixed' && data.undirected !== (type === 'undirected'))\n      throw new NotFoundGraphError(\n        `Graph.${method}: could not find the \"${element}\" ${type} edge in the graph.`\n      );\n\n    return data.attributes.hasOwnProperty(name);\n  };\n}\n\n/**\n * Attach an attribute setter method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachAttributeSetter(Class, method, type) {\n  /**\n   * Set the desired attribute for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   * @param  {mixed}  value   - New attribute value.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   * @param  {mixed}  value   - New attribute value.\n   *\n   * @return {Graph}          - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name, value) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 3) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + name;\n\n      name = arguments[2];\n      value = arguments[3];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (type !== 'mixed' && data.undirected !== (type === 'undirected'))\n      throw new NotFoundGraphError(\n        `Graph.${method}: could not find the \"${element}\" ${type} edge in the graph.`\n      );\n\n    data.attributes[name] = value;\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute updater method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachAttributeUpdater(Class, method, type) {\n  /**\n   * Update the desired attribute for the given element (node or edge) using\n   * the provided function.\n   *\n   * Arity 2:\n   * @param  {any}      element - Target element.\n   * @param  {string}   name    - Attribute's name.\n   * @param  {function} updater - Updater function.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}      source  - Source element.\n   * @param  {any}      target  - Target element.\n   * @param  {string}   name    - Attribute's name.\n   * @param  {function} updater - Updater function.\n   *\n   * @return {Graph}            - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name, updater) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 3) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + name;\n\n      name = arguments[2];\n      updater = arguments[3];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: updater should be a function.`\n      );\n\n    if (type !== 'mixed' && data.undirected !== (type === 'undirected'))\n      throw new NotFoundGraphError(\n        `Graph.${method}: could not find the \"${element}\" ${type} edge in the graph.`\n      );\n\n    data.attributes[name] = updater(data.attributes[name]);\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute remover method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachAttributeRemover(Class, method, type) {\n  /**\n   * Remove the desired attribute for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   *\n   * @return {Graph}          - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + name;\n\n      name = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (type !== 'mixed' && data.undirected !== (type === 'undirected'))\n      throw new NotFoundGraphError(\n        `Graph.${method}: could not find the \"${element}\" ${type} edge in the graph.`\n      );\n\n    delete data.attributes[name];\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'remove',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute replacer method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachAttributesReplacer(Class, method, type) {\n  /**\n   * Replace the attributes for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element    - Target element.\n   * @param  {object} attributes - New attributes.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source     - Source element.\n   * @param  {any}     target     - Target element.\n   * @param  {object}  attributes - New attributes.\n   *\n   * @return {Graph}              - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, attributes) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + attributes;\n\n      attributes = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided attributes are not a plain object.`\n      );\n\n    if (type !== 'mixed' && data.undirected !== (type === 'undirected'))\n      throw new NotFoundGraphError(\n        `Graph.${method}: could not find the \"${element}\" ${type} edge in the graph.`\n      );\n\n    data.attributes = attributes;\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'replace',\n      attributes: data.attributes\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute merger method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachAttributesMerger(Class, method, type) {\n  /**\n   * Replace the attributes for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element    - Target element.\n   * @param  {object} attributes - Attributes to merge.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source     - Source element.\n   * @param  {any}     target     - Target element.\n   * @param  {object}  attributes - Attributes to merge.\n   *\n   * @return {Graph}              - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, attributes) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + attributes;\n\n      attributes = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided attributes are not a plain object.`\n      );\n\n    if (type !== 'mixed' && data.undirected !== (type === 'undirected'))\n      throw new NotFoundGraphError(\n        `Graph.${method}: could not find the \"${element}\" ${type} edge in the graph.`\n      );\n\n    assign(data.attributes, attributes);\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'merge',\n      attributes: data.attributes,\n      data: attributes\n    });\n\n    return this;\n  };\n}\n\n/**\n * List of methods to attach.\n */\nconst ATTRIBUTES_METHODS = [\n  {\n    name: element => `get${element}Attribute`,\n    attacher: attachAttributeGetter\n  },\n  {\n    name: element => `get${element}Attributes`,\n    attacher: attachAttributesGetter\n  },\n  {\n    name: element => `has${element}Attribute`,\n    attacher: attachAttributeChecker\n  },\n  {\n    name: element => `set${element}Attribute`,\n    attacher: attachAttributeSetter\n  },\n  {\n    name: element => `update${element}Attribute`,\n    attacher: attachAttributeUpdater\n  },\n  {\n    name: element => `remove${element}Attribute`,\n    attacher: attachAttributeRemover\n  },\n  {\n    name: element => `replace${element}Attributes`,\n    attacher: attachAttributesReplacer\n  },\n  {\n    name: element => `merge${element}Attributes`,\n    attacher: attachAttributesMerger\n  }\n];\n\n/**\n * Attach every attributes-related methods to a Graph class.\n *\n * @param {function} Graph - Target class.\n */\nexport function attachAttributesMethods(Graph) {\n  ATTRIBUTES_METHODS.forEach(function ({name, attacher}) {\n    // For edges\n    attacher(Graph, name('Edge'), 'mixed');\n\n    // For directed edges\n    attacher(Graph, name('DirectedEdge'), 'directed');\n\n    // For undirected edges\n    attacher(Graph, name('UndirectedEdge'), 'undirected');\n  });\n}\n","/**\n * Obliterator Chain Function\n * ===========================\n *\n * Variadic function combining the given iterables.\n */\nvar Iterator = require('./iterator.js'),\n  iter = require('./iter.js');\n\n/**\n * Chain.\n *\n * @param  {...Iterator} iterables - Target iterables.\n * @return {Iterator}\n */\nmodule.exports = function chain() {\n  var iterables = arguments,\n    current,\n    i = -1;\n\n  return new Iterator(function iterate() {\n    if (!current) {\n      i++;\n\n      if (i >= iterables.length) return {done: true};\n\n      current = iter(iterables[i]);\n    }\n\n    var step = current.next();\n\n    if (step.done) {\n      current = null;\n      return iterate();\n    }\n\n    return step;\n  });\n};\n","/**\n * Graphology Edge Iteration\n * ==========================\n *\n * Attaching some methods to the Graph class to be able to iterate over a\n * graph's edges.\n */\nimport Iterator from 'obliterator/iterator';\nimport chain from 'obliterator/chain';\nimport take from 'obliterator/take';\n\nimport {InvalidArgumentsGraphError, NotFoundGraphError} from '../errors';\n\n/**\n * Definitions.\n */\nconst EDGES_ITERATION = [\n  {\n    name: 'edges',\n    type: 'mixed'\n  },\n  {\n    name: 'inEdges',\n    type: 'directed',\n    direction: 'in'\n  },\n  {\n    name: 'outEdges',\n    type: 'directed',\n    direction: 'out'\n  },\n  {\n    name: 'inboundEdges',\n    type: 'mixed',\n    direction: 'in'\n  },\n  {\n    name: 'outboundEdges',\n    type: 'mixed',\n    direction: 'out'\n  },\n  {\n    name: 'directedEdges',\n    type: 'directed'\n  },\n  {\n    name: 'undirectedEdges',\n    type: 'undirected'\n  }\n];\n\n/**\n * Function collecting edges from the given object.\n *\n * @param  {array}  edges  - Edges array to populate.\n * @param  {object} object - Target object.\n * @return {array}         - The found edges.\n */\nfunction collectSimple(edges, object) {\n  for (const k in object) edges.push(object[k].key);\n}\n\nfunction collectMulti(edges, object) {\n  for (const k in object)\n    object[k].forEach(edgeData => edges.push(edgeData.key));\n}\n\n/**\n * Function iterating over edges from the given object using a callback.\n *\n * @param {object}   object   - Target object.\n * @param {function} callback - Function to call.\n */\nfunction forEachSimple(object, callback, avoid) {\n  for (const k in object) {\n    if (k === avoid) continue;\n\n    const edgeData = object[k];\n\n    callback(\n      edgeData.key,\n      edgeData.attributes,\n      edgeData.source.key,\n      edgeData.target.key,\n      edgeData.source.attributes,\n      edgeData.target.attributes,\n      edgeData.undirected\n    );\n  }\n}\n\nfunction forEachMulti(object, callback, avoid) {\n  for (const k in object) {\n    if (k === avoid) continue;\n\n    object[k].forEach(edgeData =>\n      callback(\n        edgeData.key,\n        edgeData.attributes,\n        edgeData.source.key,\n        edgeData.target.key,\n        edgeData.source.attributes,\n        edgeData.target.attributes,\n        edgeData.undirected\n      )\n    );\n  }\n}\n\n/**\n * Function iterating over edges from the given object to match one of them.\n *\n * @param {object}   object   - Target object.\n * @param {function} callback - Function to call.\n */\nfunction findSimple(object, callback, avoid) {\n  let shouldBreak = false;\n\n  for (const k in object) {\n    if (k === avoid) continue;\n\n    const edgeData = object[k];\n\n    shouldBreak = callback(\n      edgeData.key,\n      edgeData.attributes,\n      edgeData.source.key,\n      edgeData.target.key,\n      edgeData.source.attributes,\n      edgeData.target.attributes,\n      edgeData.undirected\n    );\n\n    if (shouldBreak) return edgeData.key;\n  }\n\n  return;\n}\n\nfunction findMulti(object, callback, avoid) {\n  let iterator, step, edgeData, source, target;\n\n  let shouldBreak = false;\n\n  for (const k in object) {\n    if (k === avoid) continue;\n\n    iterator = object[k].values();\n\n    while (((step = iterator.next()), step.done !== true)) {\n      edgeData = step.value;\n      source = edgeData.source;\n      target = edgeData.target;\n\n      shouldBreak = callback(\n        edgeData.key,\n        edgeData.attributes,\n        source.key,\n        target.key,\n        source.attributes,\n        target.attributes,\n        edgeData.undirected\n      );\n\n      if (shouldBreak) return edgeData.key;\n    }\n  }\n\n  return;\n}\n\n/**\n * Function returning an iterator over edges from the given object.\n *\n * @param  {object}   object - Target object.\n * @return {Iterator}\n */\nfunction createIterator(object, avoid) {\n  const keys = Object.keys(object),\n    l = keys.length;\n\n  let inner = null,\n    i = 0;\n\n  return new Iterator(function next() {\n    let edgeData;\n\n    if (inner) {\n      const step = inner.next();\n\n      if (step.done) {\n        inner = null;\n        i++;\n        return next();\n      }\n\n      edgeData = step.value;\n    } else {\n      if (i >= l) return {done: true};\n\n      const k = keys[i];\n\n      if (k === avoid) {\n        i++;\n        return next();\n      }\n\n      edgeData = object[k];\n\n      if (edgeData instanceof Set) {\n        inner = edgeData.values();\n        return next();\n      }\n\n      i++;\n    }\n\n    return {\n      done: false,\n      value: {\n        edge: edgeData.key,\n        attributes: edgeData.attributes,\n        source: edgeData.source.key,\n        target: edgeData.target.key,\n        sourceAttributes: edgeData.source.attributes,\n        targetAttributes: edgeData.target.attributes,\n        undirected: edgeData.undirected\n      }\n    };\n  });\n}\n\n/**\n * Function collecting edges from the given object at given key.\n *\n * @param  {array}  edges  - Edges array to populate.\n * @param  {object} object - Target object.\n * @param  {mixed}  k      - Neighbor key.\n * @return {array}         - The found edges.\n */\nfunction collectForKeySimple(edges, object, k) {\n  const edgeData = object[k];\n\n  if (!edgeData) return;\n\n  edges.push(edgeData.key);\n}\n\nfunction collectForKeyMulti(edges, object, k) {\n  const edgesData = object[k];\n\n  if (!edgesData) return;\n\n  edgesData.forEach(edgeData => edges.push(edgeData.key));\n}\n\n/**\n * Function iterating over the egdes from the object at given key using\n * a callback.\n *\n * @param {object}   object   - Target object.\n * @param {mixed}    k        - Neighbor key.\n * @param {function} callback - Callback to use.\n */\nfunction forEachForKeySimple(object, k, callback) {\n  const edgeData = object[k];\n\n  if (!edgeData) return;\n\n  const sourceData = edgeData.source;\n  const targetData = edgeData.target;\n\n  callback(\n    edgeData.key,\n    edgeData.attributes,\n    sourceData.key,\n    targetData.key,\n    sourceData.attributes,\n    targetData.attributes,\n    edgeData.undirected\n  );\n}\n\nfunction forEachForKeyMulti(object, k, callback) {\n  const edgesData = object[k];\n\n  if (!edgesData) return;\n\n  edgesData.forEach(edgeData =>\n    callback(\n      edgeData.key,\n      edgeData.attributes,\n      edgeData.source.key,\n      edgeData.target.key,\n      edgeData.source.attributes,\n      edgeData.target.attributes,\n      edgeData.undirected\n    )\n  );\n}\n\n/**\n * Function iterating over the egdes from the object at given key to match\n * one of them.\n *\n * @param {object}   object   - Target object.\n * @param {mixed}    k        - Neighbor key.\n * @param {function} callback - Callback to use.\n */\nfunction findForKeySimple(object, k, callback) {\n  const edgeData = object[k];\n\n  if (!edgeData) return;\n\n  const sourceData = edgeData.source;\n  const targetData = edgeData.target;\n\n  if (\n    callback(\n      edgeData.key,\n      edgeData.attributes,\n      sourceData.key,\n      targetData.key,\n      sourceData.attributes,\n      targetData.attributes,\n      edgeData.undirected\n    )\n  )\n    return edgeData.key;\n}\n\nfunction findForKeyMulti(object, k, callback) {\n  const edgesData = object[k];\n\n  if (!edgesData) return;\n\n  let shouldBreak = false;\n\n  const iterator = edgesData.values();\n  let step, edgeData;\n\n  while (((step = iterator.next()), step.done !== true)) {\n    edgeData = step.value;\n\n    shouldBreak = callback(\n      edgeData.key,\n      edgeData.attributes,\n      edgeData.source.key,\n      edgeData.target.key,\n      edgeData.source.attributes,\n      edgeData.target.attributes,\n      edgeData.undirected\n    );\n\n    if (shouldBreak) return edgeData.key;\n  }\n\n  return;\n}\n\n/**\n * Function returning an iterator over the egdes from the object at given key.\n *\n * @param  {object}   object   - Target object.\n * @param  {mixed}    k        - Neighbor key.\n * @return {Iterator}\n */\nfunction createIteratorForKey(object, k) {\n  const v = object[k];\n\n  if (v instanceof Set) {\n    const iterator = v.values();\n\n    return new Iterator(function () {\n      const step = iterator.next();\n\n      if (step.done) return step;\n\n      const edgeData = step.value;\n\n      return {\n        done: false,\n        value: {\n          edge: edgeData.key,\n          attributes: edgeData.attributes,\n          source: edgeData.source.key,\n          target: edgeData.target.key,\n          sourceAttributes: edgeData.source.attributes,\n          targetAttributes: edgeData.target.attributes,\n          undirected: edgeData.undirected\n        }\n      };\n    });\n  }\n\n  return Iterator.of([\n    v.key,\n    v.attributes,\n    v.source.key,\n    v.target.key,\n    v.source.attributes,\n    v.target.attributes\n  ]);\n}\n\n/**\n * Function creating an array of edges for the given type.\n *\n * @param  {Graph}   graph - Target Graph instance.\n * @param  {string}  type  - Type of edges to retrieve.\n * @return {array}         - Array of edges.\n */\nfunction createEdgeArray(graph, type) {\n  if (graph.size === 0) return [];\n\n  if (type === 'mixed' || type === graph.type) {\n    if (typeof Array.from === 'function')\n      return Array.from(graph._edges.keys());\n\n    return take(graph._edges.keys(), graph._edges.size);\n  }\n\n  const size =\n    type === 'undirected' ? graph.undirectedSize : graph.directedSize;\n\n  const list = new Array(size),\n    mask = type === 'undirected';\n\n  const iterator = graph._edges.values();\n\n  let i = 0;\n  let step, data;\n\n  while (((step = iterator.next()), step.done !== true)) {\n    data = step.value;\n\n    if (data.undirected === mask) list[i++] = data.key;\n  }\n\n  return list;\n}\n\n/**\n * Function iterating over a graph's edges using a callback.\n *\n * @param  {Graph}    graph    - Target Graph instance.\n * @param  {string}   type     - Type of edges to retrieve.\n * @param  {function} callback - Function to call.\n */\nfunction forEachEdge(graph, type, callback) {\n  if (graph.size === 0) return;\n\n  const shouldFilter = type !== 'mixed' && type !== graph.type;\n  const mask = type === 'undirected';\n\n  let step, data;\n  const iterator = graph._edges.values();\n\n  while (((step = iterator.next()), step.done !== true)) {\n    data = step.value;\n\n    if (shouldFilter && data.undirected !== mask) continue;\n\n    const {key, attributes, source, target} = data;\n\n    callback(\n      key,\n      attributes,\n      source.key,\n      target.key,\n      source.attributes,\n      target.attributes,\n      data.undirected\n    );\n  }\n}\n\n/**\n * Function iterating over a graph's edges using a callback to match one of\n * them.\n *\n * @param  {Graph}    graph    - Target Graph instance.\n * @param  {string}   type     - Type of edges to retrieve.\n * @param  {function} callback - Function to call.\n */\nfunction findEdge(graph, type, callback) {\n  if (graph.size === 0) return;\n\n  const shouldFilter = type !== 'mixed' && type !== graph.type;\n  const mask = type === 'undirected';\n\n  let step, data;\n  let shouldBreak = false;\n  const iterator = graph._edges.values();\n\n  while (((step = iterator.next()), step.done !== true)) {\n    data = step.value;\n\n    if (shouldFilter && data.undirected !== mask) continue;\n\n    const {key, attributes, source, target} = data;\n\n    shouldBreak = callback(\n      key,\n      attributes,\n      source.key,\n      target.key,\n      source.attributes,\n      target.attributes,\n      data.undirected\n    );\n\n    if (shouldBreak) return key;\n  }\n\n  return;\n}\n\n/**\n * Function creating an iterator of edges for the given type.\n *\n * @param  {Graph}    graph - Target Graph instance.\n * @param  {string}   type  - Type of edges to retrieve.\n * @return {Iterator}\n */\nfunction createEdgeIterator(graph, type) {\n  if (graph.size === 0) return Iterator.empty();\n\n  const shouldFilter = type !== 'mixed' && type !== graph.type;\n  const mask = type === 'undirected';\n\n  const iterator = graph._edges.values();\n\n  return new Iterator(function next() {\n    let step, data;\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      step = iterator.next();\n\n      if (step.done) return step;\n\n      data = step.value;\n\n      if (shouldFilter && data.undirected !== mask) continue;\n\n      break;\n    }\n\n    const value = {\n      edge: data.key,\n      attributes: data.attributes,\n      source: data.source.key,\n      target: data.target.key,\n      sourceAttributes: data.source.attributes,\n      targetAttributes: data.target.attributes,\n      undirected: data.undirected\n    };\n\n    return {value, done: false};\n  });\n}\n\n/**\n * Function creating an array of edges for the given type & the given node.\n *\n * @param  {boolean} multi     - Whether the graph is multi or not.\n * @param  {string}  type      - Type of edges to retrieve.\n * @param  {string}  direction - In or out?\n * @param  {any}     nodeData  - Target node's data.\n * @return {array}             - Array of edges.\n */\nfunction createEdgeArrayForNode(multi, type, direction, nodeData) {\n  const edges = [];\n\n  const fn = multi ? collectMulti : collectSimple;\n\n  if (type !== 'undirected') {\n    if (direction !== 'out') fn(edges, nodeData.in);\n    if (direction !== 'in') fn(edges, nodeData.out);\n\n    // Handling self loop edge case\n    if (!direction && nodeData.directedSelfLoops > 0)\n      edges.splice(edges.lastIndexOf(nodeData.key), 1);\n  }\n\n  if (type !== 'directed') {\n    fn(edges, nodeData.undirected);\n  }\n\n  return edges;\n}\n\n/**\n * Function iterating over a node's edges using a callback.\n *\n * @param  {boolean}  multi     - Whether the graph is multi or not.\n * @param  {string}   type      - Type of edges to retrieve.\n * @param  {string}   direction - In or out?\n * @param  {any}      nodeData  - Target node's data.\n * @param  {function} callback  - Function to call.\n */\nfunction forEachEdgeForNode(multi, type, direction, nodeData, callback) {\n  const fn = multi ? forEachMulti : forEachSimple;\n\n  if (type !== 'undirected') {\n    if (direction !== 'out') fn(nodeData.in, callback);\n    if (direction !== 'in')\n      fn(nodeData.out, callback, !direction ? nodeData.key : null);\n  }\n\n  if (type !== 'directed') {\n    fn(nodeData.undirected, callback);\n  }\n}\n\n/**\n * Function iterating over a node's edges using a callback to match one of them.\n *\n * @param  {boolean}  multi     - Whether the graph is multi or not.\n * @param  {string}   type      - Type of edges to retrieve.\n * @param  {string}   direction - In or out?\n * @param  {any}      nodeData  - Target node's data.\n * @param  {function} callback  - Function to call.\n */\nfunction findEdgeForNode(multi, type, direction, nodeData, callback) {\n  const fn = multi ? findMulti : findSimple;\n\n  let found;\n\n  if (type !== 'undirected') {\n    if (direction !== 'out') {\n      found = fn(nodeData.in, callback);\n\n      if (found) return found;\n    }\n    if (direction !== 'in') {\n      found = fn(nodeData.out, callback, !direction ? nodeData.key : null);\n\n      if (found) return found;\n    }\n  }\n\n  if (type !== 'directed') {\n    found = fn(nodeData.undirected, callback);\n\n    if (found) return found;\n  }\n\n  return;\n}\n\n/**\n * Function iterating over a node's edges using a callback.\n *\n * @param  {string}   type      - Type of edges to retrieve.\n * @param  {string}   direction - In or out?\n * @param  {any}      nodeData  - Target node's data.\n * @return {Iterator}\n */\nfunction createEdgeIteratorForNode(type, direction, nodeData) {\n  let iterator = Iterator.empty();\n\n  if (type !== 'undirected') {\n    if (direction !== 'out' && typeof nodeData.in !== 'undefined')\n      iterator = chain(iterator, createIterator(nodeData.in));\n    if (direction !== 'in' && typeof nodeData.out !== 'undefined')\n      iterator = chain(\n        iterator,\n        createIterator(nodeData.out, !direction ? nodeData.key : null)\n      );\n  }\n\n  if (type !== 'directed' && typeof nodeData.undirected !== 'undefined') {\n    iterator = chain(iterator, createIterator(nodeData.undirected));\n  }\n\n  return iterator;\n}\n\n/**\n * Function creating an array of edges for the given path.\n *\n * @param  {string}   type       - Type of edges to retrieve.\n * @param  {boolean}  multi      - Whether the graph is multi.\n * @param  {string}   direction  - In or out?\n * @param  {NodeData} sourceData - Source node's data.\n * @param  {any}      target     - Target node.\n * @return {array}               - Array of edges.\n */\nfunction createEdgeArrayForPath(type, multi, direction, sourceData, target) {\n  const fn = multi ? collectForKeyMulti : collectForKeySimple;\n\n  const edges = [];\n\n  if (type !== 'undirected') {\n    if (typeof sourceData.in !== 'undefined' && direction !== 'out')\n      fn(edges, sourceData.in, target);\n\n    if (typeof sourceData.out !== 'undefined' && direction !== 'in')\n      fn(edges, sourceData.out, target);\n\n    // Handling self loop edge case\n    if (!direction && sourceData.directedSelfLoops > 0)\n      edges.splice(edges.lastIndexOf(sourceData.key), 1);\n  }\n\n  if (type !== 'directed') {\n    if (typeof sourceData.undirected !== 'undefined')\n      fn(edges, sourceData.undirected, target);\n  }\n\n  return edges;\n}\n\n/**\n * Function iterating over edges for the given path using a callback.\n *\n * @param  {string}   type       - Type of edges to retrieve.\n * @param  {boolean}  multi      - Whether the graph is multi.\n * @param  {string}   direction  - In or out?\n * @param  {NodeData} sourceData - Source node's data.\n * @param  {string}   target     - Target node.\n * @param  {function} callback   - Function to call.\n */\nfunction forEachEdgeForPath(\n  type,\n  multi,\n  direction,\n  sourceData,\n  target,\n  callback\n) {\n  const fn = multi ? forEachForKeyMulti : forEachForKeySimple;\n\n  if (type !== 'undirected') {\n    if (typeof sourceData.in !== 'undefined' && direction !== 'out')\n      fn(sourceData.in, target, callback);\n\n    if (sourceData.key !== target)\n      if (typeof sourceData.out !== 'undefined' && direction !== 'in')\n        fn(sourceData.out, target, callback);\n  }\n\n  if (type !== 'directed') {\n    if (typeof sourceData.undirected !== 'undefined')\n      fn(sourceData.undirected, target, callback);\n  }\n}\n\n/**\n * Function iterating over edges for the given path using a callback to match\n * one of them.\n *\n * @param  {string}   type       - Type of edges to retrieve.\n * @param  {boolean}  multi      - Whether the graph is multi.\n * @param  {string}   direction  - In or out?\n * @param  {NodeData} sourceData - Source node's data.\n * @param  {string}   target     - Target node.\n * @param  {function} callback   - Function to call.\n */\nfunction findEdgeForPath(type, multi, direction, sourceData, target, callback) {\n  const fn = multi ? findForKeyMulti : findForKeySimple;\n\n  let found;\n\n  if (type !== 'undirected') {\n    if (typeof sourceData.in !== 'undefined' && direction !== 'out') {\n      found = fn(sourceData.in, target, callback);\n\n      if (found) return found;\n    }\n\n    if (sourceData.key !== target)\n      if (typeof sourceData.out !== 'undefined' && direction !== 'in') {\n        found = fn(\n          sourceData.out,\n          target,\n          callback,\n          !direction ? sourceData.key : null\n        );\n\n        if (found) return found;\n      }\n  }\n\n  if (type !== 'directed') {\n    if (typeof sourceData.undirected !== 'undefined') {\n      found = fn(sourceData.undirected, target, callback);\n\n      if (found) return found;\n    }\n  }\n\n  return;\n}\n\n/**\n * Function returning an iterator over edges for the given path.\n *\n * @param  {string}   type       - Type of edges to retrieve.\n * @param  {string}   direction  - In or out?\n * @param  {NodeData} sourceData - Source node's data.\n * @param  {string}   target     - Target node.\n * @param  {function} callback   - Function to call.\n */\nfunction createEdgeIteratorForPath(type, direction, sourceData, target) {\n  let iterator = Iterator.empty();\n\n  if (type !== 'undirected') {\n    if (\n      typeof sourceData.in !== 'undefined' &&\n      direction !== 'out' &&\n      target in sourceData.in\n    )\n      iterator = chain(iterator, createIteratorForKey(sourceData.in, target));\n\n    if (\n      typeof sourceData.out !== 'undefined' &&\n      direction !== 'in' &&\n      target in sourceData.out\n    )\n      iterator = chain(iterator, createIteratorForKey(sourceData.out, target));\n  }\n\n  if (type !== 'directed') {\n    if (\n      typeof sourceData.undirected !== 'undefined' &&\n      target in sourceData.undirected\n    )\n      iterator = chain(\n        iterator,\n        createIteratorForKey(sourceData.undirected, target)\n      );\n  }\n\n  return iterator;\n}\n\n/**\n * Function attaching an edge array creator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachEdgeArrayCreator(Class, description) {\n  const {name, type, direction} = description;\n\n  /**\n   * Function returning an array of certain edges.\n   *\n   * Arity 0: Return all the relevant edges.\n   *\n   * Arity 1: Return all of a node's relevant edges.\n   * @param  {any}   node   - Target node.\n   *\n   * Arity 2: Return the relevant edges across the given path.\n   * @param  {any}   source - Source node.\n   * @param  {any}   target - Target node.\n   *\n   * @return {array|number} - The edges or the number of edges.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[name] = function (source, target) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return [];\n\n    if (!arguments.length) return createEdgeArray(this, type);\n\n    if (arguments.length === 1) {\n      source = '' + source;\n\n      const nodeData = this._nodes.get(source);\n\n      if (typeof nodeData === 'undefined')\n        throw new NotFoundGraphError(\n          `Graph.${name}: could not find the \"${source}\" node in the graph.`\n        );\n\n      // Iterating over a node's edges\n      return createEdgeArrayForNode(\n        this.multi,\n        type === 'mixed' ? this.type : type,\n        direction,\n        nodeData\n      );\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${name}:  could not find the \"${source}\" source node in the graph.`\n        );\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(\n          `Graph.${name}:  could not find the \"${target}\" target node in the graph.`\n        );\n\n      // Iterating over the edges between source & target\n      return createEdgeArrayForPath(\n        type,\n        this.multi,\n        direction,\n        sourceData,\n        target\n      );\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.${name}: too many arguments (expecting 0, 1 or 2 and got ${arguments.length}).`\n    );\n  };\n}\n\n/**\n * Function attaching a edge callback iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachForEachEdge(Class, description) {\n  const {name, type, direction} = description;\n\n  const forEachName = 'forEach' + name[0].toUpperCase() + name.slice(1, -1);\n\n  /**\n   * Function iterating over the graph's relevant edges by applying the given\n   * callback.\n   *\n   * Arity 1: Iterate over all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Iterate over all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Iterate over the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[forEachName] = function (source, target, callback) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type) return;\n\n    if (arguments.length === 1) {\n      callback = source;\n      return forEachEdge(this, type, callback);\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      callback = target;\n\n      const nodeData = this._nodes.get(source);\n\n      if (typeof nodeData === 'undefined')\n        throw new NotFoundGraphError(\n          `Graph.${forEachName}: could not find the \"${source}\" node in the graph.`\n        );\n\n      // Iterating over a node's edges\n      // TODO: maybe attach the sub method to the instance dynamically?\n      return forEachEdgeForNode(\n        this.multi,\n        type === 'mixed' ? this.type : type,\n        direction,\n        nodeData,\n        callback\n      );\n    }\n\n    if (arguments.length === 3) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${forEachName}:  could not find the \"${source}\" source node in the graph.`\n        );\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(\n          `Graph.${forEachName}:  could not find the \"${target}\" target node in the graph.`\n        );\n\n      // Iterating over the edges between source & target\n      return forEachEdgeForPath(\n        type,\n        this.multi,\n        direction,\n        sourceData,\n        target,\n        callback\n      );\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.${forEachName}: too many arguments (expecting 1, 2 or 3 and got ${arguments.length}).`\n    );\n  };\n\n  /**\n   * Function mapping the graph's relevant edges by applying the given\n   * callback.\n   *\n   * Arity 1: Map all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Map all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Map the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const mapName = 'map' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[mapName] = function () {\n    const args = Array.prototype.slice.call(arguments);\n    const callback = args.pop();\n\n    let result;\n\n    // We know the result length beforehand\n    if (args.length === 0) {\n      let length = 0;\n\n      if (type !== 'directed') length += this.undirectedSize;\n      if (type !== 'undirected') length += this.directedSize;\n\n      result = new Array(length);\n\n      let i = 0;\n\n      args.push((e, ea, s, t, sa, ta, u) => {\n        result[i++] = callback(e, ea, s, t, sa, ta, u);\n      });\n    }\n\n    // We don't know the result length beforehand\n    // TODO: we can in some instances of simple graphs, knowing degree\n    else {\n      result = [];\n\n      args.push((e, ea, s, t, sa, ta, u) => {\n        result.push(callback(e, ea, s, t, sa, ta, u));\n      });\n    }\n\n    this[forEachName].apply(this, args);\n\n    return result;\n  };\n\n  /**\n   * Function filtering the graph's relevant edges using the provided predicate\n   * function.\n   *\n   * Arity 1: Filter all the relevant edges.\n   * @param  {function} predicate - Predicate to use.\n   *\n   * Arity 2: Filter all of a node's relevant edges.\n   * @param  {any}      node      - Target node.\n   * @param  {function} predicate - Predicate to use.\n   *\n   * Arity 3: Filter the relevant edges across the given path.\n   * @param  {any}      source    - Source node.\n   * @param  {any}      target    - Target node.\n   * @param  {function} predicate - Predicate to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const filterName = 'filter' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[filterName] = function () {\n    const args = Array.prototype.slice.call(arguments);\n    const callback = args.pop();\n\n    const result = [];\n\n    args.push((e, ea, s, t, sa, ta, u) => {\n      if (callback(e, ea, s, t, sa, ta, u)) result.push(e);\n    });\n\n    this[forEachName].apply(this, args);\n\n    return result;\n  };\n\n  /**\n   * Function reducing the graph's relevant edges using the provided accumulator\n   * function.\n   *\n   * Arity 1: Reduce all the relevant edges.\n   * @param  {function} accumulator  - Accumulator to use.\n   * @param  {any}      initialValue - Initial value.\n   *\n   * Arity 2: Reduce all of a node's relevant edges.\n   * @param  {any}      node         - Target node.\n   * @param  {function} accumulator  - Accumulator to use.\n   * @param  {any}      initialValue - Initial value.\n   *\n   * Arity 3: Reduce the relevant edges across the given path.\n   * @param  {any}      source       - Source node.\n   * @param  {any}      target       - Target node.\n   * @param  {function} accumulator  - Accumulator to use.\n   * @param  {any}      initialValue - Initial value.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const reduceName = 'reduce' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[reduceName] = function () {\n    let args = Array.prototype.slice.call(arguments);\n\n    if (args.length < 2 || args.length > 4) {\n      throw new InvalidArgumentsGraphError(\n        `Graph.${reduceName}: invalid number of arguments (expecting 2, 3 or 4 and got ${args.length}).`\n      );\n    }\n\n    if (\n      typeof args[args.length - 1] === 'function' &&\n      typeof args[args.length - 2] !== 'function'\n    ) {\n      throw new InvalidArgumentsGraphError(\n        `Graph.${reduceName}: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.`\n      );\n    }\n\n    let callback;\n    let initialValue;\n\n    if (args.length === 2) {\n      callback = args[0];\n      initialValue = args[1];\n      args = [];\n    } else if (args.length === 3) {\n      callback = args[1];\n      initialValue = args[2];\n      args = [args[0]];\n    } else if (args.length === 4) {\n      callback = args[2];\n      initialValue = args[3];\n      args = [args[0], args[1]];\n    }\n\n    let accumulator = initialValue;\n\n    args.push((e, ea, s, t, sa, ta, u) => {\n      accumulator = callback(accumulator, e, ea, s, t, sa, ta, u);\n    });\n\n    this[forEachName].apply(this, args);\n\n    return accumulator;\n  };\n}\n\n/**\n * Function attaching a breakable edge callback iterator method to the Graph\n * prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachFindEdge(Class, description) {\n  const {name, type, direction} = description;\n\n  const findEdgeName = 'find' + name[0].toUpperCase() + name.slice(1, -1);\n\n  /**\n   * Function iterating over the graph's relevant edges in order to match\n   * one of them using the provided predicate function.\n   *\n   * Arity 1: Iterate over all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Iterate over all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Iterate over the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[findEdgeName] = function (source, target, callback) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return false;\n\n    if (arguments.length === 1) {\n      callback = source;\n      return findEdge(this, type, callback);\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      callback = target;\n\n      const nodeData = this._nodes.get(source);\n\n      if (typeof nodeData === 'undefined')\n        throw new NotFoundGraphError(\n          `Graph.${findEdgeName}: could not find the \"${source}\" node in the graph.`\n        );\n\n      // Iterating over a node's edges\n      // TODO: maybe attach the sub method to the instance dynamically?\n      return findEdgeForNode(\n        this.multi,\n        type === 'mixed' ? this.type : type,\n        direction,\n        nodeData,\n        callback\n      );\n    }\n\n    if (arguments.length === 3) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${findEdgeName}:  could not find the \"${source}\" source node in the graph.`\n        );\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(\n          `Graph.${findEdgeName}:  could not find the \"${target}\" target node in the graph.`\n        );\n\n      // Iterating over the edges between source & target\n      return findEdgeForPath(\n        type,\n        this.multi,\n        direction,\n        sourceData,\n        target,\n        callback\n      );\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.${findEdgeName}: too many arguments (expecting 1, 2 or 3 and got ${arguments.length}).`\n    );\n  };\n\n  /**\n   * Function iterating over the graph's relevant edges in order to assert\n   * whether any one of them matches the provided predicate function.\n   *\n   * Arity 1: Iterate over all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Iterate over all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Iterate over the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const someName = 'some' + name[0].toUpperCase() + name.slice(1, -1);\n\n  Class.prototype[someName] = function () {\n    const args = Array.prototype.slice.call(arguments);\n    const callback = args.pop();\n\n    args.push((e, ea, s, t, sa, ta, u) => {\n      return callback(e, ea, s, t, sa, ta, u);\n    });\n\n    const found = this[findEdgeName].apply(this, args);\n\n    if (found) return true;\n\n    return false;\n  };\n\n  /**\n   * Function iterating over the graph's relevant edges in order to assert\n   * whether all of them matche the provided predicate function.\n   *\n   * Arity 1: Iterate over all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Iterate over all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Iterate over the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const everyName = 'every' + name[0].toUpperCase() + name.slice(1, -1);\n\n  Class.prototype[everyName] = function () {\n    const args = Array.prototype.slice.call(arguments);\n    const callback = args.pop();\n\n    args.push((e, ea, s, t, sa, ta, u) => {\n      return !callback(e, ea, s, t, sa, ta, u);\n    });\n\n    const found = this[findEdgeName].apply(this, args);\n\n    if (found) return false;\n\n    return true;\n  };\n}\n\n/**\n * Function attaching an edge iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachEdgeIteratorCreator(Class, description) {\n  const {name: originalName, type, direction} = description;\n\n  const name = originalName.slice(0, -1) + 'Entries';\n\n  /**\n   * Function returning an iterator over the graph's edges.\n   *\n   * Arity 0: Iterate over all the relevant edges.\n   *\n   * Arity 1: Iterate over all of a node's relevant edges.\n   * @param  {any}   node   - Target node.\n   *\n   * Arity 2: Iterate over the relevant edges across the given path.\n   * @param  {any}   source - Source node.\n   * @param  {any}   target - Target node.\n   *\n   * @return {array|number} - The edges or the number of edges.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[name] = function (source, target) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return Iterator.empty();\n\n    if (!arguments.length) return createEdgeIterator(this, type);\n\n    if (arguments.length === 1) {\n      source = '' + source;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${name}: could not find the \"${source}\" node in the graph.`\n        );\n\n      // Iterating over a node's edges\n      return createEdgeIteratorForNode(type, direction, sourceData);\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${name}:  could not find the \"${source}\" source node in the graph.`\n        );\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(\n          `Graph.${name}:  could not find the \"${target}\" target node in the graph.`\n        );\n\n      // Iterating over the edges between source & target\n      return createEdgeIteratorForPath(type, direction, sourceData, target);\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.${name}: too many arguments (expecting 0, 1 or 2 and got ${arguments.length}).`\n    );\n  };\n}\n\n/**\n * Function attaching every edge iteration method to the Graph class.\n *\n * @param {function} Graph - Graph class.\n */\nexport function attachEdgeIterationMethods(Graph) {\n  EDGES_ITERATION.forEach(description => {\n    attachEdgeArrayCreator(Graph, description);\n    attachForEachEdge(Graph, description);\n    attachFindEdge(Graph, description);\n    attachEdgeIteratorCreator(Graph, description);\n  });\n}\n","/**\n * Graphology Neighbor Iteration\n * ==============================\n *\n * Attaching some methods to the Graph class to be able to iterate over\n * neighbors.\n */\nimport Iterator from 'obliterator/iterator';\nimport chain from 'obliterator/chain';\nimport take from 'obliterator/take';\n\nimport {NotFoundGraphError, InvalidArgumentsGraphError} from '../errors';\n\n/**\n * Definitions.\n */\nconst NEIGHBORS_ITERATION = [\n  {\n    name: 'neighbors',\n    type: 'mixed'\n  },\n  {\n    name: 'inNeighbors',\n    type: 'directed',\n    direction: 'in'\n  },\n  {\n    name: 'outNeighbors',\n    type: 'directed',\n    direction: 'out'\n  },\n  {\n    name: 'inboundNeighbors',\n    type: 'mixed',\n    direction: 'in'\n  },\n  {\n    name: 'outboundNeighbors',\n    type: 'mixed',\n    direction: 'out'\n  },\n  {\n    name: 'directedNeighbors',\n    type: 'directed'\n  },\n  {\n    name: 'undirectedNeighbors',\n    type: 'undirected'\n  }\n];\n\n/**\n * Function merging neighbors into the given set iterating over the given object.\n *\n * @param {BasicSet} neighbors - Neighbors set.\n * @param {object}   object    - Target object.\n */\nfunction merge(neighbors, object) {\n  if (typeof object === 'undefined') return;\n\n  for (const neighbor in object) neighbors.add(neighbor);\n}\n\n/**\n * Function creating an array of relevant neighbors for the given node.\n *\n * @param  {string}       type      - Type of neighbors.\n * @param  {string}       direction - Direction.\n * @param  {any}          nodeData  - Target node's data.\n * @return {Array}                  - The list of neighbors.\n */\nfunction createNeighborArrayForNode(type, direction, nodeData) {\n  // If we want only undirected or in or out, we can roll some optimizations\n  if (type !== 'mixed') {\n    if (type === 'undirected') return Object.keys(nodeData.undirected);\n\n    if (typeof direction === 'string') return Object.keys(nodeData[direction]);\n  }\n\n  // Else we need to keep a set of neighbors not to return duplicates\n  const neighbors = new Set();\n\n  if (type !== 'undirected') {\n    if (direction !== 'out') {\n      merge(neighbors, nodeData.in);\n    }\n    if (direction !== 'in') {\n      merge(neighbors, nodeData.out);\n    }\n  }\n\n  if (type !== 'directed') {\n    merge(neighbors, nodeData.undirected);\n  }\n\n  return take(neighbors.values(), neighbors.size);\n}\n\n/**\n * Function iterating over the given node's relevant neighbors using a\n * callback.\n *\n * @param  {string}   type      - Type of neighbors.\n * @param  {string}   direction - Direction.\n * @param  {any}      nodeData  - Target node's data.\n * @param  {function} callback  - Callback to use.\n */\nfunction forEachInObject(nodeData, object, callback) {\n  for (const k in object) {\n    let edgeData = object[k];\n\n    if (edgeData instanceof Set) edgeData = edgeData.values().next().value;\n\n    const sourceData = edgeData.source,\n      targetData = edgeData.target;\n\n    const neighborData = sourceData === nodeData ? targetData : sourceData;\n\n    callback(neighborData.key, neighborData.attributes);\n  }\n}\n\nfunction forEachInObjectOnce(visited, nodeData, object, callback) {\n  for (const k in object) {\n    let edgeData = object[k];\n\n    if (edgeData instanceof Set) edgeData = edgeData.values().next().value;\n\n    const sourceData = edgeData.source,\n      targetData = edgeData.target;\n\n    const neighborData = sourceData === nodeData ? targetData : sourceData;\n\n    if (visited.has(neighborData.key)) continue;\n\n    visited.add(neighborData.key);\n\n    callback(neighborData.key, neighborData.attributes);\n  }\n}\n\n/**\n * Function iterating over the given node's relevant neighbors to match\n * one of them using a predicated function.\n *\n * @param  {string}   type      - Type of neighbors.\n * @param  {string}   direction - Direction.\n * @param  {any}      nodeData  - Target node's data.\n * @param  {function} callback  - Callback to use.\n */\nfunction findInObject(nodeData, object, callback) {\n  for (const k in object) {\n    let edgeData = object[k];\n\n    if (edgeData instanceof Set) edgeData = edgeData.values().next().value;\n\n    const sourceData = edgeData.source;\n    const targetData = edgeData.target;\n\n    const neighborData = sourceData === nodeData ? targetData : sourceData;\n\n    const shouldBreak = callback(neighborData.key, neighborData.attributes);\n\n    if (shouldBreak) return neighborData.key;\n  }\n\n  return;\n}\n\nfunction findInObjectOnce(visited, nodeData, object, callback) {\n  for (const k in object) {\n    let edgeData = object[k];\n\n    if (edgeData instanceof Set) edgeData = edgeData.values().next().value;\n\n    const sourceData = edgeData.source;\n    const targetData = edgeData.target;\n\n    const neighborData = sourceData === nodeData ? targetData : sourceData;\n\n    if (visited.has(neighborData.key)) continue;\n\n    visited.add(neighborData.key);\n\n    const shouldBreak = callback(neighborData.key, neighborData.attributes);\n\n    if (shouldBreak) return neighborData.key;\n  }\n\n  return;\n}\n\nfunction forEachNeighborForNode(type, direction, nodeData, callback) {\n  // If we want only undirected or in or out, we can roll some optimizations\n  if (type !== 'mixed') {\n    if (type === 'undirected')\n      return forEachInObject(nodeData, nodeData.undirected, callback);\n\n    if (typeof direction === 'string')\n      return forEachInObject(nodeData, nodeData[direction], callback);\n  }\n\n  // Else we need to keep a set of neighbors not to return duplicates\n  const visited = new Set();\n\n  if (type !== 'undirected') {\n    if (direction !== 'out') {\n      forEachInObjectOnce(visited, nodeData, nodeData.in, callback);\n    }\n    if (direction !== 'in') {\n      forEachInObjectOnce(visited, nodeData, nodeData.out, callback);\n    }\n  }\n\n  if (type !== 'directed') {\n    forEachInObjectOnce(visited, nodeData, nodeData.undirected, callback);\n  }\n}\n\nfunction findNeighbor(type, direction, nodeData, callback) {\n  // If we want only undirected or in or out, we can roll some optimizations\n  if (type !== 'mixed') {\n    if (type === 'undirected')\n      return findInObject(nodeData, nodeData.undirected, callback);\n\n    if (typeof direction === 'string')\n      return findInObject(nodeData, nodeData[direction], callback);\n  }\n\n  // Else we need to keep a set of neighbors not to return duplicates\n  const visited = new Set();\n\n  let found;\n\n  if (type !== 'undirected') {\n    if (direction !== 'out') {\n      found = findInObjectOnce(visited, nodeData, nodeData.in, callback);\n\n      if (found) return found;\n    }\n    if (direction !== 'in') {\n      found = findInObjectOnce(visited, nodeData, nodeData.out, callback);\n\n      if (found) return found;\n    }\n  }\n\n  if (type !== 'directed') {\n    found = findInObjectOnce(visited, nodeData, nodeData.undirected, callback);\n\n    if (found) return found;\n  }\n\n  return;\n}\n\n/**\n * Function returning an iterator over the given node's relevant neighbors.\n *\n * @param  {string}   type      - Type of neighbors.\n * @param  {string}   direction - Direction.\n * @param  {any}      nodeData  - Target node's data.\n * @return {Iterator}\n */\nfunction createObjectIterator(nodeData, object) {\n  const keys = Object.keys(object),\n    l = keys.length;\n\n  let i = 0;\n\n  return new Iterator(function () {\n    if (i >= l) return {done: true};\n\n    let edgeData = object[keys[i++]];\n\n    if (edgeData instanceof Set) edgeData = edgeData.values().next().value;\n\n    const sourceData = edgeData.source,\n      targetData = edgeData.target;\n\n    const neighborData = sourceData === nodeData ? targetData : sourceData;\n\n    return {\n      done: false,\n      value: {neighbor: neighborData.key, attributes: neighborData.attributes}\n    };\n  });\n}\n\nfunction createDedupedObjectIterator(visited, nodeData, object) {\n  const keys = Object.keys(object),\n    l = keys.length;\n\n  let i = 0;\n\n  return new Iterator(function next() {\n    if (i >= l) return {done: true};\n\n    let edgeData = object[keys[i++]];\n\n    if (edgeData instanceof Set) edgeData = edgeData.values().next().value;\n\n    const sourceData = edgeData.source,\n      targetData = edgeData.target;\n\n    const neighborData = sourceData === nodeData ? targetData : sourceData;\n\n    if (visited.has(neighborData.key)) return next();\n\n    visited.add(neighborData.key);\n\n    return {\n      done: false,\n      value: {neighbor: neighborData.key, attributes: neighborData.attributes}\n    };\n  });\n}\n\nfunction createNeighborIterator(type, direction, nodeData) {\n  // If we want only undirected or in or out, we can roll some optimizations\n  if (type !== 'mixed') {\n    if (type === 'undirected')\n      return createObjectIterator(nodeData, nodeData.undirected);\n\n    if (typeof direction === 'string')\n      return createObjectIterator(nodeData, nodeData[direction]);\n  }\n\n  let iterator = Iterator.empty();\n\n  // Else we need to keep a set of neighbors not to return duplicates\n  const visited = new Set();\n\n  if (type !== 'undirected') {\n    if (direction !== 'out') {\n      iterator = chain(\n        iterator,\n        createDedupedObjectIterator(visited, nodeData, nodeData.in)\n      );\n    }\n    if (direction !== 'in') {\n      iterator = chain(\n        iterator,\n        createDedupedObjectIterator(visited, nodeData, nodeData.out)\n      );\n    }\n  }\n\n  if (type !== 'directed') {\n    iterator = chain(\n      iterator,\n      createDedupedObjectIterator(visited, nodeData, nodeData.undirected)\n    );\n  }\n\n  return iterator;\n}\n\n/**\n * Function attaching a neighbors array creator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachNeighborArrayCreator(Class, description) {\n  const {name, type, direction} = description;\n\n  /**\n   * Function returning an array of certain neighbors.\n   *\n   * @param  {any}   node   - Target node.\n   * @return {array} - The neighbors of neighbors.\n   *\n   * @throws {Error} - Will throw if node is not found in the graph.\n   */\n  Class.prototype[name] = function (node) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return [];\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (typeof nodeData === 'undefined')\n      throw new NotFoundGraphError(\n        `Graph.${name}: could not find the \"${node}\" node in the graph.`\n      );\n\n    // Here, we want to iterate over a node's relevant neighbors\n    return createNeighborArrayForNode(\n      type === 'mixed' ? this.type : type,\n      direction,\n      nodeData\n    );\n  };\n}\n\n/**\n * Function attaching a neighbors callback iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachForEachNeighbor(Class, description) {\n  const {name, type, direction} = description;\n\n  const forEachName = 'forEach' + name[0].toUpperCase() + name.slice(1, -1);\n\n  /**\n   * Function iterating over all the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[forEachName] = function (node, callback) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type) return;\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (typeof nodeData === 'undefined')\n      throw new NotFoundGraphError(\n        `Graph.${forEachName}: could not find the \"${node}\" node in the graph.`\n      );\n\n    // Here, we want to iterate over a node's relevant neighbors\n    forEachNeighborForNode(\n      type === 'mixed' ? this.type : type,\n      direction,\n      nodeData,\n      callback\n    );\n  };\n\n  /**\n   * Function mapping the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const mapName = 'map' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[mapName] = function (node, callback) {\n    // TODO: optimize when size is known beforehand\n    const result = [];\n\n    this[forEachName](node, (n, a) => {\n      result.push(callback(n, a));\n    });\n\n    return result;\n  };\n\n  /**\n   * Function filtering the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const filterName = 'filter' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[filterName] = function (node, callback) {\n    const result = [];\n\n    this[forEachName](node, (n, a) => {\n      if (callback(n, a)) result.push(n);\n    });\n\n    return result;\n  };\n\n  /**\n   * Function reducing the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const reduceName = 'reduce' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[reduceName] = function (node, callback, initialValue) {\n    if (arguments.length < 3)\n      throw new InvalidArgumentsGraphError(\n        `Graph.${reduceName}: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.`\n      );\n\n    let accumulator = initialValue;\n\n    this[forEachName](node, (n, a) => {\n      accumulator = callback(accumulator, n, a);\n    });\n\n    return accumulator;\n  };\n}\n\n/**\n * Function attaching a breakable neighbors callback iterator method to the\n * Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachFindNeighbor(Class, description) {\n  const {name, type, direction} = description;\n\n  const capitalizedSingular = name[0].toUpperCase() + name.slice(1, -1);\n\n  const findName = 'find' + capitalizedSingular;\n\n  /**\n   * Function iterating over all the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[findName] = function (node, callback) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type) return;\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (typeof nodeData === 'undefined')\n      throw new NotFoundGraphError(\n        `Graph.${findName}: could not find the \"${node}\" node in the graph.`\n      );\n\n    // Here, we want to iterate over a node's relevant neighbors\n    return findNeighbor(\n      type === 'mixed' ? this.type : type,\n      direction,\n      nodeData,\n      callback\n    );\n  };\n\n  /**\n   * Function iterating over all the relevant neighbors to find if any of them\n   * matches the given predicate.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const someName = 'some' + capitalizedSingular;\n\n  Class.prototype[someName] = function (node, callback) {\n    const found = this[findName](node, callback);\n\n    if (found) return true;\n\n    return false;\n  };\n\n  /**\n   * Function iterating over all the relevant neighbors to find if all of them\n   * matche the given predicate.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const everyName = 'every' + capitalizedSingular;\n\n  Class.prototype[everyName] = function (node, callback) {\n    const found = this[findName](node, (n, a) => {\n      return !callback(n, a);\n    });\n\n    if (found) return false;\n\n    return true;\n  };\n}\n\n/**\n * Function attaching a neighbors callback iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachNeighborIteratorCreator(Class, description) {\n  const {name, type, direction} = description;\n\n  const iteratorName = name.slice(0, -1) + 'Entries';\n\n  /**\n   * Function returning an iterator over all the relevant neighbors.\n   *\n   * @param  {any}      node     - Target node.\n   * @return {Iterator}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[iteratorName] = function (node) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return Iterator.empty();\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (typeof nodeData === 'undefined')\n      throw new NotFoundGraphError(\n        `Graph.${iteratorName}: could not find the \"${node}\" node in the graph.`\n      );\n\n    // Here, we want to iterate over a node's relevant neighbors\n    return createNeighborIterator(\n      type === 'mixed' ? this.type : type,\n      direction,\n      nodeData\n    );\n  };\n}\n\n/**\n * Function attaching every neighbor iteration method to the Graph class.\n *\n * @param {function} Graph - Graph class.\n */\nexport function attachNeighborIterationMethods(Graph) {\n  NEIGHBORS_ITERATION.forEach(description => {\n    attachNeighborArrayCreator(Graph, description);\n    attachForEachNeighbor(Graph, description);\n    attachFindNeighbor(Graph, description);\n    attachNeighborIteratorCreator(Graph, description);\n  });\n}\n","/**\n * Graphology Adjacency Iteration\n * ================================\n *\n * Attaching some methods to the Graph class to be able to iterate over a\n * graph's adjacency.\n */\nimport Iterator from 'obliterator/iterator';\n\n/**\n * Function iterating over a simple graph's adjacency using a callback.\n *\n * @param {boolean}  breakable - Can we break?\n * @param {Graph}    graph     - Target Graph instance.\n * @param {callback} function  - Iteration callback.\n */\nexport function forEachAdjacencySimple(breakable, graph, callback) {\n  const iterator = graph._nodes.values();\n\n  const type = graph.type;\n\n  let step, sourceData, neighbor, adj, edgeData, targetData, shouldBreak;\n\n  while (((step = iterator.next()), step.done !== true)) {\n    sourceData = step.value;\n\n    if (type !== 'undirected') {\n      adj = sourceData.out;\n\n      for (neighbor in adj) {\n        edgeData = adj[neighbor];\n        targetData = edgeData.target;\n\n        shouldBreak = callback(\n          sourceData.key,\n          targetData.key,\n          sourceData.attributes,\n          targetData.attributes,\n          edgeData.key,\n          edgeData.attributes,\n          edgeData.undirected\n        );\n\n        if (breakable && shouldBreak) return edgeData.key;\n      }\n    }\n\n    if (type !== 'directed') {\n      adj = sourceData.undirected;\n\n      for (neighbor in adj) {\n        edgeData = adj[neighbor];\n        targetData = edgeData.target;\n\n        if (targetData.key !== neighbor) targetData = edgeData.source;\n\n        shouldBreak = callback(\n          sourceData.key,\n          targetData.key,\n          sourceData.attributes,\n          targetData.attributes,\n          edgeData.key,\n          edgeData.attributes,\n          edgeData.undirected\n        );\n\n        if (breakable && shouldBreak) return edgeData.key;\n      }\n    }\n  }\n\n  return;\n}\n\n/**\n * Function iterating over a multi graph's adjacency using a callback.\n *\n * @param {boolean}  breakable - Can we break?\n * @param {Graph}    graph    - Target Graph instance.\n * @param {callback} function - Iteration callback.\n */\nexport function forEachAdjacencyMulti(breakable, graph, callback) {\n  const iterator = graph._nodes.values();\n\n  const type = graph.type;\n\n  let step,\n    sourceData,\n    neighbor,\n    container,\n    containerStep,\n    adj,\n    edgeData,\n    targetData,\n    shouldBreak;\n\n  while (((step = iterator.next()), step.done !== true)) {\n    sourceData = step.value;\n\n    if (type !== 'undirected') {\n      adj = sourceData.out;\n\n      for (neighbor in adj) {\n        container = adj[neighbor].values();\n\n        while (\n          ((containerStep = container.next()), containerStep.done !== true)\n        ) {\n          edgeData = containerStep.value;\n          targetData = edgeData.target;\n\n          shouldBreak = callback(\n            sourceData.key,\n            targetData.key,\n            sourceData.attributes,\n            targetData.attributes,\n            edgeData.key,\n            edgeData.attributes,\n            edgeData.undirected\n          );\n\n          if (breakable && shouldBreak) return edgeData.key;\n        }\n      }\n    }\n\n    if (type !== 'directed') {\n      adj = sourceData.undirected;\n\n      for (neighbor in adj) {\n        container = adj[neighbor].values();\n\n        while (\n          ((containerStep = container.next()), containerStep.done !== true)\n        ) {\n          edgeData = containerStep.value;\n          targetData = edgeData.target;\n\n          if (targetData.key !== neighbor) targetData = edgeData.source;\n\n          shouldBreak = callback(\n            sourceData.key,\n            targetData.key,\n            sourceData.attributes,\n            targetData.attributes,\n            edgeData.key,\n            edgeData.attributes,\n            edgeData.undirected\n          );\n\n          if (breakable && shouldBreak) return edgeData.key;\n        }\n      }\n    }\n  }\n\n  return;\n}\n\nexport function createAdjacencyIteratorSimple(graph) {\n  const iterator = graph._nodes.values();\n\n  const type = graph.type;\n\n  let state = 'outer',\n    sourceData,\n    neighbors,\n    adj,\n    offset;\n\n  return new Iterator(function next() {\n    let step;\n\n    if (state === 'outer') {\n      step = iterator.next();\n\n      if (step.done === true) return step;\n\n      sourceData = step.value;\n\n      state = 'directed';\n      return next();\n    }\n\n    if (state === 'directed') {\n      if (type === 'undirected') {\n        state = 'undirected';\n        return next();\n      }\n\n      adj = sourceData.out;\n      neighbors = Object.keys(sourceData.out);\n      offset = 0;\n      state = 'inner-directed';\n\n      return next();\n    }\n\n    if (state === 'undirected') {\n      if (type === 'directed') {\n        state = 'outer';\n        return next();\n      }\n\n      adj = sourceData.undirected;\n      neighbors = Object.keys(sourceData.undirected);\n      offset = 0;\n      state = 'inner-undirected';\n    }\n\n    // Inner\n    if (offset >= neighbors.length) {\n      if (state === 'inner-undirected') state = 'outer';\n      else state = 'undirected';\n\n      return next();\n    }\n\n    const neighbor = neighbors[offset++];\n    const edgeData = adj[neighbor];\n    let targetData = edgeData.target;\n\n    if (state === 'inner-undirected' && targetData.key === sourceData.key)\n      targetData = edgeData.source;\n\n    return {\n      done: false,\n      value: {\n        source: sourceData.key,\n        target: targetData.key,\n        sourceAttributes: sourceData.attributes,\n        targetAttributes: targetData.attributes,\n        edgeKey: edgeData.key,\n        edgeAttributes: edgeData.attributes,\n        undirected: edgeData.undirected\n      }\n    };\n  });\n}\n\nexport function createAdjacencyIteratorMulti(graph) {\n  const iterator = graph._nodes.values();\n\n  const type = graph.type;\n\n  let state = 'outer',\n    sourceData,\n    neighbors,\n    container = null,\n    adj,\n    offset;\n\n  return new Iterator(function next() {\n    let step;\n\n    if (state === 'outer') {\n      step = iterator.next();\n\n      if (step.done === true) return step;\n\n      sourceData = step.value;\n\n      state = 'directed';\n      return next();\n    }\n\n    if (state === 'directed') {\n      if (type === 'undirected') {\n        state = 'undirected';\n        return next();\n      }\n\n      adj = sourceData.out;\n      neighbors = Object.keys(sourceData.out);\n      offset = 0;\n      state = 'inner-directed';\n\n      return next();\n    }\n\n    if (state === 'undirected') {\n      if (type === 'directed') {\n        state = 'outer';\n        return next();\n      }\n\n      adj = sourceData.undirected;\n      neighbors = Object.keys(sourceData.undirected);\n      offset = 0;\n      state = 'inner-undirected';\n    }\n\n    // Inner\n    if (!container && offset >= neighbors.length) {\n      if (state === 'inner-undirected') state = 'outer';\n      else state = 'undirected';\n\n      return next();\n    }\n\n    if (!container) {\n      const neighbor = neighbors[offset++];\n      container = adj[neighbor].values();\n      return next();\n    }\n\n    step = container.next();\n\n    if (step.done) {\n      container = null;\n      return next();\n    }\n\n    const edgeData = step.value;\n    let targetData = edgeData.target;\n\n    if (state === 'inner-undirected' && targetData.key === sourceData.key)\n      targetData = edgeData.source;\n\n    return {\n      done: false,\n      value: {\n        source: sourceData.key,\n        target: targetData.key,\n        sourceAttributes: sourceData.attributes,\n        targetAttributes: targetData.attributes,\n        edge: edgeData.key,\n        edgeAttributes: edgeData.attributes,\n        undirected: edgeData.undirected\n      }\n    };\n  });\n}\n","/**\n * Graphology Serialization Utilities\n * ===================================\n *\n * Collection of functions used to validate import-export formats & to ouput\n * them from internal graph data.\n *\n * Serialized Node:\n * {key, ?attributes}\n *\n * Serialized Edge:\n * {key?, source, target, attributes?, undirected?}\n *\n * Serialized Graph:\n * {nodes[], edges?[]}\n */\nimport {assign, isPlainObject, isEmpty} from './utils';\n\n/**\n * Formats internal node data into a serialized node.\n *\n * @param  {any}    key  - The node's key.\n * @param  {object} data - Internal node's data.\n * @return {array}       - The serialized node.\n */\nexport function serializeNode(key, data) {\n  const serialized = {key};\n\n  if (!isEmpty(data.attributes))\n    serialized.attributes = assign({}, data.attributes);\n\n  return serialized;\n}\n\n/**\n * Formats internal edge data into a serialized edge.\n *\n * @param  {any}    key  - The edge's key.\n * @param  {object} data - Internal edge's data.\n * @return {array}       - The serialized edge.\n */\nexport function serializeEdge(key, data) {\n  const serialized = {\n    key,\n    source: data.source.key,\n    target: data.target.key\n  };\n\n  if (!isEmpty(data.attributes))\n    serialized.attributes = assign({}, data.attributes);\n\n  if (data.undirected) serialized.undirected = true;\n\n  return serialized;\n}\n\n/**\n * Checks whether the given value is a serialized node.\n *\n * @param  {mixed} value - Target value.\n * @return {string|null}\n */\nexport function validateSerializedNode(value) {\n  if (!isPlainObject(value)) return 'not-object';\n\n  if (!('key' in value)) return 'no-key';\n\n  if (\n    'attributes' in value &&\n    (!isPlainObject(value.attributes) || value.attributes === null)\n  )\n    return 'invalid-attributes';\n\n  return null;\n}\n\n/**\n * Checks whether the given value is a serialized edge.\n *\n * @param  {mixed} value - Target value.\n * @return {string|null}\n */\nexport function validateSerializedEdge(value) {\n  if (!isPlainObject(value)) return 'not-object';\n\n  if (!('source' in value)) return 'no-source';\n\n  if (!('target' in value)) return 'no-target';\n\n  if (\n    'attributes' in value &&\n    (!isPlainObject(value.attributes) || value.attributes === null)\n  )\n    return 'invalid-attributes';\n\n  if ('undirected' in value && typeof value.undirected !== 'boolean')\n    return 'invalid-undirected';\n\n  return null;\n}\n","/* eslint no-nested-ternary: 0 */\n/**\n * Graphology Reference Implementation\n * ====================================\n *\n * Reference implementation of the graphology specs.\n */\nimport {EventEmitter} from 'events';\nimport Iterator from 'obliterator/iterator';\nimport take from 'obliterator/take';\n\nimport {\n  InvalidArgumentsGraphError,\n  NotFoundGraphError,\n  UsageGraphError\n} from './errors';\n\nimport {\n  MixedNodeData,\n  DirectedNodeData,\n  UndirectedNodeData,\n  EdgeData\n} from './data';\n\nimport {\n  updateStructureIndex,\n  clearEdgeFromStructureIndex,\n  clearStructureIndex,\n  upgradeStructureIndexToMulti\n} from './indices';\n\nimport {attachAttributesMethods} from './attributes';\nimport {attachEdgeIterationMethods} from './iteration/edges';\nimport {attachNeighborIterationMethods} from './iteration/neighbors';\nimport {\n  forEachAdjacencySimple,\n  forEachAdjacencyMulti,\n  createAdjacencyIteratorSimple,\n  createAdjacencyIteratorMulti\n} from './iteration/adjacency';\n\nimport {\n  serializeNode,\n  serializeEdge,\n  validateSerializedNode,\n  validateSerializedEdge\n} from './serialization';\n\nimport {\n  assign,\n  getMatchingEdge,\n  isGraph,\n  isPlainObject,\n  privateProperty,\n  readOnlyProperty,\n  incrementalIdStartingFromRandomByte,\n  validateHints\n} from './utils';\n\n/**\n * Constants.\n */\nconst INSTANCE_ID = incrementalIdStartingFromRandomByte();\n\n/**\n * Enums.\n */\nconst TYPES = new Set(['directed', 'undirected', 'mixed']);\n\nconst EMITTER_PROPS = new Set([\n  'domain',\n  '_events',\n  '_eventsCount',\n  '_maxListeners'\n]);\n\nconst EDGE_ADD_METHODS = [\n  {\n    name: verb => `${verb}Edge`,\n    generateKey: true\n  },\n  {\n    name: verb => `${verb}DirectedEdge`,\n    generateKey: true,\n    type: 'directed'\n  },\n  {\n    name: verb => `${verb}UndirectedEdge`,\n    generateKey: true,\n    type: 'undirected'\n  },\n  {\n    name: verb => `${verb}EdgeWithKey`\n  },\n  {\n    name: verb => `${verb}DirectedEdgeWithKey`,\n    type: 'directed'\n  },\n  {\n    name: verb => `${verb}UndirectedEdgeWithKey`,\n    type: 'undirected'\n  }\n];\n\n/**\n * Default options.\n */\nconst DEFAULTS = {\n  allowSelfLoops: true,\n  multi: false,\n  type: 'mixed'\n};\n\n/**\n * Abstract functions used by the Graph class for various methods.\n */\n\n/**\n * Internal method used to add a node to the given graph\n *\n * @param  {Graph}   graph           - Target graph.\n * @param  {any}     node            - The node's key.\n * @param  {object}  [attributes]    - Optional attributes.\n * @return {NodeData}                - Created node data.\n */\nfunction addNode(graph, node, attributes) {\n  if (attributes && !isPlainObject(attributes))\n    throw new InvalidArgumentsGraphError(\n      `Graph.addNode: invalid attributes. Expecting an object but got \"${attributes}\"`\n    );\n\n  // String coercion\n  node = '' + node;\n  attributes = attributes || {};\n\n  if (graph._nodes.has(node))\n    throw new UsageGraphError(\n      `Graph.addNode: the \"${node}\" node already exist in the graph.`\n    );\n\n  const data = new graph.NodeDataClass(node, attributes);\n\n  // Adding the node to internal register\n  graph._nodes.set(node, data);\n\n  // Emitting\n  graph.emit('nodeAdded', {\n    key: node,\n    attributes\n  });\n\n  return data;\n}\n\n/**\n * Same as the above but without sanity checks because we call this in contexts\n * where necessary checks were already done.\n */\nfunction unsafeAddNode(graph, node, attributes) {\n  const data = new graph.NodeDataClass(node, attributes);\n\n  graph._nodes.set(node, data);\n\n  graph.emit('nodeAdded', {\n    key: node,\n    attributes\n  });\n\n  return data;\n}\n\n/**\n * Internal method used to add an arbitrary edge to the given graph.\n *\n * @param  {Graph}   graph           - Target graph.\n * @param  {string}  name            - Name of the child method for errors.\n * @param  {boolean} mustGenerateKey - Should the graph generate an id?\n * @param  {boolean} undirected      - Whether the edge is undirected.\n * @param  {any}     edge            - The edge's key.\n * @param  {any}     source          - The source node.\n * @param  {any}     target          - The target node.\n * @param  {object}  [attributes]    - Optional attributes.\n * @return {any}                     - The edge.\n *\n * @throws {Error} - Will throw if the graph is of the wrong type.\n * @throws {Error} - Will throw if the given attributes are not an object.\n * @throws {Error} - Will throw if source or target doesn't exist.\n * @throws {Error} - Will throw if the edge already exist.\n */\nfunction addEdge(\n  graph,\n  name,\n  mustGenerateKey,\n  undirected,\n  edge,\n  source,\n  target,\n  attributes\n) {\n  // Checking validity of operation\n  if (!undirected && graph.type === 'undirected')\n    throw new UsageGraphError(\n      `Graph.${name}: you cannot add a directed edge to an undirected graph. Use the #.addEdge or #.addUndirectedEdge instead.`\n    );\n\n  if (undirected && graph.type === 'directed')\n    throw new UsageGraphError(\n      `Graph.${name}: you cannot add an undirected edge to a directed graph. Use the #.addEdge or #.addDirectedEdge instead.`\n    );\n\n  if (attributes && !isPlainObject(attributes))\n    throw new InvalidArgumentsGraphError(\n      `Graph.${name}: invalid attributes. Expecting an object but got \"${attributes}\"`\n    );\n\n  // Coercion of source & target:\n  source = '' + source;\n  target = '' + target;\n  attributes = attributes || {};\n\n  if (!graph.allowSelfLoops && source === target)\n    throw new UsageGraphError(\n      `Graph.${name}: source & target are the same (\"${source}\"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false.`\n    );\n\n  const sourceData = graph._nodes.get(source),\n    targetData = graph._nodes.get(target);\n\n  if (!sourceData)\n    throw new NotFoundGraphError(\n      `Graph.${name}: source node \"${source}\" not found.`\n    );\n\n  if (!targetData)\n    throw new NotFoundGraphError(\n      `Graph.${name}: target node \"${target}\" not found.`\n    );\n\n  // Must the graph generate an id for this edge?\n  const eventData = {\n    key: null,\n    undirected,\n    source,\n    target,\n    attributes\n  };\n\n  if (mustGenerateKey) {\n    // NOTE: in this case we can guarantee that the key does not already\n    // exist and is already correctly casted as a string\n    edge = graph._edgeKeyGenerator();\n  } else {\n    // Coercion of edge key\n    edge = '' + edge;\n\n    // Here, we have a key collision\n    if (graph._edges.has(edge))\n      throw new UsageGraphError(\n        `Graph.${name}: the \"${edge}\" edge already exists in the graph.`\n      );\n  }\n\n  // Here, we might have a source / target collision\n  if (\n    !graph.multi &&\n    (undirected\n      ? typeof sourceData.undirected[target] !== 'undefined'\n      : typeof sourceData.out[target] !== 'undefined')\n  ) {\n    throw new UsageGraphError(\n      `Graph.${name}: an edge linking \"${source}\" to \"${target}\" already exists. If you really want to add multiple edges linking those nodes, you should create a multi graph by using the 'multi' option.`\n    );\n  }\n\n  // Storing some data\n  const edgeData = new EdgeData(\n    undirected,\n    edge,\n    sourceData,\n    targetData,\n    attributes\n  );\n\n  // Adding the edge to the internal register\n  graph._edges.set(edge, edgeData);\n\n  // Incrementing node degree counters\n  if (source === target) {\n    if (undirected) {\n      sourceData.undirectedSelfLoops++;\n      graph._undirectedSelfLoopCount++;\n    } else {\n      sourceData.directedSelfLoops++;\n      graph._directedSelfLoopCount++;\n    }\n  } else {\n    if (undirected) {\n      sourceData.undirectedDegree++;\n      targetData.undirectedDegree++;\n    } else {\n      sourceData.outDegree++;\n      targetData.inDegree++;\n    }\n  }\n\n  // Updating relevant index\n  updateStructureIndex(\n    graph,\n    undirected,\n    edgeData,\n    source,\n    target,\n    sourceData,\n    targetData\n  );\n\n  if (undirected) graph._undirectedSize++;\n  else graph._directedSize++;\n\n  // Emitting\n  eventData.key = edge;\n\n  graph.emit('edgeAdded', eventData);\n\n  return edge;\n}\n\n/**\n * Internal method used to add an arbitrary edge to the given graph.\n *\n * @param  {Graph}   graph           - Target graph.\n * @param  {string}  name            - Name of the child method for errors.\n * @param  {boolean} mustGenerateKey - Should the graph generate an id?\n * @param  {boolean} undirected      - Whether the edge is undirected.\n * @param  {any}     edge            - The edge's key.\n * @param  {any}     source          - The source node.\n * @param  {any}     target          - The target node.\n * @param  {object}  [attributes]    - Optional attributes.\n * @param  {boolean} [asUpdater]       - Are we updating or merging?\n * @return {any}                     - The edge.\n *\n * @throws {Error} - Will throw if the graph is of the wrong type.\n * @throws {Error} - Will throw if the given attributes are not an object.\n * @throws {Error} - Will throw if source or target doesn't exist.\n * @throws {Error} - Will throw if the edge already exist.\n */\nfunction mergeEdge(\n  graph,\n  name,\n  mustGenerateKey,\n  undirected,\n  edge,\n  source,\n  target,\n  attributes,\n  asUpdater\n) {\n  // Checking validity of operation\n  if (!undirected && graph.type === 'undirected')\n    throw new UsageGraphError(\n      `Graph.${name}: you cannot merge/update a directed edge to an undirected graph. Use the #.mergeEdge/#.updateEdge or #.addUndirectedEdge instead.`\n    );\n\n  if (undirected && graph.type === 'directed')\n    throw new UsageGraphError(\n      `Graph.${name}: you cannot merge/update an undirected edge to a directed graph. Use the #.mergeEdge/#.updateEdge or #.addDirectedEdge instead.`\n    );\n\n  if (attributes) {\n    if (asUpdater) {\n      if (typeof attributes !== 'function')\n        throw new InvalidArgumentsGraphError(\n          `Graph.${name}: invalid updater function. Expecting a function but got \"${attributes}\"`\n        );\n    } else {\n      if (!isPlainObject(attributes))\n        throw new InvalidArgumentsGraphError(\n          `Graph.${name}: invalid attributes. Expecting an object but got \"${attributes}\"`\n        );\n    }\n  }\n\n  // Coercion of source & target:\n  source = '' + source;\n  target = '' + target;\n\n  let updater;\n\n  if (asUpdater) {\n    updater = attributes;\n    attributes = undefined;\n  }\n\n  if (!graph.allowSelfLoops && source === target)\n    throw new UsageGraphError(\n      `Graph.${name}: source & target are the same (\"${source}\"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false.`\n    );\n\n  let sourceData = graph._nodes.get(source),\n    targetData = graph._nodes.get(target),\n    edgeData;\n\n  // Do we need to handle duplicate?\n  let alreadyExistingEdgeData;\n\n  if (!mustGenerateKey) {\n    edgeData = graph._edges.get(edge);\n\n    if (edgeData) {\n      // Here, we need to ensure, if the user gave a key, that source & target\n      // are coherent\n      if (\n        edgeData.source.key !== source ||\n        edgeData.target.key !== target ||\n        (undirected &&\n          (edgeData.source.key !== target || edgeData.target.key !== source))\n      ) {\n        throw new UsageGraphError(\n          `Graph.${name}: inconsistency detected when attempting to merge the \"${edge}\" edge with \"${source}\" source & \"${target}\" target vs. (\"${edgeData.source.key}\", \"${edgeData.target.key}\").`\n        );\n      }\n\n      alreadyExistingEdgeData = edgeData;\n    }\n  }\n\n  // Here, we might have a source / target collision\n  if (!alreadyExistingEdgeData && !graph.multi && sourceData) {\n    alreadyExistingEdgeData = undirected\n      ? sourceData.undirected[target]\n      : sourceData.out[target];\n  }\n\n  // Handling duplicates\n  if (alreadyExistingEdgeData) {\n    // We can skip the attribute merging part if the user did not provide them\n    if (asUpdater ? !updater : !attributes) return alreadyExistingEdgeData.key;\n\n    // Updating the attributes\n    if (asUpdater) {\n      const oldAttributes = alreadyExistingEdgeData.attributes;\n      alreadyExistingEdgeData.attributes = updater(oldAttributes);\n\n      graph.emit('edgeAttributesUpdated', {\n        type: 'replace',\n        key: alreadyExistingEdgeData.key,\n        attributes: alreadyExistingEdgeData.attributes\n      });\n    }\n\n    // Merging the attributes\n    else {\n      assign(alreadyExistingEdgeData.attributes, attributes);\n\n      graph.emit('edgeAttributesUpdated', {\n        type: 'merge',\n        key: alreadyExistingEdgeData.key,\n        attributes: alreadyExistingEdgeData.attributes,\n        data: attributes\n      });\n    }\n\n    return alreadyExistingEdgeData.key;\n  }\n\n  attributes = attributes || {};\n\n  if (asUpdater && updater) attributes = updater(attributes);\n\n  // Must the graph generate an id for this edge?\n  const eventData = {\n    key: null,\n    undirected,\n    source,\n    target,\n    attributes\n  };\n\n  if (mustGenerateKey) {\n    // NOTE: in this case we can guarantee that the key does not already\n    // exist and is already correctly casted as a string\n    edge = graph._edgeKeyGenerator();\n  } else {\n    // Coercion of edge key\n    edge = '' + edge;\n\n    // Here, we have a key collision\n    if (graph._edges.has(edge))\n      throw new UsageGraphError(\n        `Graph.${name}: the \"${edge}\" edge already exists in the graph.`\n      );\n  }\n\n  if (!sourceData) {\n    sourceData = unsafeAddNode(graph, source, {});\n\n    if (source === target) targetData = sourceData;\n  }\n  if (!targetData) {\n    targetData = unsafeAddNode(graph, target, {});\n  }\n\n  // Storing some data\n  edgeData = new EdgeData(undirected, edge, sourceData, targetData, attributes);\n\n  // Adding the edge to the internal register\n  graph._edges.set(edge, edgeData);\n\n  // Incrementing node degree counters\n  if (source === target) {\n    if (undirected) {\n      sourceData.undirectedSelfLoops++;\n      graph._undirectedSelfLoopCount++;\n    } else {\n      sourceData.directedSelfLoops++;\n      graph._directedSelfLoopCount++;\n    }\n  } else {\n    if (undirected) {\n      sourceData.undirectedDegree++;\n      targetData.undirectedDegree++;\n    } else {\n      sourceData.outDegree++;\n      targetData.inDegree++;\n    }\n  }\n\n  // Updating relevant index\n  updateStructureIndex(\n    graph,\n    undirected,\n    edgeData,\n    source,\n    target,\n    sourceData,\n    targetData\n  );\n\n  if (undirected) graph._undirectedSize++;\n  else graph._directedSize++;\n\n  // Emitting\n  eventData.key = edge;\n\n  graph.emit('edgeAdded', eventData);\n\n  return edge;\n}\n\n/**\n * Graph class\n *\n * @constructor\n * @param  {object}  [options] - Options:\n * @param  {boolean}   [allowSelfLoops] - Allow self loops?\n * @param  {string}    [type]           - Type of the graph.\n * @param  {boolean}   [map]            - Allow references as keys?\n * @param  {boolean}   [multi]          - Allow parallel edges?\n *\n * @throws {Error} - Will throw if the arguments are not valid.\n */\nexport default class Graph extends EventEmitter {\n  constructor(options) {\n    super();\n\n    //-- Solving options\n    options = assign({}, DEFAULTS, options);\n\n    // Enforcing options validity\n    if (typeof options.multi !== 'boolean')\n      throw new InvalidArgumentsGraphError(\n        `Graph.constructor: invalid 'multi' option. Expecting a boolean but got \"${options.multi}\".`\n      );\n\n    if (!TYPES.has(options.type))\n      throw new InvalidArgumentsGraphError(\n        `Graph.constructor: invalid 'type' option. Should be one of \"mixed\", \"directed\" or \"undirected\" but got \"${options.type}\".`\n      );\n\n    if (typeof options.allowSelfLoops !== 'boolean')\n      throw new InvalidArgumentsGraphError(\n        `Graph.constructor: invalid 'allowSelfLoops' option. Expecting a boolean but got \"${options.allowSelfLoops}\".`\n      );\n\n    //-- Private properties\n\n    // Utilities\n    const NodeDataClass =\n      options.type === 'mixed'\n        ? MixedNodeData\n        : options.type === 'directed'\n        ? DirectedNodeData\n        : UndirectedNodeData;\n\n    privateProperty(this, 'NodeDataClass', NodeDataClass);\n\n    // Internal edge key generator\n\n    // NOTE: this internal generator produce keys that are strings\n    // composed of a weird prefix, an incremental instance id starting from\n    // a random byte and finally an internal instance incremental id.\n    // All this to avoid intra-frame and cross-frame adversarial inputs\n    // that can force a single #.addEdge call to degenerate into a O(n)\n    // available key search loop.\n\n    // It also ensures that automatically generated edge keys are unlikely\n    // to produce collisions with arbitrary keys given by users.\n    const instanceId = INSTANCE_ID();\n    let edgeId = 0;\n\n    const edgeKeyGenerator = () => {\n      let availableEdgeKey;\n\n      do {\n        availableEdgeKey = 'geid_' + instanceId + '_' + edgeId++;\n      } while (this._edges.has(availableEdgeKey));\n\n      return availableEdgeKey;\n    };\n\n    // Indexes\n    privateProperty(this, '_attributes', {});\n    privateProperty(this, '_nodes', new Map());\n    privateProperty(this, '_edges', new Map());\n    privateProperty(this, '_directedSize', 0);\n    privateProperty(this, '_undirectedSize', 0);\n    privateProperty(this, '_directedSelfLoopCount', 0);\n    privateProperty(this, '_undirectedSelfLoopCount', 0);\n    privateProperty(this, '_edgeKeyGenerator', edgeKeyGenerator);\n\n    // Options\n    privateProperty(this, '_options', options);\n\n    // Emitter properties\n    EMITTER_PROPS.forEach(prop => privateProperty(this, prop, this[prop]));\n\n    //-- Properties readers\n    readOnlyProperty(this, 'order', () => this._nodes.size);\n    readOnlyProperty(this, 'size', () => this._edges.size);\n    readOnlyProperty(this, 'directedSize', () => this._directedSize);\n    readOnlyProperty(this, 'undirectedSize', () => this._undirectedSize);\n    readOnlyProperty(\n      this,\n      'selfLoopCount',\n      () => this._directedSelfLoopCount + this._undirectedSelfLoopCount\n    );\n    readOnlyProperty(\n      this,\n      'directedSelfLoopCount',\n      () => this._directedSelfLoopCount\n    );\n    readOnlyProperty(\n      this,\n      'undirectedSelfLoopCount',\n      () => this._undirectedSelfLoopCount\n    );\n    readOnlyProperty(this, 'multi', this._options.multi);\n    readOnlyProperty(this, 'type', this._options.type);\n    readOnlyProperty(this, 'allowSelfLoops', this._options.allowSelfLoops);\n    readOnlyProperty(this, 'implementation', () => 'graphology');\n  }\n\n  _resetInstanceCounters() {\n    this._directedSize = 0;\n    this._undirectedSize = 0;\n    this._directedSelfLoopCount = 0;\n    this._undirectedSelfLoopCount = 0;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Read\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method returning whether the given node is found in the graph.\n   *\n   * @param  {any}     node - The node.\n   * @return {boolean}\n   */\n  hasNode(node) {\n    return this._nodes.has('' + node);\n  }\n\n  /**\n   * Method returning whether the given directed edge is found in the graph.\n   *\n   * Arity 1:\n   * @param  {any}     edge - The edge's key.\n   *\n   * Arity 2:\n   * @param  {any}     source - The edge's source.\n   * @param  {any}     target - The edge's target.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the arguments are invalid.\n   */\n  hasDirectedEdge(source, target) {\n    // Early termination\n    if (this.type === 'undirected') return false;\n\n    if (arguments.length === 1) {\n      const edge = '' + source;\n\n      const edgeData = this._edges.get(edge);\n\n      return !!edgeData && !edgeData.undirected;\n    } else if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      // If the node source or the target is not in the graph we break\n      const nodeData = this._nodes.get(source);\n\n      if (!nodeData) return false;\n\n      // Is there a directed edge pointing toward target?\n      const edges = nodeData.out[target];\n\n      if (!edges) return false;\n\n      return this.multi ? !!edges.size : true;\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.hasDirectedEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`\n    );\n  }\n\n  /**\n   * Method returning whether the given undirected edge is found in the graph.\n   *\n   * Arity 1:\n   * @param  {any}     edge - The edge's key.\n   *\n   * Arity 2:\n   * @param  {any}     source - The edge's source.\n   * @param  {any}     target - The edge's target.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the arguments are invalid.\n   */\n  hasUndirectedEdge(source, target) {\n    // Early termination\n    if (this.type === 'directed') return false;\n\n    if (arguments.length === 1) {\n      const edge = '' + source;\n\n      const edgeData = this._edges.get(edge);\n\n      return !!edgeData && edgeData.undirected;\n    } else if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      // If the node source or the target is not in the graph we break\n      const nodeData = this._nodes.get(source);\n\n      if (!nodeData) return false;\n\n      // Is there a directed edge pointing toward target?\n      const edges = nodeData.undirected[target];\n\n      if (!edges) return false;\n\n      return this.multi ? !!edges.size : true;\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.hasDirectedEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`\n    );\n  }\n\n  /**\n   * Method returning whether the given edge is found in the graph.\n   *\n   * Arity 1:\n   * @param  {any}     edge - The edge's key.\n   *\n   * Arity 2:\n   * @param  {any}     source - The edge's source.\n   * @param  {any}     target - The edge's target.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the arguments are invalid.\n   */\n  hasEdge(source, target) {\n    if (arguments.length === 1) {\n      const edge = '' + source;\n\n      return this._edges.has(edge);\n    } else if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      // If the node source or the target is not in the graph we break\n      const nodeData = this._nodes.get(source);\n\n      if (!nodeData) return false;\n\n      // Is there a directed edge pointing toward target?\n      let edges = typeof nodeData.out !== 'undefined' && nodeData.out[target];\n\n      if (!edges)\n        edges =\n          typeof nodeData.undirected !== 'undefined' &&\n          nodeData.undirected[target];\n\n      if (!edges) return false;\n\n      return this.multi ? !!edges.size : true;\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.hasEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`\n    );\n  }\n\n  /**\n   * Method returning the edge matching source & target in a directed fashion.\n   *\n   * @param  {any} source - The edge's source.\n   * @param  {any} target - The edge's target.\n   *\n   * @return {any|undefined}\n   *\n   * @throws {Error} - Will throw if the graph is multi.\n   * @throws {Error} - Will throw if source or target doesn't exist.\n   */\n  directedEdge(source, target) {\n    if (this.type === 'undirected') return;\n\n    source = '' + source;\n    target = '' + target;\n\n    if (this.multi)\n      throw new UsageGraphError(\n        'Graph.directedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.directedEdges instead.'\n      );\n\n    const sourceData = this._nodes.get(source);\n\n    if (!sourceData)\n      throw new NotFoundGraphError(\n        `Graph.directedEdge: could not find the \"${source}\" source node in the graph.`\n      );\n\n    if (!this._nodes.has(target))\n      throw new NotFoundGraphError(\n        `Graph.directedEdge: could not find the \"${target}\" target node in the graph.`\n      );\n\n    const edgeData = (sourceData.out && sourceData.out[target]) || undefined;\n\n    if (edgeData) return edgeData.key;\n  }\n\n  /**\n   * Method returning the edge matching source & target in a undirected fashion.\n   *\n   * @param  {any} source - The edge's source.\n   * @param  {any} target - The edge's target.\n   *\n   * @return {any|undefined}\n   *\n   * @throws {Error} - Will throw if the graph is multi.\n   * @throws {Error} - Will throw if source or target doesn't exist.\n   */\n  undirectedEdge(source, target) {\n    if (this.type === 'directed') return;\n\n    source = '' + source;\n    target = '' + target;\n\n    if (this.multi)\n      throw new UsageGraphError(\n        'Graph.undirectedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.undirectedEdges instead.'\n      );\n\n    const sourceData = this._nodes.get(source);\n\n    if (!sourceData)\n      throw new NotFoundGraphError(\n        `Graph.undirectedEdge: could not find the \"${source}\" source node in the graph.`\n      );\n\n    if (!this._nodes.has(target))\n      throw new NotFoundGraphError(\n        `Graph.undirectedEdge: could not find the \"${target}\" target node in the graph.`\n      );\n\n    const edgeData =\n      (sourceData.undirected && sourceData.undirected[target]) || undefined;\n\n    if (edgeData) return edgeData.key;\n  }\n\n  /**\n   * Method returning the edge matching source & target in a mixed fashion.\n   *\n   * @param  {any} source - The edge's source.\n   * @param  {any} target - The edge's target.\n   *\n   * @return {any|undefined}\n   *\n   * @throws {Error} - Will throw if the graph is multi.\n   * @throws {Error} - Will throw if source or target doesn't exist.\n   */\n  edge(source, target) {\n    if (this.multi)\n      throw new UsageGraphError(\n        'Graph.edge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.edges instead.'\n      );\n\n    source = '' + source;\n    target = '' + target;\n\n    const sourceData = this._nodes.get(source);\n\n    if (!sourceData)\n      throw new NotFoundGraphError(\n        `Graph.edge: could not find the \"${source}\" source node in the graph.`\n      );\n\n    if (!this._nodes.has(target))\n      throw new NotFoundGraphError(\n        `Graph.edge: could not find the \"${target}\" target node in the graph.`\n      );\n\n    const edgeData =\n      (sourceData.out && sourceData.out[target]) ||\n      (sourceData.undirected && sourceData.undirected[target]) ||\n      undefined;\n\n    if (edgeData) return edgeData.key;\n  }\n\n  /**\n   * Method returning whether two nodes are directed neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areDirectedNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areDirectedNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return false;\n\n    return neighbor in nodeData.in || neighbor in nodeData.out;\n  }\n\n  /**\n   * Method returning whether two nodes are out neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areOutNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areOutNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return false;\n\n    return neighbor in nodeData.out;\n  }\n\n  /**\n   * Method returning whether two nodes are in neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areInNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areInNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return false;\n\n    return neighbor in nodeData.in;\n  }\n\n  /**\n   * Method returning whether two nodes are undirected neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areUndirectedNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areUndirectedNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'directed') return false;\n\n    return neighbor in nodeData.undirected;\n  }\n\n  /**\n   * Method returning whether two nodes are neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type !== 'undirected') {\n      if (neighbor in nodeData.in || neighbor in nodeData.out) return true;\n    }\n\n    if (this.type !== 'directed') {\n      if (neighbor in nodeData.undirected) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Method returning whether two nodes are inbound neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areInboundNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areInboundNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type !== 'undirected') {\n      if (neighbor in nodeData.in) return true;\n    }\n\n    if (this.type !== 'directed') {\n      if (neighbor in nodeData.undirected) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Method returning whether two nodes are outbound neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areOutboundNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areOutboundNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type !== 'undirected') {\n      if (neighbor in nodeData.out) return true;\n    }\n\n    if (this.type !== 'directed') {\n      if (neighbor in nodeData.undirected) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Method returning the given node's in degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  inDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.inDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.inDegree + nodeData.directedSelfLoops;\n  }\n\n  /**\n   * Method returning the given node's out degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  outDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.outDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.outDegree + nodeData.directedSelfLoops;\n  }\n\n  /**\n   * Method returning the given node's directed degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  directedDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.directedDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    const loops = nodeData.directedSelfLoops;\n\n    const inDegree = nodeData.inDegree + loops;\n    const outDegree = nodeData.outDegree + loops;\n\n    return inDegree + outDegree;\n  }\n\n  /**\n   * Method returning the given node's undirected degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  undirectedDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.undirectedDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'directed') return 0;\n\n    const loops = nodeData.undirectedSelfLoops;\n\n    return nodeData.undirectedDegree + loops * 2;\n  }\n\n  /**\n   * Method returning the given node's directed degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  degree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.degree: could not find the \"${node}\" node in the graph.`\n      );\n\n    let degree = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree + nodeData.undirectedSelfLoops * 2;\n    }\n\n    if (this.type !== 'undirected') {\n      degree +=\n        nodeData.inDegree + nodeData.outDegree + nodeData.directedSelfLoops * 2;\n    }\n\n    return degree;\n  }\n\n  /**\n   * Method returning the given node's in degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  inDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.inDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.inDegree;\n  }\n\n  /**\n   * Method returning the given node's out degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  outDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.outDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.outDegree;\n  }\n\n  /**\n   * Method returning the given node's directed degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  directedDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.directedDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.inDegree + nodeData.outDegree;\n  }\n\n  /**\n   * Method returning the given node's undirected degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  undirectedDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.undirectedDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'directed') return 0;\n\n    return nodeData.undirectedDegree;\n  }\n\n  /**\n   * Method returning the given node's directed degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  degreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.degreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    let degree = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree;\n    }\n\n    if (this.type !== 'undirected') {\n      degree += nodeData.inDegree + nodeData.outDegree;\n    }\n\n    return degree;\n  }\n\n  /**\n   * Method returning the given edge's source.\n   *\n   * @param  {any} edge - The edge's key.\n   * @return {any}      - The edge's source.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  source(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.source: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.source.key;\n  }\n\n  /**\n   * Method returning the given edge's target.\n   *\n   * @param  {any} edge - The edge's key.\n   * @return {any}      - The edge's target.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  target(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.target: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.target.key;\n  }\n\n  /**\n   * Method returning the given edge's extremities.\n   *\n   * @param  {any}   edge - The edge's key.\n   * @return {array}      - The edge's extremities.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  extremities(edge) {\n    edge = '' + edge;\n\n    const edgeData = this._edges.get(edge);\n\n    if (!edgeData)\n      throw new NotFoundGraphError(\n        `Graph.extremities: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return [edgeData.source.key, edgeData.target.key];\n  }\n\n  /**\n   * Given a node & an edge, returns the other extremity of the edge.\n   *\n   * @param  {any}   node - The node's key.\n   * @param  {any}   edge - The edge's key.\n   * @return {any}        - The related node.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph or if the\n   *                   edge & node are not related.\n   */\n  opposite(node, edge) {\n    node = '' + node;\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.opposite: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    const source = data.source.key,\n      target = data.target.key;\n\n    if (node !== source && node !== target)\n      throw new NotFoundGraphError(\n        `Graph.opposite: the \"${node}\" node is not attached to the \"${edge}\" edge (${source}, ${target}).`\n      );\n\n    return node === source ? target : source;\n  }\n\n  /**\n   * Returns whether the given edge has the given node as extremity.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @param  {any}     node - The node's key.\n   * @return {boolean}      - The related node.\n   *\n   * @throws {Error} - Will throw if either the node or the edge isn't in the graph.\n   */\n  hasExtremity(edge, node) {\n    edge = '' + edge;\n    node = '' + node;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.hasExtremity: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.source.key === node || data.target.key === node;\n  }\n\n  /**\n   * Method returning whether the given edge is undirected.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  isUndirected(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.isUndirected: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.undirected;\n  }\n\n  /**\n   * Method returning whether the given edge is directed.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  isDirected(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.isDirected: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return !data.undirected;\n  }\n\n  /**\n   * Method returning whether the given edge is a self loop.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  isSelfLoop(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.isSelfLoop: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.source === data.target;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Mutation\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method used to add a node to the graph.\n   *\n   * @param  {any}    node         - The node.\n   * @param  {object} [attributes] - Optional attributes.\n   * @return {any}                 - The node.\n   *\n   * @throws {Error} - Will throw if the given node already exist.\n   * @throws {Error} - Will throw if the given attributes are not an object.\n   */\n  addNode(node, attributes) {\n    const nodeData = addNode(this, node, attributes);\n\n    return nodeData.key;\n  }\n\n  /**\n   * Method used to merge a node into the graph.\n   *\n   * @param  {any}    node         - The node.\n   * @param  {object} [attributes] - Optional attributes.\n   * @return {any}                 - The node.\n   */\n  mergeNode(node, attributes) {\n    if (attributes && !isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        `Graph.mergeNode: invalid attributes. Expecting an object but got \"${attributes}\"`\n      );\n\n    // String coercion\n    node = '' + node;\n    attributes = attributes || {};\n\n    // If the node already exists, we merge the attributes\n    let data = this._nodes.get(node);\n\n    if (data) {\n      if (attributes) {\n        assign(data.attributes, attributes);\n\n        this.emit('nodeAttributesUpdated', {\n          type: 'merge',\n          key: node,\n          attributes: data.attributes,\n          data: attributes\n        });\n      }\n      return node;\n    }\n\n    data = new this.NodeDataClass(node, attributes);\n\n    // Adding the node to internal register\n    this._nodes.set(node, data);\n\n    // Emitting\n    this.emit('nodeAdded', {\n      key: node,\n      attributes\n    });\n\n    return node;\n  }\n\n  /**\n   * Method used to add a node if it does not exist in the graph or else to\n   * update its attributes using a function.\n   *\n   * @param  {any}      node      - The node.\n   * @param  {function} [updater] - Optional updater function.\n   * @return {any}                - The node.\n   */\n  updateNode(node, updater) {\n    if (updater && typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        `Graph.updateNode: invalid updater function. Expecting a function but got \"${updater}\"`\n      );\n\n    // String coercion\n    node = '' + node;\n\n    // If the node already exists, we update the attributes\n    let data = this._nodes.get(node);\n\n    if (data) {\n      if (updater) {\n        const oldAttributes = data.attributes;\n        data.attributes = updater(oldAttributes);\n\n        this.emit('nodeAttributesUpdated', {\n          type: 'replace',\n          key: node,\n          attributes: data.attributes\n        });\n      }\n      return node;\n    }\n\n    const attributes = updater ? updater({}) : {};\n\n    data = new this.NodeDataClass(node, attributes);\n\n    // Adding the node to internal register\n    this._nodes.set(node, data);\n\n    // Emitting\n    this.emit('nodeAdded', {\n      key: node,\n      attributes\n    });\n\n    return node;\n  }\n\n  /**\n   * Method used to drop a single node & all its attached edges from the graph.\n   *\n   * @param  {any}    node - The node.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the node doesn't exist.\n   */\n  dropNode(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.dropNode: could not find the \"${node}\" node in the graph.`\n      );\n\n    // Removing attached edges\n    // TODO: we could do faster\n    this.forEachEdge(node, edge => {\n      this.dropEdge(edge);\n    });\n\n    // Dropping the node from the register\n    this._nodes.delete(node);\n\n    // Emitting\n    this.emit('nodeDropped', {\n      key: node,\n      attributes: nodeData.attributes\n    });\n  }\n\n  /**\n   * Method used to drop a single edge from the graph.\n   *\n   * Arity 1:\n   * @param  {any}    edge - The edge.\n   *\n   * Arity 2:\n   * @param  {any}    source - Source node.\n   * @param  {any}    target - Target node.\n   *\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the edge doesn't exist.\n   */\n  dropEdge(edge) {\n    let edgeData;\n\n    if (arguments.length > 1) {\n      const source = '' + arguments[0],\n        target = '' + arguments[1];\n\n      edgeData = getMatchingEdge(this, source, target, this.type);\n\n      if (!edgeData)\n        throw new NotFoundGraphError(\n          `Graph.dropEdge: could not find the \"${source}\" -> \"${target}\" edge in the graph.`\n        );\n    } else {\n      edge = '' + edge;\n\n      edgeData = this._edges.get(edge);\n\n      if (!edgeData)\n        throw new NotFoundGraphError(\n          `Graph.dropEdge: could not find the \"${edge}\" edge in the graph.`\n        );\n    }\n\n    // Dropping the edge from the register\n    this._edges.delete(edgeData.key);\n\n    // Updating related degrees\n    const {source: sourceData, target: targetData, attributes} = edgeData;\n\n    const undirected = edgeData.undirected;\n\n    if (sourceData === targetData) {\n      if (undirected) {\n        sourceData.undirectedSelfLoops--;\n        this._undirectedSelfLoopCount--;\n      } else {\n        sourceData.directedSelfLoops--;\n        this._directedSelfLoopCount--;\n      }\n    } else {\n      if (undirected) {\n        sourceData.undirectedDegree--;\n        targetData.undirectedDegree--;\n      } else {\n        sourceData.outDegree--;\n        targetData.inDegree--;\n      }\n    }\n\n    // Clearing index\n    clearEdgeFromStructureIndex(this, undirected, edgeData);\n\n    if (undirected) this._undirectedSize--;\n    else this._directedSize--;\n\n    // Emitting\n    this.emit('edgeDropped', {\n      key: edge,\n      attributes,\n      source: sourceData.key,\n      target: targetData.key,\n      undirected\n    });\n\n    return this;\n  }\n\n  /**\n   * Method used to remove every edge & every node from the graph.\n   *\n   * @return {Graph}\n   */\n  clear() {\n    // Clearing edges\n    this._edges.clear();\n\n    // Clearing nodes\n    this._nodes.clear();\n\n    // Reset counters\n    this._resetInstanceCounters();\n\n    // Emitting\n    this.emit('cleared');\n  }\n\n  /**\n   * Method used to remove every edge from the graph.\n   *\n   * @return {Graph}\n   */\n  clearEdges() {\n    clearStructureIndex(this);\n\n    // Clearing edges\n    this._edges.clear();\n\n    // Reset counters\n    this._resetInstanceCounters();\n\n    // Emitting\n    this.emit('edgesCleared');\n  }\n\n  /**---------------------------------------------------------------------------\n   * Attributes-related methods\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method returning the desired graph's attribute.\n   *\n   * @param  {string} name - Name of the attribute.\n   * @return {any}\n   */\n  getAttribute(name) {\n    return this._attributes[name];\n  }\n\n  /**\n   * Method returning the graph's attributes.\n   *\n   * @return {object}\n   */\n  getAttributes() {\n    return this._attributes;\n  }\n\n  /**\n   * Method returning whether the graph has the desired attribute.\n   *\n   * @param  {string}  name - Name of the attribute.\n   * @return {boolean}\n   */\n  hasAttribute(name) {\n    return this._attributes.hasOwnProperty(name);\n  }\n\n  /**\n   * Method setting a value for the desired graph's attribute.\n   *\n   * @param  {string}  name  - Name of the attribute.\n   * @param  {any}     value - Value for the attribute.\n   * @return {Graph}\n   */\n  setAttribute(name, value) {\n    this._attributes[name] = value;\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'set',\n      attributes: this._attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method using a function to update the desired graph's attribute's value.\n   *\n   * @param  {string}   name    - Name of the attribute.\n   * @param  {function} updater - Function use to update the attribute's value.\n   * @return {Graph}\n   */\n  updateAttribute(name, updater) {\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateAttribute: updater should be a function.'\n      );\n\n    const value = this._attributes[name];\n\n    this._attributes[name] = updater(value);\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'set',\n      attributes: this._attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method removing the desired graph's attribute.\n   *\n   * @param  {string} name  - Name of the attribute.\n   * @return {Graph}\n   */\n  removeAttribute(name) {\n    delete this._attributes[name];\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'remove',\n      attributes: this._attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method replacing the graph's attributes.\n   *\n   * @param  {object} attributes - New attributes.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if given attributes are not a plain object.\n   */\n  replaceAttributes(attributes) {\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        'Graph.replaceAttributes: provided attributes are not a plain object.'\n      );\n\n    this._attributes = attributes;\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'replace',\n      attributes: this._attributes\n    });\n\n    return this;\n  }\n\n  /**\n   * Method merging the graph's attributes.\n   *\n   * @param  {object} attributes - Attributes to merge.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if given attributes are not a plain object.\n   */\n  mergeAttributes(attributes) {\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        'Graph.mergeAttributes: provided attributes are not a plain object.'\n      );\n\n    assign(this._attributes, attributes);\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'merge',\n      attributes: this._attributes,\n      data: attributes\n    });\n\n    return this;\n  }\n\n  /**\n   * Method returning the desired attribute for the given node.\n   *\n   * @param  {any}    node - Target node.\n   * @param  {string} name - Name of the attribute to get.\n   * @return {any}\n   *\n   * @throws {Error} - Will throw if the node is not found.\n   */\n  getNodeAttribute(node, name) {\n    node = '' + node;\n\n    const data = this._nodes.get(node);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.getNodeAttribute: could not find the \"${node}\" node in the graph.`\n      );\n\n    return data.attributes[name];\n  }\n\n  /**\n   * Method returning the attributes for the given node.\n   *\n   * @param  {any}    node - Target node.\n   * @return {object}\n   *\n   * @throws {Error} - Will throw if the node is not found.\n   */\n  getNodeAttributes(node) {\n    node = '' + node;\n\n    const data = this._nodes.get(node);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.getNodeAttributes: could not find the \"${node}\" node in the graph.`\n      );\n\n    return data.attributes;\n  }\n\n  /**\n   * Method checking whether the given attribute exists for the given node.\n   *\n   * @param  {any}    node - Target node.\n   * @param  {string} name - Name of the attribute to check.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node is not found.\n   */\n  hasNodeAttribute(node, name) {\n    node = '' + node;\n\n    const data = this._nodes.get(node);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.hasNodeAttribute: could not find the \"${node}\" node in the graph.`\n      );\n\n    return data.attributes.hasOwnProperty(name);\n  }\n\n  /**\n   * Method checking setting the desired attribute for the given node.\n   *\n   * @param  {any}    node  - Target node.\n   * @param  {string} name  - Name of the attribute to set.\n   * @param  {any}    value - Value for the attribute.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if less than 3 arguments are passed.\n   * @throws {Error} - Will throw if the node is not found.\n   */\n  setNodeAttribute(node, name, value) {\n    node = '' + node;\n\n    const data = this._nodes.get(node);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.setNodeAttribute: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (arguments.length < 3)\n      throw new InvalidArgumentsGraphError(\n        \"Graph.setNodeAttribute: not enough arguments. Either you forgot to pass the attribute's name or value, or you meant to use #.replaceNodeAttributes / #.mergeNodeAttributes instead.\"\n      );\n\n    data.attributes[name] = value;\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: node,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method checking setting the desired attribute for the given node.\n   *\n   * @param  {any}      node    - Target node.\n   * @param  {string}   name    - Name of the attribute to set.\n   * @param  {function} updater - Function that will update the attribute.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if less than 3 arguments are passed.\n   * @throws {Error} - Will throw if updater is not a function.\n   * @throws {Error} - Will throw if the node is not found.\n   */\n  updateNodeAttribute(node, name, updater) {\n    node = '' + node;\n\n    const data = this._nodes.get(node);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.updateNodeAttribute: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (arguments.length < 3)\n      throw new InvalidArgumentsGraphError(\n        \"Graph.updateNodeAttribute: not enough arguments. Either you forgot to pass the attribute's name or updater, or you meant to use #.replaceNodeAttributes / #.mergeNodeAttributes instead.\"\n      );\n\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateAttribute: updater should be a function.'\n      );\n\n    const attributes = data.attributes;\n    const value = updater(attributes[name]);\n\n    attributes[name] = value;\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: node,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method removing the desired attribute for the given node.\n   *\n   * @param  {any}    node  - Target node.\n   * @param  {string} name  - Name of the attribute to remove.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the node is not found.\n   */\n  removeNodeAttribute(node, name) {\n    node = '' + node;\n\n    const data = this._nodes.get(node);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.removeNodeAttribute: could not find the \"${node}\" node in the graph.`\n      );\n\n    delete data.attributes[name];\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: node,\n      type: 'remove',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method completely replacing the attributes of the given node.\n   *\n   * @param  {any}    node       - Target node.\n   * @param  {object} attributes - New attributes.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the node is not found.\n   * @throws {Error} - Will throw if the given attributes is not a plain object.\n   */\n  replaceNodeAttributes(node, attributes) {\n    node = '' + node;\n\n    const data = this._nodes.get(node);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.replaceNodeAttributes: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        'Graph.replaceNodeAttributes: provided attributes are not a plain object.'\n      );\n\n    data.attributes = attributes;\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: node,\n      type: 'replace',\n      attributes: data.attributes\n    });\n\n    return this;\n  }\n\n  /**\n   * Method merging the attributes of the given node with the provided ones.\n   *\n   * @param  {any}    node       - Target node.\n   * @param  {object} attributes - Attributes to merge.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the node is not found.\n   * @throws {Error} - Will throw if the given attributes is not a plain object.\n   */\n  mergeNodeAttributes(node, attributes) {\n    node = '' + node;\n\n    const data = this._nodes.get(node);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.mergeNodeAttributes: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        'Graph.mergeNodeAttributes: provided attributes are not a plain object.'\n      );\n\n    assign(data.attributes, attributes);\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: node,\n      type: 'merge',\n      attributes: data.attributes,\n      data: attributes\n    });\n\n    return this;\n  }\n\n  /**\n   * Method used to update each node's attributes using the given function.\n   *\n   * @param {function}  updater - Updater function to use.\n   * @param {object}    [hints] - Optional hints.\n   */\n  updateEachNodeAttributes(updater, hints) {\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateEachNodeAttributes: expecting an updater function.'\n      );\n\n    if (hints && !validateHints(hints))\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateEachNodeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n      nodeData.attributes = updater(nodeData.key, nodeData.attributes);\n    }\n\n    this.emit('eachNodeAttributesUpdated', {\n      hints: hints ? hints : null\n    });\n  }\n\n  /**\n   * Method used to update each edge's attributes using the given function.\n   *\n   * @param {function}  updater - Updater function to use.\n   * @param {object}    [hints] - Optional hints.\n   */\n  updateEachEdgeAttributes(updater, hints) {\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateEachEdgeAttributes: expecting an updater function.'\n      );\n\n    if (hints && !validateHints(hints))\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateEachEdgeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}'\n      );\n\n    const iterator = this._edges.values();\n\n    let step, edgeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      edgeData = step.value;\n      edgeData.attributes = updater(edgeData.key, edgeData.attributes);\n    }\n\n    this.emit('eachEdgeAttributesUpdated', {\n      hints: hints ? hints : null\n    });\n  }\n\n  /**---------------------------------------------------------------------------\n   * Iteration-related methods\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method iterating over the graph's adjacency using the given callback.\n   *\n   * @param  {function}  callback - Callback to use.\n   */\n  forEach(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.forEach: expecting a callback.'\n      );\n\n    if (this.multi) forEachAdjacencyMulti(false, this, callback);\n    else forEachAdjacencySimple(false, this, callback);\n  }\n\n  /**\n   * Method returning whether a matching edge can be found using given\n   * predicate function.\n   *\n   * @param  {function}  callback - Callback to use.\n   */\n  find(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError('Graph.find: expecting a callback.');\n\n    if (this.multi) return forEachAdjacencyMulti(true, this, callback);\n\n    return forEachAdjacencySimple(true, this, callback);\n  }\n\n  /**\n   * Method returning an iterator over the graph's adjacency.\n   *\n   * @return {Iterator}\n   */\n  adjacency() {\n    if (this.multi) return createAdjacencyIteratorMulti(this);\n\n    return createAdjacencyIteratorSimple(this);\n  }\n\n  /**\n   * Method returning the list of the graph's nodes.\n   *\n   * @return {array} - The nodes.\n   */\n  nodes() {\n    if (typeof Array.from === 'function') return Array.from(this._nodes.keys());\n\n    return take(this._nodes.keys(), this._nodes.size);\n  }\n\n  /**\n   * Method iterating over the graph's nodes using the given callback.\n   *\n   * @param  {function}  callback - Callback (key, attributes, index).\n   */\n  forEachNode(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.forEachNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n      callback(nodeData.key, nodeData.attributes);\n    }\n  }\n\n  /**\n   * Method iterating attempting to find a node matching the given predicate\n   * function.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  findNode(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.findNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n\n      if (callback(nodeData.key, nodeData.attributes)) return nodeData.key;\n    }\n\n    return;\n  }\n\n  /**\n   * Method mapping nodes.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  mapNodes(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.mapNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    const result = new Array(this.order);\n    let i = 0;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n      result[i++] = callback(nodeData.key, nodeData.attributes);\n    }\n\n    return result;\n  }\n\n  /**\n   * Method returning whether some node verify the given predicate.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  someNode(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.someNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n\n      if (callback(nodeData.key, nodeData.attributes)) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Method returning whether all node verify the given predicate.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  everyNode(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.everyNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n\n      if (!callback(nodeData.key, nodeData.attributes)) return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Method filtering nodes.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  filterNodes(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.filterNodes: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    const result = [];\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n\n      if (callback(nodeData.key, nodeData.attributes))\n        result.push(nodeData.key);\n    }\n\n    return result;\n  }\n\n  /**\n   * Method reducing nodes.\n   *\n   * @param  {function}  callback - Callback (accumulator, key, attributes).\n   */\n  reduceNodes(callback, initialValue) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.reduceNodes: expecting a callback.'\n      );\n\n    if (arguments.length < 2)\n      throw new InvalidArgumentsGraphError(\n        'Graph.reduceNodes: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.'\n      );\n\n    let accumulator = initialValue;\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n      accumulator = callback(accumulator, nodeData.key, nodeData.attributes);\n    }\n\n    return accumulator;\n  }\n\n  /**\n   * Method returning an iterator over the graph's node entries.\n   *\n   * @return {Iterator}\n   */\n  nodeEntries() {\n    const iterator = this._nodes.values();\n\n    return new Iterator(() => {\n      const step = iterator.next();\n\n      if (step.done) return step;\n\n      const data = step.value;\n\n      return {\n        value: {node: data.key, attributes: data.attributes},\n        done: false\n      };\n    });\n  }\n\n  /**---------------------------------------------------------------------------\n   * Serialization\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method exporting the target node.\n   *\n   * @param  {any}   node - Target node.\n   * @return {array}      - The serialized node.\n   *\n   * @throws {Error} - Will throw if the node is not found.\n   */\n  exportNode(node) {\n    node = '' + node;\n\n    const data = this._nodes.get(node);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.exportNode: could not find the \"${node}\" node in the graph.`\n      );\n\n    return serializeNode(node, data);\n  }\n\n  /**\n   * Method exporting the target edge.\n   *\n   * @param  {any}   edge - Target edge.\n   * @return {array}      - The serialized edge.\n   *\n   * @throws {Error} - Will throw if the edge is not found.\n   */\n  exportEdge(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.exportEdge: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return serializeEdge(edge, data);\n  }\n\n  /**\n   * Method used to export the whole graph.\n   *\n   * @return {object} - The serialized graph.\n   */\n  export() {\n    const nodes = new Array(this._nodes.size);\n\n    let i = 0;\n\n    this._nodes.forEach((data, key) => {\n      nodes[i++] = serializeNode(key, data);\n    });\n\n    const edges = new Array(this._edges.size);\n\n    i = 0;\n\n    this._edges.forEach((data, key) => {\n      edges[i++] = serializeEdge(key, data);\n    });\n\n    return {\n      attributes: this.getAttributes(),\n      nodes,\n      edges,\n      options: {\n        type: this.type,\n        multi: this.multi,\n        allowSelfLoops: this.allowSelfLoops\n      }\n    };\n  }\n\n  /**\n   * Method used to import a serialized node.\n   *\n   * @param  {object} data   - The serialized node.\n   * @param  {boolean} merge - Whether to merge the given node.\n   * @return {Graph}         - Returns itself for chaining.\n   */\n  importNode(data, merge = false) {\n    // Validating\n    const error = validateSerializedNode(data);\n\n    if (error) {\n      if (error === 'not-object')\n        throw new InvalidArgumentsGraphError(\n          'Graph.importNode: invalid serialized node. A serialized node should be a plain object with at least a \"key\" property.'\n        );\n      if (error === 'no-key')\n        throw new InvalidArgumentsGraphError(\n          'Graph.importNode: no key provided.'\n        );\n      if (error === 'invalid-attributes')\n        throw new InvalidArgumentsGraphError(\n          'Graph.importNode: invalid attributes. Attributes should be a plain object, null or omitted.'\n        );\n    }\n\n    // Adding the node\n    const {key, attributes = {}} = data;\n\n    if (merge) this.mergeNode(key, attributes);\n    else this.addNode(key, attributes);\n\n    return this;\n  }\n\n  /**\n   * Method used to import a serialized edge.\n   *\n   * @param  {object}  data  - The serialized edge.\n   * @param  {boolean} merge - Whether to merge the given edge.\n   * @return {Graph}         - Returns itself for chaining.\n   */\n  importEdge(data, merge = false) {\n    // Validating\n    const error = validateSerializedEdge(data);\n\n    if (error) {\n      if (error === 'not-object')\n        throw new InvalidArgumentsGraphError(\n          'Graph.importEdge: invalid serialized edge. A serialized edge should be a plain object with at least a \"source\" & \"target\" property.'\n        );\n      if (error === 'no-source')\n        throw new InvalidArgumentsGraphError(\n          'Graph.importEdge: missing souce.'\n        );\n      if (error === 'no-target')\n        throw new InvalidArgumentsGraphError(\n          'Graph.importEdge: missing target.'\n        );\n      if (error === 'invalid-attributes')\n        throw new InvalidArgumentsGraphError(\n          'Graph.importEdge: invalid attributes. Attributes should be a plain object, null or omitted.'\n        );\n      if (error === 'invalid-undirected')\n        throw new InvalidArgumentsGraphError(\n          'Graph.importEdge: invalid undirected. Undirected should be boolean or omitted.'\n        );\n    }\n\n    // Adding the edge\n    const {source, target, attributes = {}, undirected = false} = data;\n\n    let method;\n\n    if ('key' in data) {\n      method = merge\n        ? undirected\n          ? this.mergeUndirectedEdgeWithKey\n          : this.mergeDirectedEdgeWithKey\n        : undirected\n        ? this.addUndirectedEdgeWithKey\n        : this.addDirectedEdgeWithKey;\n\n      method.call(this, data.key, source, target, attributes);\n    } else {\n      method = merge\n        ? undirected\n          ? this.mergeUndirectedEdge\n          : this.mergeDirectedEdge\n        : undirected\n        ? this.addUndirectedEdge\n        : this.addDirectedEdge;\n\n      method.call(this, source, target, attributes);\n    }\n\n    return this;\n  }\n\n  /**\n   * Method used to import a serialized graph.\n   *\n   * @param  {object|Graph} data  - The serialized graph.\n   * @param  {boolean}      merge - Whether to merge data.\n   * @return {Graph}              - Returns itself for chaining.\n   */\n  import(data, merge = false) {\n    // Importing a Graph instance\n    if (isGraph(data)) {\n      this.import(data.export(), merge);\n      return this;\n    }\n\n    // Importing a serialized graph\n    if (!isPlainObject(data))\n      throw new InvalidArgumentsGraphError(\n        'Graph.import: invalid argument. Expecting a serialized graph or, alternatively, a Graph instance.'\n      );\n\n    if (data.attributes) {\n      if (!isPlainObject(data.attributes))\n        throw new InvalidArgumentsGraphError(\n          'Graph.import: invalid attributes. Expecting a plain object.'\n        );\n\n      if (merge) this.mergeAttributes(data.attributes);\n      else this.replaceAttributes(data.attributes);\n    }\n\n    let i, l, list;\n\n    if (data.nodes) {\n      list = data.nodes;\n\n      if (!Array.isArray(list))\n        throw new InvalidArgumentsGraphError(\n          'Graph.import: invalid nodes. Expecting an array.'\n        );\n\n      for (i = 0, l = list.length; i < l; i++) this.importNode(list[i], merge);\n    }\n\n    if (data.edges) {\n      list = data.edges;\n\n      if (!Array.isArray(list))\n        throw new InvalidArgumentsGraphError(\n          'Graph.import: invalid edges. Expecting an array.'\n        );\n\n      for (i = 0, l = list.length; i < l; i++) this.importEdge(list[i], merge);\n    }\n\n    return this;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Utils\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method returning a null copy of the graph, i.e. a graph without nodes\n   * & edges but with the exact same options.\n   *\n   * @param  {object} options - Options to merge with the current ones.\n   * @return {Graph}          - The null copy.\n   */\n  nullCopy(options) {\n    return new Graph(assign({}, this._options, options));\n  }\n\n  /**\n   * Method returning an empty copy of the graph, i.e. a graph without edges but\n   * with the exact same options.\n   *\n   * @param  {object} options - Options to merge with the current ones.\n   * @return {Graph}          - The empty copy.\n   */\n  emptyCopy(options) {\n    const graph = this.nullCopy(options);\n\n    this._nodes.forEach((nodeData, key) => {\n      const attributes = assign({}, nodeData.attributes);\n\n      // NOTE: no need to emit events since user cannot access the instance yet\n      nodeData = new graph.NodeDataClass(key, attributes);\n      graph._nodes.set(key, nodeData);\n    });\n\n    return graph;\n  }\n\n  /**\n   * Method returning an exact copy of the graph.\n   *\n   * @return {Graph} - The copy.\n   */\n  copy() {\n    const graph = this.emptyCopy();\n\n    this.forEachEdge((edge, attr, source, target, _sa, _ta, undirected) => {\n      addEdge(\n        graph,\n        'copy',\n        false,\n        undirected,\n        edge,\n        source,\n        target,\n        assign({}, attr)\n      );\n    });\n\n    return graph;\n  }\n\n  /**\n   * Method upgrading the graph to a mixed one.\n   *\n   * @return {Graph} - The copy.\n   */\n  upgradeToMixed() {\n    if (this.type === 'mixed') return this;\n\n    // Upgrading node data:\n    // NOTE: maybe this could lead to some de-optimization by usual\n    // JavaScript engines but I cannot be sure of it. Another solution\n    // would be to reinstantiate the classes but this surely has a performance\n    // and memory impact.\n    this._nodes.forEach(data => data.upgradeToMixed());\n\n    // Mutating the options & the instance\n    this._options.type = 'mixed';\n    readOnlyProperty(this, 'type', this._options.type);\n    privateProperty(this, 'NodeDataClass', MixedNodeData);\n\n    return this;\n  }\n\n  /**\n   * Method upgrading the graph to a multi one.\n   *\n   * @return {Graph} - The copy.\n   */\n  upgradeToMulti() {\n    if (this.multi) return this;\n\n    // Mutating the options & the instance\n    this._options.multi = true;\n    readOnlyProperty(this, 'multi', true);\n\n    // Upgrading indices\n    upgradeStructureIndexToMulti(this);\n\n    return this;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Known methods\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method used by JavaScript to perform JSON serialization.\n   *\n   * @return {object} - The serialized graph.\n   */\n  toJSON() {\n    return this.export();\n  }\n\n  /**\n   * Method returning [object Graph].\n   */\n  toString() {\n    return '[object Graph]';\n  }\n\n  /**\n   * Method used internally by node's console to display a custom object.\n   *\n   * @return {object} - Formatted object representation of the graph.\n   */\n  inspect() {\n    const nodes = {};\n    this._nodes.forEach((data, key) => {\n      nodes[key] = data.attributes;\n    });\n\n    const edges = {},\n      multiIndex = {};\n\n    this._edges.forEach((data, key) => {\n      const direction = data.undirected ? '--' : '->';\n\n      let label = '';\n\n      let source = data.source.key;\n      let target = data.target.key;\n      let tmp;\n\n      if (data.undirected && source > target) {\n        tmp = source;\n        source = target;\n        target = tmp;\n      }\n\n      const desc = `(${source})${direction}(${target})`;\n\n      if (!key.startsWith('geid_')) {\n        label += `[${key}]: `;\n      } else if (this.multi) {\n        if (typeof multiIndex[desc] === 'undefined') {\n          multiIndex[desc] = 0;\n        } else {\n          multiIndex[desc]++;\n        }\n\n        label += `${multiIndex[desc]}. `;\n      }\n\n      label += desc;\n\n      edges[label] = data.attributes;\n    });\n\n    const dummy = {};\n\n    for (const k in this) {\n      if (\n        this.hasOwnProperty(k) &&\n        !EMITTER_PROPS.has(k) &&\n        typeof this[k] !== 'function'\n      )\n        dummy[k] = this[k];\n    }\n\n    dummy.attributes = this._attributes;\n    dummy.nodes = nodes;\n    dummy.edges = edges;\n\n    privateProperty(dummy, 'constructor', this.constructor);\n\n    return dummy;\n  }\n}\n\n/**\n * Attaching custom inspect method for node >= 10.\n */\nif (typeof Symbol !== 'undefined')\n  Graph.prototype[Symbol.for('nodejs.util.inspect.custom')] =\n    Graph.prototype.inspect;\n\n/**\n * Attaching methods to the prototype.\n *\n * Here, we are attaching a wide variety of methods to the Graph class'\n * prototype when those are very numerous and when their creation is\n * abstracted.\n */\n\n/**\n * Related to edge addition.\n */\nEDGE_ADD_METHODS.forEach(method => {\n  ['add', 'merge', 'update'].forEach(verb => {\n    const name = method.name(verb);\n    const fn = verb === 'add' ? addEdge : mergeEdge;\n\n    if (method.generateKey) {\n      Graph.prototype[name] = function (source, target, attributes) {\n        return fn(\n          this,\n          name,\n          true,\n          (method.type || this.type) === 'undirected',\n          null,\n          source,\n          target,\n          attributes,\n          verb === 'update'\n        );\n      };\n    } else {\n      Graph.prototype[name] = function (edge, source, target, attributes) {\n        return fn(\n          this,\n          name,\n          false,\n          (method.type || this.type) === 'undirected',\n          edge,\n          source,\n          target,\n          attributes,\n          verb === 'update'\n        );\n      };\n    }\n  });\n});\n\n/**\n * Self iterator.\n */\nif (typeof Symbol !== 'undefined')\n  Graph.prototype[Symbol.iterator] = Graph.prototype.adjacency;\n\n/**\n * Attributes-related.\n */\nattachAttributesMethods(Graph);\n\n/**\n * Edge iteration-related.\n */\nattachEdgeIterationMethods(Graph);\n\n/**\n * Neighbor iteration-related.\n */\nattachNeighborIterationMethods(Graph);\n","/**\n * Graphology Helper Classes\n * ==========================\n *\n * Building some higher-order classes instantiating the graph with\n * predefinite options.\n */\nimport {assign} from './utils';\nimport Graph from './graph';\n\nimport {\n  InvalidArgumentsGraphError,\n  NotFoundGraphError,\n  UsageGraphError\n} from './errors';\n\n/**\n * Alternative constructors.\n */\nclass DirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'directed'}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== false)\n      throw new InvalidArgumentsGraphError(\n        'DirectedGraph.from: inconsistent indication that the graph should be multi in given options!'\n      );\n\n    if (finalOptions.type !== 'directed')\n      throw new InvalidArgumentsGraphError(\n        'DirectedGraph.from: inconsistent \"' +\n          finalOptions.type +\n          '\" type in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\nclass UndirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'undirected'}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== false)\n      throw new InvalidArgumentsGraphError(\n        'UndirectedGraph.from: inconsistent indication that the graph should be multi in given options!'\n      );\n\n    if (finalOptions.type !== 'undirected')\n      throw new InvalidArgumentsGraphError(\n        'UndirectedGraph.from: inconsistent \"' +\n          finalOptions.type +\n          '\" type in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\nclass MultiGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({multi: true}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== true)\n      throw new InvalidArgumentsGraphError(\n        'MultiGraph.from: inconsistent indication that the graph should be simple in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\nclass MultiDirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'directed', multi: true}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== true)\n      throw new InvalidArgumentsGraphError(\n        'MultiDirectedGraph.from: inconsistent indication that the graph should be simple in given options!'\n      );\n\n    if (finalOptions.type !== 'directed')\n      throw new InvalidArgumentsGraphError(\n        'MultiDirectedGraph.from: inconsistent \"' +\n          finalOptions.type +\n          '\" type in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\nclass MultiUndirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'undirected', multi: true}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== true)\n      throw new InvalidArgumentsGraphError(\n        'MultiUndirectedGraph.from: inconsistent indication that the graph should be simple in given options!'\n      );\n\n    if (finalOptions.type !== 'undirected')\n      throw new InvalidArgumentsGraphError(\n        'MultiUndirectedGraph.from: inconsistent \"' +\n          finalOptions.type +\n          '\" type in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\n\n/**\n * Attaching static #.from method to each of the constructors.\n */\nfunction attachStaticFromMethod(Class) {\n  /**\n   * Builds a graph from serialized data or another graph's data.\n   *\n   * @param  {Graph|SerializedGraph} data      - Hydratation data.\n   * @param  {object}                [options] - Options.\n   * @return {Class}\n   */\n  Class.from = function (data, options) {\n    // Merging given options with serialized ones\n    const finalOptions = assign({}, data.options, options);\n\n    const instance = new Class(finalOptions);\n    instance.import(data);\n\n    return instance;\n  };\n}\n\nattachStaticFromMethod(Graph);\nattachStaticFromMethod(DirectedGraph);\nattachStaticFromMethod(UndirectedGraph);\nattachStaticFromMethod(MultiGraph);\nattachStaticFromMethod(MultiDirectedGraph);\nattachStaticFromMethod(MultiUndirectedGraph);\n\nGraph.Graph = Graph;\nGraph.DirectedGraph = DirectedGraph;\nGraph.UndirectedGraph = UndirectedGraph;\nGraph.MultiGraph = MultiGraph;\nGraph.MultiDirectedGraph = MultiDirectedGraph;\nGraph.MultiUndirectedGraph = MultiUndirectedGraph;\n\nGraph.InvalidArgumentsGraphError = InvalidArgumentsGraphError;\nGraph.NotFoundGraphError = NotFoundGraphError;\nGraph.UsageGraphError = UsageGraphError;\n\nexport {\n  Graph,\n  DirectedGraph,\n  UndirectedGraph,\n  MultiGraph,\n  MultiDirectedGraph,\n  MultiUndirectedGraph\n};\n","/**\n * Graphology CommonJS Endoint\n * ============================\n *\n * Endpoint for CommonJS modules consumers.\n */\nimport {Graph} from './classes';\n\nexport default Graph;\n"],"names":["assignPolyfill","target","arguments","i","l","length","k","assign","Object","getMatchingEdge","graph","source","type","sourceData","_nodes","get","edge","out","undirected","isGraph","value","addUndirectedEdgeWithKey","dropNode","isPlainObject","constructor","isEmpty","o","privateProperty","name","defineProperty","enumerable","configurable","writable","readOnlyProperty","descriptor","validateHints","hints","attributes","Array","isArray","incrementalIdStartingFromRandomByte","Math","floor","random","R","Reflect","ReflectApply","apply","receiver","args","Function","prototype","call","ReflectOwnKeys","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","concat","ProcessEmitWarning","warning","console","warn","NumberIsNaN","Number","isNaN","EventEmitter","init","eventsModule","once","_events","undefined","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","listener","TypeError","set","arg","RangeError","getPrototypeOf","create","setMaxListeners","n","_getMaxListeners","that","getMaxListeners","emit","push","doError","events","error","er","Error","err","message","context","handler","len","listeners","arrayClone","_addListener","prepend","m","existing","newListener","unshift","warned","w","String","emitter","count","addListener","on","prependListener","onceWrapper","fired","removeListener","wrapFn","_onceWrap","state","wrapped","bind","prependOnceListener","list","position","originalListener","shift","spliceOne","off","removeAllListeners","keys","key","_listeners","unwrap","evlistener","unwrapListeners","rawListeners","listenerCount","eventNames","arr","copy","index","pop","ret","Promise","resolve","reject","errorListener","resolver","slice","eventTargetAgnosticAddListener","addErrorHandlerIfEventEmitter","flags","addEventListener","wrapListener","removeEventListener","Iterator","next","Symbol","iterator","of","done","empty","fromSequence","sequence","is","ArrayBuffer","require$$0","support","require$$1","ARRAY_BUFFER_SUPPORT","SYMBOL_SUPPORT","iterOrNull","isView","iter","take","iterable","Infinity","array","step","GraphError","InvalidArgumentsGraphError","captureStackTrace","NotFoundGraphError","UsageGraphError","MixedNodeData","clear","inDegree","outDegree","undirectedDegree","directedSelfLoops","undirectedSelfLoops","DirectedNodeData","upgradeToMixed","UndirectedNodeData","EdgeData","updateStructureIndex","edgeData","targetData","multi","outKey","inKey","adj","container","Set","add","clearEdgeFromStructureIndex","sourceIndex","size","targetIndex","clearStructureIndex","values","upgradeStructureIndexToMulti","forEach","data","node","neighbor","edges","attachAttributeGetter","Class","method","element","_edges","attachAttributesGetter","attachAttributeChecker","hasOwnProperty","attachAttributeSetter","attachAttributeUpdater","updater","attachAttributeRemover","attachAttributesReplacer","attachAttributesMerger","ATTRIBUTES_METHODS","attacher","attachAttributesMethods","Graph","chain","iterables","current","iterate","EDGES_ITERATION","direction","collectSimple","object","collectMulti","forEachSimple","callback","avoid","forEachMulti","findSimple","shouldBreak","findMulti","createIterator","inner","sourceAttributes","targetAttributes","collectForKeySimple","collectForKeyMulti","edgesData","forEachForKeySimple","forEachForKeyMulti","findForKeySimple","findForKeyMulti","createIteratorForKey","v","createEdgeArray","from","undirectedSize","directedSize","mask","forEachEdge","shouldFilter","findEdge","createEdgeIterator","createEdgeArrayForNode","nodeData","fn","splice","lastIndexOf","forEachEdgeForNode","findEdgeForNode","found","createEdgeIteratorForNode","createEdgeArrayForPath","forEachEdgeForPath","findEdgeForPath","createEdgeIteratorForPath","attachEdgeArrayCreator","description","has","attachForEachEdge","forEachName","toUpperCase","mapName","result","e","ea","s","t","sa","ta","u","filterName","reduceName","initialValue","accumulator","attachFindEdge","findEdgeName","someName","everyName","attachEdgeIteratorCreator","originalName","attachEdgeIterationMethods","NEIGHBORS_ITERATION","merge","neighbors","createNeighborArrayForNode","forEachInObject","neighborData","forEachInObjectOnce","visited","findInObject","findInObjectOnce","forEachNeighborForNode","findNeighbor","createObjectIterator","createDedupedObjectIterator","createNeighborIterator","attachNeighborArrayCreator","attachForEachNeighbor","a","attachFindNeighbor","capitalizedSingular","findName","attachNeighborIteratorCreator","iteratorName","attachNeighborIterationMethods","forEachAdjacencySimple","breakable","forEachAdjacencyMulti","containerStep","createAdjacencyIteratorSimple","offset","edgeKey","edgeAttributes","createAdjacencyIteratorMulti","serializeNode","serialized","serializeEdge","validateSerializedNode","validateSerializedEdge","INSTANCE_ID","TYPES","EMITTER_PROPS","EDGE_ADD_METHODS","verb","generateKey","DEFAULTS","allowSelfLoops","addNode","NodeDataClass","unsafeAddNode","addEdge","mustGenerateKey","eventData","_edgeKeyGenerator","_undirectedSelfLoopCount","_directedSelfLoopCount","_undirectedSize","_directedSize","mergeEdge","asUpdater","alreadyExistingEdgeData","oldAttributes","options","instanceId","edgeId","edgeKeyGenerator","availableEdgeKey","Map","prop","_options","_resetInstanceCounters","hasNode","hasDirectedEdge","hasUndirectedEdge","hasEdge","directedEdge","undirectedEdge","areDirectedNeighbors","areOutNeighbors","areInNeighbors","areUndirectedNeighbors","areNeighbors","areInboundNeighbors","areOutboundNeighbors","directedDegree","loops","degree","inDegreeWithoutSelfLoops","outDegreeWithoutSelfLoops","directedDegreeWithoutSelfLoops","undirectedDegreeWithoutSelfLoops","degreeWithoutSelfLoops","extremities","opposite","hasExtremity","isUndirected","isDirected","isSelfLoop","mergeNode","updateNode","dropEdge","clearEdges","getAttribute","_attributes","getAttributes","hasAttribute","setAttribute","updateAttribute","removeAttribute","replaceAttributes","mergeAttributes","getNodeAttribute","getNodeAttributes","hasNodeAttribute","setNodeAttribute","updateNodeAttribute","removeNodeAttribute","replaceNodeAttributes","mergeNodeAttributes","updateEachNodeAttributes","updateEachEdgeAttributes","find","adjacency","nodes","forEachNode","findNode","mapNodes","order","someNode","everyNode","filterNodes","reduceNodes","nodeEntries","exportNode","exportEdge","importNode","importEdge","mergeUndirectedEdgeWithKey","mergeDirectedEdgeWithKey","addDirectedEdgeWithKey","mergeUndirectedEdge","mergeDirectedEdge","addUndirectedEdge","addDirectedEdge","nullCopy","emptyCopy","attr","_sa","_ta","upgradeToMulti","toJSON","toString","inspect","multiIndex","label","tmp","desc","startsWith","dummy","DirectedGraph","finalOptions","UndirectedGraph","MultiGraph","MultiDirectedGraph","MultiUndirectedGraph","attachStaticFromMethod","instance"],"mappings":"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"}