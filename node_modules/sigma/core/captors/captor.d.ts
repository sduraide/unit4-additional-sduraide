/// <reference types="node" />
/**
 * Sigma.js Captor Class
 * ======================
 * @module
 */
import { EventEmitter } from "events";
import { Coordinates, MouseCoords, TouchCoords } from "../../types";
import Sigma from "../../sigma";
/**
 * Captor utils functions
 * ======================
 */
/**
 * Extract the local X position from a mouse event or touch object.
 *
 * @param  {event}  e - A mouse event or touch object.
 * @return {number}     The local X value of the mouse.
 */
export declare function getX(e: MouseEvent | Touch): number;
/**
 * Extract the local Y position from a mouse event or touch object.
 *
 * @param  {event}  e - A mouse event or touch object.
 * @return {number}     The local Y value of the mouse.
 */
export declare function getY(e: MouseEvent | Touch): number;
/**
 * Extract the local X and Y coordinates from a mouse event or touch object.
 *
 * @param  {event}  e - A mouse event or touch object.
 * @return {number}     The local Y value of the mouse.
 */
export declare function getPosition(e: MouseEvent | Touch): Coordinates;
/**
 * Convert mouse coords to sigma coords.
 *
 * @param  {event}   e   - A mouse event or touch object.
 *
 * @return {object}
 */
export declare function getMouseCoords(e: MouseEvent): MouseCoords;
export declare function getTouchesArray(touches: TouchList): Touch[];
/**
 * Convert touch coords to sigma coords.
 */
export declare function getTouchCoords(e: TouchEvent): TouchCoords;
/**
 * Extract the wheel delta from a mouse event or touch object.
 *
 * @param  {event}  e - A mouse event or touch object.
 * @return {number}     The wheel delta of the mouse.
 */
export declare function getWheelDelta(e: WheelEvent): number;
/**
 * Abstract class representing a captor like the user's mouse or touch controls.
 */
export default abstract class Captor extends EventEmitter {
    container: HTMLElement;
    renderer: Sigma;
    constructor(container: HTMLElement, renderer: Sigma);
    abstract kill(): void;
}
