/**
 * Sigma.js WebGL Renderer Node Program
 * =====================================
 *
 * Program rendering nodes using GL_POINTS, but that draws an image on top of
 * the classic colored disc.
 * @module
 */
import { NodeDisplayData } from "../../../types";
import { RenderNodeParams } from "./common/node";
import Sigma from "../../../sigma";
/**
 * To share the texture between the program instances of the graph and the
 * hovered nodes (to prevent some flickering, mostly), this program must be
 * "built" for each sigma instance:
 */
export default function getNodeProgramImage(): {
    new (gl: WebGLRenderingContext, renderer: Sigma): {
        texture: WebGLTexture;
        textureLocation: GLint;
        atlasLocation: WebGLUniformLocation;
        latestRenderParams?: RenderNodeParams | undefined;
        bind(): void;
        process(data: NodeDisplayData & {
            image?: string;
        }, hidden: boolean, offset: number): void;
        render(params: RenderNodeParams): void;
        rebindTexture(): void;
        positionLocation: number;
        sizeLocation: number;
        colorLocation: number;
        matrixLocation: WebGLUniformLocation;
        ratioLocation: WebGLUniformLocation;
        scaleLocation: WebGLUniformLocation;
        points: number;
        attributes: number;
        gl: WebGLRenderingContext;
        array: Float32Array;
        buffer: WebGLBuffer;
        vertexShaderSource: string;
        vertexShader: WebGLShader;
        fragmentShaderSource: string;
        fragmentShader: WebGLShader;
        program: WebGLProgram;
        bufferData(): void;
        allocate(capacity: number): void;
    };
};
